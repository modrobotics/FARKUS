
Conveyance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000266  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000f0  00000000  00000000  000009c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000a8  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000858  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002a4  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000864  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c4  00000000  00000000  00001eb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020a  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016d  00000000  00000000  00002186  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  000022f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  9e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
void loop();

void setup()
{
	//setup code
}
  a6:	08 95       	ret

000000a8 <loop>:

void loop()
{
	//main loop code
  a8:	08 95       	ret

000000aa <main>:
#include <Arduino.h>

int main(void)
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
{
	init();
  ae:	0e 94 ac 00 	call	0x158	; 0x158 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
  b2:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
  b6:	c0 e0       	ldi	r28, 0x00	; 0
  b8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  ba:	0e 94 54 00 	call	0xa8	; 0xa8 <loop>
		if (serialEventRun) serialEventRun();
  be:	20 97       	sbiw	r28, 0x00	; 0
  c0:	e1 f3       	breq	.-8      	; 0xba <main+0x10>
  c2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
  c6:	f9 cf       	rjmp	.-14     	; 0xba <main+0x10>

000000c8 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	80 91 04 01 	lds	r24, 0x0104
  e2:	90 91 05 01 	lds	r25, 0x0105
  e6:	a0 91 06 01 	lds	r26, 0x0106
  ea:	b0 91 07 01 	lds	r27, 0x0107
  ee:	30 91 08 01 	lds	r19, 0x0108
  f2:	01 96       	adiw	r24, 0x01	; 1
  f4:	a1 1d       	adc	r26, r1
  f6:	b1 1d       	adc	r27, r1
  f8:	23 2f       	mov	r18, r19
  fa:	2d 5f       	subi	r18, 0xFD	; 253
  fc:	2d 37       	cpi	r18, 0x7D	; 125
  fe:	20 f0       	brcs	.+8      	; 0x108 <__vector_16+0x40>
 100:	2d 57       	subi	r18, 0x7D	; 125
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	20 93 08 01 	sts	0x0108, r18
 10c:	80 93 04 01 	sts	0x0104, r24
 110:	90 93 05 01 	sts	0x0105, r25
 114:	a0 93 06 01 	sts	0x0106, r26
 118:	b0 93 07 01 	sts	0x0107, r27
 11c:	80 91 00 01 	lds	r24, 0x0100
 120:	90 91 01 01 	lds	r25, 0x0101
 124:	a0 91 02 01 	lds	r26, 0x0102
 128:	b0 91 03 01 	lds	r27, 0x0103
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	a1 1d       	adc	r26, r1
 130:	b1 1d       	adc	r27, r1
 132:	80 93 00 01 	sts	0x0100, r24
 136:	90 93 01 01 	sts	0x0101, r25
 13a:	a0 93 02 01 	sts	0x0102, r26
 13e:	b0 93 03 01 	sts	0x0103, r27
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 158:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 15a:	84 b5       	in	r24, 0x24	; 36
 15c:	82 60       	ori	r24, 0x02	; 2
 15e:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 160:	84 b5       	in	r24, 0x24	; 36
 162:	81 60       	ori	r24, 0x01	; 1
 164:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 166:	85 b5       	in	r24, 0x25	; 37
 168:	82 60       	ori	r24, 0x02	; 2
 16a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 16c:	85 b5       	in	r24, 0x25	; 37
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 172:	ee e6       	ldi	r30, 0x6E	; 110
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 182:	80 81       	ld	r24, Z
 184:	82 60       	ori	r24, 0x02	; 2
 186:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 188:	80 81       	ld	r24, Z
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 18e:	e0 e8       	ldi	r30, 0x80	; 128
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	81 60       	ori	r24, 0x01	; 1
 196:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 198:	e1 eb       	ldi	r30, 0xB1	; 177
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	84 60       	ori	r24, 0x04	; 4
 1a0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 1a2:	e0 eb       	ldi	r30, 0xB0	; 176
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	84 60       	ori	r24, 0x04	; 4
 1b4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 1bc:	80 81       	ld	r24, Z
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 1c2:	80 81       	ld	r24, Z
 1c4:	80 68       	ori	r24, 0x80	; 128
 1c6:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 1c8:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 1cc:	08 95       	ret

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
