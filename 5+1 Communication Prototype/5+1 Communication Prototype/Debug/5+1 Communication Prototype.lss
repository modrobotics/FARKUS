
5+1 Communication Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00002a86  00002b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000115  008002d8  008002d8  00002cf2  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  00005d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000980  00000000  00000000  00006c40  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c6b  00000000  00000000  000075c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000aa3d  00000000  00000000  0000822b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ea7  00000000  00000000  00012c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000483a  00000000  00000000  00014b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001390  00000000  00000000  0001934c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000025e7  00000000  00000000  0001a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006261  00000000  00000000  0001ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000818  00000000  00000000  00022f24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 e4 0b 	jmp	0x17c8	; 0x17c8 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_18>
      4c:	0c 94 03 0e 	jmp	0x1c06	; 0x1c06 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	18 04       	cpc	r1, r8
      c4:	6f 0f       	add	r22, r31

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e6 e8       	ldi	r30, 0x86	; 134
      da:	fa e2       	ldi	r31, 0x2A	; 42
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a8 3d       	cpi	r26, 0xD8	; 216
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	13 e0       	ldi	r17, 0x03	; 3
      ea:	a8 ed       	ldi	r26, 0xD8	; 216
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ad 3e       	cpi	r26, 0xED	; 237
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__tablejump__>
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <main>
     112:	0c 94 41 15 	jmp	0x2a82	; 0x2a82 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_Z11handleErrorv>:
	stateVar = IDLE;
};

void handleError(void)
{
	open.detach(); //detach servos
     11a:	80 ee       	ldi	r24, 0xE0	; 224
     11c:	92 e0       	ldi	r25, 0x02	; 2
     11e:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN5Servo6detachEv>
	
	Serial.print("ERROR: ");
     122:	89 ec       	ldi	r24, 0xC9	; 201
     124:	93 e0       	ldi	r25, 0x03	; 3
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	71 e0       	ldi	r23, 0x01	; 1
     12a:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
	switch(errorVar)
     12e:	80 91 dd 02 	lds	r24, 0x02DD
     132:	81 30       	cpi	r24, 0x01	; 1
     134:	99 f0       	breq	.+38     	; 0x15c <_Z11handleErrorv+0x42>
     136:	81 30       	cpi	r24, 0x01	; 1
     138:	18 f0       	brcs	.+6      	; 0x140 <_Z11handleErrorv+0x26>
     13a:	82 30       	cpi	r24, 0x02	; 2
     13c:	b1 f4       	brne	.+44     	; 0x16a <_Z11handleErrorv+0x50>
     13e:	07 c0       	rjmp	.+14     	; 0x14e <_Z11handleErrorv+0x34>
	{
		case NONE:
		Serial.println("NONE?");
     140:	89 ec       	ldi	r24, 0xC9	; 201
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	68 e0       	ldi	r22, 0x08	; 8
     146:	71 e0       	ldi	r23, 0x01	; 1
     148:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		break;
     14c:	14 c0       	rjmp	.+40     	; 0x176 <_Z11handleErrorv+0x5c>
		
		case LOWER_FAIL:
		Serial.println("LOWER_FAIL");
     14e:	89 ec       	ldi	r24, 0xC9	; 201
     150:	93 e0       	ldi	r25, 0x03	; 3
     152:	6e e0       	ldi	r22, 0x0E	; 14
     154:	71 e0       	ldi	r23, 0x01	; 1
     156:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		break;
     15a:	0d c0       	rjmp	.+26     	; 0x176 <_Z11handleErrorv+0x5c>
		
		case RAISE_FAIL:
		Serial.println("RAISE_FAIL");
     15c:	89 ec       	ldi	r24, 0xC9	; 201
     15e:	93 e0       	ldi	r25, 0x03	; 3
     160:	69 e1       	ldi	r22, 0x19	; 25
     162:	71 e0       	ldi	r23, 0x01	; 1
     164:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		break;
     168:	06 c0       	rjmp	.+12     	; 0x176 <_Z11handleErrorv+0x5c>
		
		default:
		Serial.println("UNKNOWN");
     16a:	89 ec       	ldi	r24, 0xC9	; 201
     16c:	93 e0       	ldi	r25, 0x03	; 3
     16e:	64 e2       	ldi	r22, 0x24	; 36
     170:	71 e0       	ldi	r23, 0x01	; 1
     172:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
	}
	while(true) //loop forever to require manual reset
	{
		digitalWrite(RED_PIN, HIGH);
     176:	84 e0       	ldi	r24, 0x04	; 4
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
		delay(500);
     17e:	64 ef       	ldi	r22, 0xF4	; 244
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		digitalWrite(RED_PIN, LOW);
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
		delay(500);
     192:	64 ef       	ldi	r22, 0xF4	; 244
     194:	71 e0       	ldi	r23, 0x01	; 1
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
     19e:	eb cf       	rjmp	.-42     	; 0x176 <_Z11handleErrorv+0x5c>

000001a0 <_Z9startTestv>:
		return 0;
	}
};

void startTest(void)
{
     1a0:	8f 92       	push	r8
     1a2:	9f 92       	push	r9
     1a4:	af 92       	push	r10
     1a6:	bf 92       	push	r11
     1a8:	cf 92       	push	r12
     1aa:	df 92       	push	r13
     1ac:	ef 92       	push	r14
     1ae:	ff 92       	push	r15
     1b0:	0f 93       	push	r16
     1b2:	1f 93       	push	r17
     1b4:	cf 93       	push	r28
     1b6:	df 93       	push	r29
     1b8:	00 d0       	rcall	.+0      	; 0x1ba <_Z9startTestv+0x1a>
     1ba:	00 d0       	rcall	.+0      	; 0x1bc <_Z9startTestv+0x1c>
     1bc:	0f 92       	push	r0
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
	testResult = UNKNOWN;
     1c2:	10 92 de 02 	sts	0x02DE, r1
	digitalWrite(RED_PIN, LOW);
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	digitalWrite(GREEN_PIN, LOW); //clear both pins when result is unknown
     1ce:	86 e0       	ldi	r24, 0x06	; 6
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	cubelets.stopAllCubeletCommunication();
     1d6:	08 ed       	ldi	r16, 0xD8	; 216
     1d8:	12 e0       	ldi	r17, 0x02	; 2
     1da:	c8 01       	movw	r24, r16
     1dc:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN14CubeletsShield27stopAllCubeletCommunicationEv>
	cubelets.greenOffAllCubelets();
     1e0:	c8 01       	movw	r24, r16
     1e2:	0e 94 08 06 	call	0xc10	; 0xc10 <_ZN14CubeletsShield19greenOffAllCubeletsEv>
	
	delay(50);
     1e6:	62 e3       	ldi	r22, 0x32	; 50
     1e8:	70 e0       	ldi	r23, 0x00	; 0
     1ea:	80 e0       	ldi	r24, 0x00	; 0
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		
	digitalWrite(PISTON_PIN, LOW); //lower piston over cubelet
     1f2:	87 e0       	ldi	r24, 0x07	; 7
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
		
	long startTime = millis();
     1fa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     1fe:	6b 01       	movw	r12, r22
     200:	7c 01       	movw	r14, r24
	while(!digitalRead(RAISED_PIN)) //wait for arm raised sensor to go HIGH, indicating that arm has dropped 
     202:	17 c0       	rjmp	.+46     	; 0x232 <_Z9startTestv+0x92>
	{
		if((millis() - startTime) >= 2000) //if it doesn't drop in 2 seconds, something is wrong
     204:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	8c 19       	sub	r24, r12
     20e:	9d 09       	sbc	r25, r13
     210:	ae 09       	sbc	r26, r14
     212:	bf 09       	sbc	r27, r15
     214:	80 3d       	cpi	r24, 0xD0	; 208
     216:	27 e0       	ldi	r18, 0x07	; 7
     218:	92 07       	cpc	r25, r18
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	a2 07       	cpc	r26, r18
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	b2 07       	cpc	r27, r18
     222:	38 f0       	brcs	.+14     	; 0x232 <_Z9startTestv+0x92>
		{
			stateVar = ERROR; //error handling here
     224:	82 e0       	ldi	r24, 0x02	; 2
     226:	80 93 df 02 	sts	0x02DF, r24
			errorVar = LOWER_FAIL;
     22a:	80 93 dd 02 	sts	0x02DD, r24
			handleError();
     22e:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11handleErrorv>
	delay(50);
		
	digitalWrite(PISTON_PIN, LOW); //lower piston over cubelet
		
	long startTime = millis();
	while(!digitalRead(RAISED_PIN)) //wait for arm raised sensor to go HIGH, indicating that arm has dropped 
     232:	8e e0       	ldi	r24, 0x0E	; 14
     234:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <digitalRead>
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	21 f3       	breq	.-56     	; 0x204 <_Z9startTestv+0x64>
			handleError();
			return;
		}
	}
	
	delay(1000); //still want to wait a second to pass the drop		
     23c:	68 ee       	ldi	r22, 0xE8	; 232
     23e:	73 e0       	ldi	r23, 0x03	; 3
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		
	open.attach(OPEN_PIN);
     248:	00 ee       	ldi	r16, 0xE0	; 224
     24a:	12 e0       	ldi	r17, 0x02	; 2
     24c:	c8 01       	movw	r24, r16
     24e:	65 e0       	ldi	r22, 0x05	; 5
     250:	70 e0       	ldi	r23, 0x00	; 0
     252:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN5Servo6attachEi>
	
	open.write(CLOSED_POS); //close faces
     256:	c8 01       	movw	r24, r16
     258:	64 eb       	ldi	r22, 0xB4	; 180
     25a:	70 e0       	ldi	r23, 0x00	; 0
     25c:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Servo5writeEi>
	
	delay(1000); //wait for faces to close
     260:	68 ee       	ldi	r22, 0xE8	; 232
     262:	73 e0       	ldi	r23, 0x03	; 3
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
	
	open.detach();
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN5Servo6detachEv>
	
	unsigned char testFace[5] = {2, 3, 4, 5, 1};
     272:	de 01       	movw	r26, r28
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	e6 e3       	ldi	r30, 0x36	; 54
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	85 e0       	ldi	r24, 0x05	; 5
     27c:	01 90       	ld	r0, Z+
     27e:	0d 92       	st	X+, r0
     280:	81 50       	subi	r24, 0x01	; 1
     282:	e1 f7       	brne	.-8      	; 0x27c <_Z9startTestv+0xdc>
	
	delay(500); //response
     284:	64 ef       	ldi	r22, 0xF4	; 244
     286:	71 e0       	ldi	r23, 0x01	; 1
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
     290:	4e 01       	movw	r8, r28
     292:	08 94       	sec
     294:	81 1c       	adc	r8, r1
     296:	91 1c       	adc	r9, r1
     298:	0f 2e       	mov	r0, r31
     29a:	f3 e3       	ldi	r31, 0x33	; 51
     29c:	af 2e       	mov	r10, r31
     29e:	bb 24       	eor	r11, r11
     2a0:	f0 2d       	mov	r31, r0
	
	for(unsigned char face = 1; face <= 5; face++)
     2a2:	11 e0       	ldi	r17, 0x01	; 1
	{				 
// 		Serial.print("Starting comm on face ");
// 		Serial.println(face);
		cubelets.startCommunicationByFace(face);
     2a4:	0f 2e       	mov	r0, r31
     2a6:	f8 ed       	ldi	r31, 0xD8	; 216
     2a8:	ef 2e       	mov	r14, r31
     2aa:	f2 e0       	ldi	r31, 0x02	; 2
     2ac:	ff 2e       	mov	r15, r31
     2ae:	f0 2d       	mov	r31, r0
     2b0:	c7 01       	movw	r24, r14
     2b2:	61 2f       	mov	r22, r17
     2b4:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN14CubeletsShield24startCommunicationByFaceEh>
		delay(1000);
     2b8:	68 ee       	ldi	r22, 0xE8	; 232
     2ba:	73 e0       	ldi	r23, 0x03	; 3
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
// 		Serial.print("Setting face ");
// 		Serial.print(face);
// 		Serial.print(" to ");
// 		Serial.println(51*face);		
		while(cubelets.setBroadcastBlockValueByFace(face, 51*face) != 0); //keep trying until returns zero
     2c4:	ca 2c       	mov	r12, r10
     2c6:	c7 01       	movw	r24, r14
     2c8:	61 2f       	mov	r22, r17
     2ca:	4c 2d       	mov	r20, r12
     2cc:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     2d0:	88 23       	and	r24, r24
     2d2:	c9 f7       	brne	.-14     	; 0x2c6 <_Z9startTestv+0x126>
/*		Serial.println("Set.");*/
		//cubelets.setBroadcastBlockValueByFace(face, 51*face);

		cubelets.greenOnByFace(face);
     2d4:	c7 01       	movw	r24, r14
     2d6:	61 2f       	mov	r22, r17
     2d8:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN14CubeletsShield13greenOnByFaceEh>
		
		delay(1000); //time for response
     2dc:	68 ee       	ldi	r22, 0xE8	; 232
     2de:	73 e0       	ldi	r23, 0x03	; 3
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		
// 		Serial.print("Starting comm on face ");
// 		Serial.println(testFace[face-1]);
		cubelets.startCommunicationByFace(testFace[face-1]);
     2e8:	f4 01       	movw	r30, r8
     2ea:	c1 90       	ld	r12, Z+
     2ec:	4f 01       	movw	r8, r30
     2ee:	c7 01       	movw	r24, r14
     2f0:	6c 2d       	mov	r22, r12
     2f2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN14CubeletsShield24startCommunicationByFaceEh>
		delay(1000);
     2f6:	68 ee       	ldi	r22, 0xE8	; 232
     2f8:	73 e0       	ldi	r23, 0x03	; 3
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
// 		do 
// 		{
// 			faceReading = cubelets.getNeighborBlockValueByFace(testFace[face-1]);
// 			delay(100);
// 		} while (faceReading != false);
		unsigned char faceReading = cubelets.getNeighborBlockValueByFace(testFace[face-1]);
     302:	c7 01       	movw	r24, r14
     304:	6c 2d       	mov	r22, r12
     306:	0e 94 6d 06 	call	0xcda	; 0xcda <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>
//   		Serial.print(testFace[face-1]);
//   		Serial.print(" reads ");
//   		Serial.println(faceReading);

		//check that number was set correctly...set tests input, check tests output.
		if(faceReading != 51*face)
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	8a 15       	cp	r24, r10
     30e:	9b 05       	cpc	r25, r11
     310:	21 f0       	breq	.+8      	; 0x31a <_Z9startTestv+0x17a>
		{
			/*Serial.println("failing");*/
			testResult = FAIL;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	80 93 de 02 	sts	0x02DE, r24
			break; //ends test as soon as a failure is found
     318:	15 c0       	rjmp	.+42     	; 0x344 <_Z9startTestv+0x1a4>
		//testing done.
		//cubelets.setBroadcastBlockValueByFace(face, 0);
		//delay(1000);
		//delay(500);
/*		Serial.println("Stopping all communication");*/
		cubelets.stopAllCubeletCommunication();
     31a:	c7 01       	movw	r24, r14
     31c:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <_ZN14CubeletsShield27stopAllCubeletCommunicationEv>
		delay(500);
     320:	64 ef       	ldi	r22, 0xF4	; 244
     322:	71 e0       	ldi	r23, 0x01	; 1
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		cubelets.greenOffByFace(face);
     32c:	c7 01       	movw	r24, r14
     32e:	61 2f       	mov	r22, r17
     330:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN14CubeletsShield14greenOffByFaceEh>
	
	unsigned char testFace[5] = {2, 3, 4, 5, 1};
	
	delay(500); //response
	
	for(unsigned char face = 1; face <= 5; face++)
     334:	1f 5f       	subi	r17, 0xFF	; 255
     336:	83 e3       	ldi	r24, 0x33	; 51
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	a8 0e       	add	r10, r24
     33c:	b9 1e       	adc	r11, r25
     33e:	16 30       	cpi	r17, 0x06	; 6
     340:	09 f0       	breq	.+2      	; 0x344 <_Z9startTestv+0x1a4>
     342:	b6 cf       	rjmp	.-148    	; 0x2b0 <_Z9startTestv+0x110>
		delay(500);
		cubelets.greenOffByFace(face);
		//delay(500); //response
	}
	
	open.attach(OPEN_PIN);
     344:	00 ee       	ldi	r16, 0xE0	; 224
     346:	12 e0       	ldi	r17, 0x02	; 2
     348:	c8 01       	movw	r24, r16
     34a:	65 e0       	ldi	r22, 0x05	; 5
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN5Servo6attachEi>
	open.write(OPEN_POS); //open faces
     352:	c8 01       	movw	r24, r16
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Servo5writeEi>
	delay(1000); //wait for faces to open
     35c:	68 ee       	ldi	r22, 0xE8	; 232
     35e:	73 e0       	ldi	r23, 0x03	; 3
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
	open.detach();
     368:	c8 01       	movw	r24, r16
     36a:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN5Servo6detachEv>
	
	digitalWrite(PISTON_PIN, HIGH); //raise arm
     36e:	87 e0       	ldi	r24, 0x07	; 7
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	
	startTime = millis();
     376:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     37a:	6b 01       	movw	r12, r22
     37c:	7c 01       	movw	r14, r24
	while(digitalRead(RAISED_PIN)) //wait for arm to raise
     37e:	18 c0       	rjmp	.+48     	; 0x3b0 <_Z9startTestv+0x210>
	{
		if((millis() - startTime) >= 2000) //if arm doesn't raise in 2 seconds, throw error
     380:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     384:	dc 01       	movw	r26, r24
     386:	cb 01       	movw	r24, r22
     388:	8c 19       	sub	r24, r12
     38a:	9d 09       	sbc	r25, r13
     38c:	ae 09       	sbc	r26, r14
     38e:	bf 09       	sbc	r27, r15
     390:	80 3d       	cpi	r24, 0xD0	; 208
     392:	e7 e0       	ldi	r30, 0x07	; 7
     394:	9e 07       	cpc	r25, r30
     396:	e0 e0       	ldi	r30, 0x00	; 0
     398:	ae 07       	cpc	r26, r30
     39a:	e0 e0       	ldi	r30, 0x00	; 0
     39c:	be 07       	cpc	r27, r30
     39e:	40 f0       	brcs	.+16     	; 0x3b0 <_Z9startTestv+0x210>
		{

			errorVar = RAISE_FAIL;
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	80 93 dd 02 	sts	0x02DD, r24
			stateVar = ERROR;
     3a6:	82 e0       	ldi	r24, 0x02	; 2
     3a8:	80 93 df 02 	sts	0x02DF, r24
			handleError();
     3ac:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11handleErrorv>
	open.detach();
	
	digitalWrite(PISTON_PIN, HIGH); //raise arm
	
	startTime = millis();
	while(digitalRead(RAISED_PIN)) //wait for arm to raise
     3b0:	8e e0       	ldi	r24, 0x0E	; 14
     3b2:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <digitalRead>
     3b6:	00 97       	sbiw	r24, 0x00	; 0
     3b8:	19 f7       	brne	.-58     	; 0x380 <_Z9startTestv+0x1e0>
			return;
		}
	}
	//Serial.print("Failures: ");
	//Serial.println(failCount);
	if(testResult != FAIL)
     3ba:	80 91 de 02 	lds	r24, 0x02DE
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	71 f0       	breq	.+28     	; 0x3de <_Z9startTestv+0x23e>
	{
		testResult = PASS;
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	80 93 de 02 	sts	0x02DE, r24
		Serial.println("PASS");
     3c8:	89 ec       	ldi	r24, 0xC9	; 201
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	6c e2       	ldi	r22, 0x2C	; 44
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		digitalWrite(GREEN_PIN, HIGH);
     3d4:	86 e0       	ldi	r24, 0x06	; 6
     3d6:	61 e0       	ldi	r22, 0x01	; 1
     3d8:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
     3dc:	0a c0       	rjmp	.+20     	; 0x3f2 <_Z9startTestv+0x252>
	}
	else
	{
		Serial.println("FAIL");
     3de:	89 ec       	ldi	r24, 0xC9	; 201
     3e0:	93 e0       	ldi	r25, 0x03	; 3
     3e2:	61 e3       	ldi	r22, 0x31	; 49
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		digitalWrite(RED_PIN, HIGH);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	61 e0       	ldi	r22, 0x01	; 1
     3ee:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	}
	delay(1000); //give it a sec.
     3f2:	68 ee       	ldi	r22, 0xE8	; 232
     3f4:	73 e0       	ldi	r23, 0x03	; 3
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
	stateVar = IDLE;
     3fe:	10 92 df 02 	sts	0x02DF, r1
};
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	08 95       	ret

00000426 <_Z14actionResponse6String>:
		} break;		
	}
}

int actionResponse(String inString) //act on serial commands and generate response
{
     426:	ef 92       	push	r14
     428:	ff 92       	push	r15
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	e1 97       	sbiw	r28, 0x31	; 49
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
     440:	7c 01       	movw	r14, r24
	{
		Serial.println("ERROR"); //only do this. requires manual reset to clear error.
		return 0;
	}*/
	
	if(inString.equalsIgnoreCase("I"))
     442:	ce 01       	movw	r24, r28
     444:	8b 96       	adiw	r24, 0x2b	; 43
     446:	6b e3       	ldi	r22, 0x3B	; 59
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     44e:	c7 01       	movw	r24, r14
     450:	be 01       	movw	r22, r28
     452:	65 5d       	subi	r22, 0xD5	; 213
     454:	7f 4f       	sbci	r23, 0xFF	; 255
     456:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     45a:	18 2f       	mov	r17, r24
     45c:	ce 01       	movw	r24, r28
     45e:	8b 96       	adiw	r24, 0x2b	; 43
     460:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     464:	11 23       	and	r17, r17
     466:	39 f0       	breq	.+14     	; 0x476 <_Z14actionResponse6String+0x50>
	{
		Serial.println(ID); //send ID to host
     468:	89 ec       	ldi	r24, 0xC9	; 201
     46a:	93 e0       	ldi	r25, 0x03	; 3
     46c:	6d e3       	ldi	r22, 0x3D	; 61
     46e:	71 e0       	ldi	r23, 0x01	; 1
     470:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		return 0;
     474:	d9 c0       	rjmp	.+434    	; 0x628 <_Z14actionResponse6String+0x202>
	}
	
	if(inString.equalsIgnoreCase("C0")) //configuration
     476:	ce 01       	movw	r24, r28
     478:	84 96       	adiw	r24, 0x24	; 36
     47a:	63 e4       	ldi	r22, 0x43	; 67
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     482:	c7 01       	movw	r24, r14
     484:	be 01       	movw	r22, r28
     486:	6c 5d       	subi	r22, 0xDC	; 220
     488:	7f 4f       	sbci	r23, 0xFF	; 255
     48a:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     48e:	18 2f       	mov	r17, r24
     490:	ce 01       	movw	r24, r28
     492:	84 96       	adiw	r24, 0x24	; 36
     494:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     498:	11 23       	and	r17, r17
     49a:	91 f0       	breq	.+36     	; 0x4c0 <_Z14actionResponse6String+0x9a>
	{
		if(stateVar == WORKING) //can't change configuration while working
     49c:	80 91 df 02 	lds	r24, 0x02DF
     4a0:	81 30       	cpi	r24, 0x01	; 1
     4a2:	39 f4       	brne	.+14     	; 0x4b2 <_Z14actionResponse6String+0x8c>
		{
			Serial.println("WORKING");
     4a4:	89 ec       	ldi	r24, 0xC9	; 201
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	66 e4       	ldi	r22, 0x46	; 70
     4aa:	71 e0       	ldi	r23, 0x01	; 1
     4ac:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			return 0;
     4b0:	bb c0       	rjmp	.+374    	; 0x628 <_Z14actionResponse6String+0x202>
		}
		else
		{
			Serial.println("C0");
     4b2:	89 ec       	ldi	r24, 0xC9	; 201
     4b4:	93 e0       	ldi	r25, 0x03	; 3
     4b6:	63 e4       	ldi	r22, 0x43	; 67
     4b8:	71 e0       	ldi	r23, 0x01	; 1
     4ba:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			return 0;
     4be:	b4 c0       	rjmp	.+360    	; 0x628 <_Z14actionResponse6String+0x202>
		}

	}
	
	if(inString.equalsIgnoreCase("C1")) //configuration
     4c0:	ce 01       	movw	r24, r28
     4c2:	4d 96       	adiw	r24, 0x1d	; 29
     4c4:	6e e4       	ldi	r22, 0x4E	; 78
     4c6:	71 e0       	ldi	r23, 0x01	; 1
     4c8:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     4cc:	c7 01       	movw	r24, r14
     4ce:	be 01       	movw	r22, r28
     4d0:	63 5e       	subi	r22, 0xE3	; 227
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     4d8:	18 2f       	mov	r17, r24
     4da:	ce 01       	movw	r24, r28
     4dc:	4d 96       	adiw	r24, 0x1d	; 29
     4de:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     4e2:	11 23       	and	r17, r17
     4e4:	91 f0       	breq	.+36     	; 0x50a <_Z14actionResponse6String+0xe4>
	{
		if(stateVar == WORKING) //can't change configuration while working
     4e6:	80 91 df 02 	lds	r24, 0x02DF
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	39 f4       	brne	.+14     	; 0x4fc <_Z14actionResponse6String+0xd6>
		{
			Serial.println("WORKING");
     4ee:	89 ec       	ldi	r24, 0xC9	; 201
     4f0:	93 e0       	ldi	r25, 0x03	; 3
     4f2:	66 e4       	ldi	r22, 0x46	; 70
     4f4:	71 e0       	ldi	r23, 0x01	; 1
     4f6:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			return 0;
     4fa:	96 c0       	rjmp	.+300    	; 0x628 <_Z14actionResponse6String+0x202>
		}
		else
		{
			Serial.println("C1");
     4fc:	89 ec       	ldi	r24, 0xC9	; 201
     4fe:	93 e0       	ldi	r25, 0x03	; 3
     500:	6e e4       	ldi	r22, 0x4E	; 78
     502:	71 e0       	ldi	r23, 0x01	; 1
     504:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			return 0;
     508:	8f c0       	rjmp	.+286    	; 0x628 <_Z14actionResponse6String+0x202>
		}
	}
	
	if(inString.equalsIgnoreCase("GO")) //init test command
     50a:	ce 01       	movw	r24, r28
     50c:	46 96       	adiw	r24, 0x16	; 22
     50e:	61 e5       	ldi	r22, 0x51	; 81
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     516:	c7 01       	movw	r24, r14
     518:	be 01       	movw	r22, r28
     51a:	6a 5e       	subi	r22, 0xEA	; 234
     51c:	7f 4f       	sbci	r23, 0xFF	; 255
     51e:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     522:	18 2f       	mov	r17, r24
     524:	ce 01       	movw	r24, r28
     526:	46 96       	adiw	r24, 0x16	; 22
     528:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     52c:	11 23       	and	r17, r17
     52e:	b9 f0       	breq	.+46     	; 0x55e <_Z14actionResponse6String+0x138>
	{
		if(stateVar == WORKING)
     530:	80 91 df 02 	lds	r24, 0x02DF
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	39 f4       	brne	.+14     	; 0x546 <_Z14actionResponse6String+0x120>
		{
			Serial.println("WORKING");
     538:	89 ec       	ldi	r24, 0xC9	; 201
     53a:	93 e0       	ldi	r25, 0x03	; 3
     53c:	66 e4       	ldi	r22, 0x46	; 70
     53e:	71 e0       	ldi	r23, 0x01	; 1
     540:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			return 0;
     544:	71 c0       	rjmp	.+226    	; 0x628 <_Z14actionResponse6String+0x202>
		}
		Serial.println("GO");
     546:	89 ec       	ldi	r24, 0xC9	; 201
     548:	93 e0       	ldi	r25, 0x03	; 3
     54a:	61 e5       	ldi	r22, 0x51	; 81
     54c:	71 e0       	ldi	r23, 0x01	; 1
     54e:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		stateVar = WORKING; //set next state to working
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	80 93 df 02 	sts	0x02DF, r24
		startTest();
     558:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9startTestv>
		//digitalWrite(GREEN_PIN, HIGH);
		return 0;
     55c:	65 c0       	rjmp	.+202    	; 0x628 <_Z14actionResponse6String+0x202>
	}
	
	if(inString.equalsIgnoreCase("ESTOP"))
     55e:	ce 01       	movw	r24, r28
     560:	0f 96       	adiw	r24, 0x0f	; 15
     562:	64 e5       	ldi	r22, 0x54	; 84
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     56a:	c7 01       	movw	r24, r14
     56c:	be 01       	movw	r22, r28
     56e:	61 5f       	subi	r22, 0xF1	; 241
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     576:	18 2f       	mov	r17, r24
     578:	ce 01       	movw	r24, r28
     57a:	0f 96       	adiw	r24, 0x0f	; 15
     57c:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     580:	11 23       	and	r17, r17
     582:	39 f0       	breq	.+14     	; 0x592 <_Z14actionResponse6String+0x16c>
	{
		Serial.println("ESTOP");
     584:	89 ec       	ldi	r24, 0xC9	; 201
     586:	93 e0       	ldi	r25, 0x03	; 3
     588:	64 e5       	ldi	r22, 0x54	; 84
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		return 0;
     590:	4b c0       	rjmp	.+150    	; 0x628 <_Z14actionResponse6String+0x202>
	}
	
	if(inString.equalsIgnoreCase("RESULT"))
     592:	ce 01       	movw	r24, r28
     594:	08 96       	adiw	r24, 0x08	; 8
     596:	6a e5       	ldi	r22, 0x5A	; 90
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     59e:	c7 01       	movw	r24, r14
     5a0:	be 01       	movw	r22, r28
     5a2:	68 5f       	subi	r22, 0xF8	; 248
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     5aa:	18 2f       	mov	r17, r24
     5ac:	ce 01       	movw	r24, r28
     5ae:	08 96       	adiw	r24, 0x08	; 8
     5b0:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     5b4:	11 23       	and	r17, r17
     5b6:	d1 f0       	breq	.+52     	; 0x5ec <_Z14actionResponse6String+0x1c6>
	{
		if(testResult == FAIL)
     5b8:	80 91 de 02 	lds	r24, 0x02DE
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	39 f4       	brne	.+14     	; 0x5ce <_Z14actionResponse6String+0x1a8>
		{
			Serial.println("FAIL");
     5c0:	89 ec       	ldi	r24, 0xC9	; 201
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	61 e3       	ldi	r22, 0x31	; 49
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
     5cc:	0f c0       	rjmp	.+30     	; 0x5ec <_Z14actionResponse6String+0x1c6>
		}
		else if(testResult == PASS)
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	39 f4       	brne	.+14     	; 0x5e0 <_Z14actionResponse6String+0x1ba>
		{
			Serial.println("PASS");
     5d2:	89 ec       	ldi	r24, 0xC9	; 201
     5d4:	93 e0       	ldi	r25, 0x03	; 3
     5d6:	6c e2       	ldi	r22, 0x2C	; 44
     5d8:	71 e0       	ldi	r23, 0x01	; 1
     5da:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
     5de:	06 c0       	rjmp	.+12     	; 0x5ec <_Z14actionResponse6String+0x1c6>
		}
		else
		{
			Serial.println("UNKNOWN");
     5e0:	89 ec       	ldi	r24, 0xC9	; 201
     5e2:	93 e0       	ldi	r25, 0x03	; 3
     5e4:	64 e2       	ldi	r22, 0x24	; 36
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
		}
	}
	
	if(inString.equalsIgnoreCase("STATE")) //status query
     5ec:	ce 01       	movw	r24, r28
     5ee:	01 96       	adiw	r24, 0x01	; 1
     5f0:	61 e6       	ldi	r22, 0x61	; 97
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
     5f8:	c7 01       	movw	r24, r14
     5fa:	be 01       	movw	r22, r28
     5fc:	6f 5f       	subi	r22, 0xFF	; 255
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	0e 94 9b 11 	call	0x2336	; 0x2336 <_ZNK6String16equalsIgnoreCaseERKS_>
     604:	18 2f       	mov	r17, r24
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
     60e:	11 23       	and	r17, r17
     610:	51 f0       	breq	.+20     	; 0x626 <_Z14actionResponse6String+0x200>
	{
		//Serial.println("State, Config, subState:");
		Serial.println(stateVar);
     612:	60 91 df 02 	lds	r22, 0x02DF
     616:	89 ec       	ldi	r24, 0xC9	; 201
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	4a e0       	ldi	r20, 0x0A	; 10
     61e:	50 e0       	ldi	r21, 0x00	; 0
     620:	0e 94 1d 11 	call	0x223a	; 0x223a <_ZN5Print7printlnEii>
		return 0;
     624:	01 c0       	rjmp	.+2      	; 0x628 <_Z14actionResponse6String+0x202>
     626:	02 c0       	rjmp	.+4      	; 0x62c <_Z14actionResponse6String+0x206>
	}
};
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	e1 96       	adiw	r28, 0x31	; 49
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	08 95       	ret

00000644 <loop>:
	digitalWrite(GREEN_PIN, HIGH);
	Serial.println("RDY");
}

void loop()
{
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	2e 97       	sbiw	r28, 0x0e	; 14
     652:	0f b6       	in	r0, 0x3f	; 63
     654:	f8 94       	cli
     656:	de bf       	out	0x3e, r29	; 62
     658:	0f be       	out	0x3f, r0	; 63
     65a:	cd bf       	out	0x3d, r28	; 61
	//serial check
	String inString;
     65c:	ce 01       	movw	r24, r28
     65e:	08 96       	adiw	r24, 0x08	; 8
     660:	67 e6       	ldi	r22, 0x67	; 103
     662:	71 e0       	ldi	r23, 0x01	; 1
     664:	0e 94 80 12 	call	0x2500	; 0x2500 <_ZN6StringC1EPKc>
	char inChar;
	while(Serial.available())
     668:	09 ec       	ldi	r16, 0xC9	; 201
     66a:	13 e0       	ldi	r17, 0x03	; 3
     66c:	0e c0       	rjmp	.+28     	; 0x68a <loop+0x46>
	{
		delay(2); //tiny delay is necessary to clock in serial...
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
		inChar = Serial.read(); //get one character from buffer
     67a:	c8 01       	movw	r24, r16
     67c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <_ZN14HardwareSerial4readEv>
     680:	68 2f       	mov	r22, r24
		inString.concat(inChar); //concat single character to holding string so we can pass it to actionResponse.
     682:	ce 01       	movw	r24, r28
     684:	08 96       	adiw	r24, 0x08	; 8
     686:	0e 94 3a 12 	call	0x2474	; 0x2474 <_ZN6String6concatEc>
void loop()
{
	//serial check
	String inString;
	char inChar;
	while(Serial.available())
     68a:	c8 01       	movw	r24, r16
     68c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <_ZN14HardwareSerial9availableEv>
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	69 f7       	brne	.-38     	; 0x66e <loop+0x2a>
	{
		delay(2); //tiny delay is necessary to clock in serial...
		inChar = Serial.read(); //get one character from buffer
		inString.concat(inChar); //concat single character to holding string so we can pass it to actionResponse.
	}
	actionResponse(inString); //acts and responds to serial
     694:	ce 01       	movw	r24, r28
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	be 01       	movw	r22, r28
     69a:	68 5f       	subi	r22, 0xF8	; 248
     69c:	7f 4f       	sbci	r23, 0xFF	; 255
     69e:	0e 94 b1 12 	call	0x2562	; 0x2562 <_ZN6StringC1ERKS_>
     6a2:	ce 01       	movw	r24, r28
     6a4:	01 96       	adiw	r24, 0x01	; 1
     6a6:	0e 94 13 02 	call	0x426	; 0x426 <_Z14actionResponse6String>
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>
	
	//button check
	if(!digitalRead(START_PIN))
     6b2:	89 e0       	ldi	r24, 0x09	; 9
     6b4:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <digitalRead>
     6b8:	00 97       	sbiw	r24, 0x00	; 0
     6ba:	79 f4       	brne	.+30     	; 0x6da <loop+0x96>
	{
		if(stateVar == IDLE)
     6bc:	80 91 df 02 	lds	r24, 0x02DF
     6c0:	88 23       	and	r24, r24
     6c2:	59 f4       	brne	.+22     	; 0x6da <loop+0x96>
		{
			Serial.println("GO");
     6c4:	89 ec       	ldi	r24, 0xC9	; 201
     6c6:	93 e0       	ldi	r25, 0x03	; 3
     6c8:	61 e5       	ldi	r22, 0x51	; 81
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
			stateVar = WORKING; //set next state to working
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 df 02 	sts	0x02DF, r24
			startTest();
     6d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z9startTestv>
}

void loop()
{
	//serial check
	String inString;
     6da:	ce 01       	movw	r24, r28
     6dc:	08 96       	adiw	r24, 0x08	; 8
     6de:	0e 94 bc 12 	call	0x2578	; 0x2578 <_ZN6StringD1Ev>

	}
	
	//while(digitalRead(START_PIN)); //wait for start button to be pressed
	//Serial.println("GO");
}
     6e2:	2e 96       	adiw	r28, 0x0e	; 14
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	de bf       	out	0x3e, r29	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	cd bf       	out	0x3d, r28	; 61
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	08 95       	ret

000006f8 <setup>:
int actionResponse(String inString);

CubeletsShield cubelets(true, 13);

void setup()
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	cf 93       	push	r28
     702:	df 93       	push	r29
	Serial.begin(9600);
     704:	c9 ec       	ldi	r28, 0xC9	; 201
     706:	d3 e0       	ldi	r29, 0x03	; 3
     708:	ce 01       	movw	r24, r28
     70a:	40 e8       	ldi	r20, 0x80	; 128
     70c:	55 e2       	ldi	r21, 0x25	; 37
     70e:	60 e0       	ldi	r22, 0x00	; 0
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN14HardwareSerial5beginEm>
	Serial.println(ID);
     716:	ce 01       	movw	r24, r28
     718:	6d e3       	ldi	r22, 0x3D	; 61
     71a:	71 e0       	ldi	r23, 0x01	; 1
     71c:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
	pinMode(PISTON_PIN, OUTPUT);
     720:	87 e0       	ldi	r24, 0x07	; 7
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(START_PIN, INPUT);
     728:	89 e0       	ldi	r24, 0x09	; 9
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(INTERRUPT_PIN, INPUT);
     730:	82 e0       	ldi	r24, 0x02	; 2
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(CAPTURE_PIN, INPUT);
     738:	88 e0       	ldi	r24, 0x08	; 8
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(SELECT_0, OUTPUT);
     740:	8c e0       	ldi	r24, 0x0C	; 12
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(SELECT_1, OUTPUT);
     748:	8b e0       	ldi	r24, 0x0B	; 11
     74a:	61 e0       	ldi	r22, 0x01	; 1
     74c:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(SELECT_2, OUTPUT);
     750:	8a e0       	ldi	r24, 0x0A	; 10
     752:	61 e0       	ldi	r22, 0x01	; 1
     754:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(RAISED_PIN, INPUT_PULLUP);
     758:	8e e0       	ldi	r24, 0x0E	; 14
     75a:	62 e0       	ldi	r22, 0x02	; 2
     75c:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(RED_PIN, OUTPUT);
     760:	84 e0       	ldi	r24, 0x04	; 4
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	pinMode(GREEN_PIN, OUTPUT);
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	61 e0       	ldi	r22, 0x01	; 1
     76c:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
	//open.attach(OPEN_PIN);
	//select face 1 for power whatever
	cubelets.initialize();
     770:	88 ed       	ldi	r24, 0xD8	; 216
     772:	92 e0       	ldi	r25, 0x02	; 2
     774:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN14CubeletsShield10initializeEv>
	digitalWrite(SELECT_0, LOW);
     778:	8c e0       	ldi	r24, 0x0C	; 12
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	digitalWrite(SELECT_1, HIGH);
     780:	8b e0       	ldi	r24, 0x0B	; 11
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	digitalWrite(SELECT_2, HIGH);
     788:	8a e0       	ldi	r24, 0x0A	; 10
     78a:	61 e0       	ldi	r22, 0x01	; 1
     78c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	digitalWrite(PISTON_PIN, HIGH); //raise piston when idle
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	61 e0       	ldi	r22, 0x01	; 1
     794:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	int startTime = millis();
     798:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     79c:	6b 01       	movw	r12, r22
     79e:	7c 01       	movw	r14, r24
	while(digitalRead(RAISED_PIN))
	{
		if((millis() - startTime) >= 2000)
     7a0:	ee 24       	eor	r14, r14
     7a2:	d7 fc       	sbrc	r13, 7
     7a4:	e0 94       	com	r14
     7a6:	fe 2c       	mov	r15, r14
	digitalWrite(SELECT_0, LOW);
	digitalWrite(SELECT_1, HIGH);
	digitalWrite(SELECT_2, HIGH);
	digitalWrite(PISTON_PIN, HIGH); //raise piston when idle
	int startTime = millis();
	while(digitalRead(RAISED_PIN))
     7a8:	18 c0       	rjmp	.+48     	; 0x7da <setup+0xe2>
	{
		if((millis() - startTime) >= 2000)
     7aa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     7ae:	dc 01       	movw	r26, r24
     7b0:	cb 01       	movw	r24, r22
     7b2:	8c 19       	sub	r24, r12
     7b4:	9d 09       	sbc	r25, r13
     7b6:	ae 09       	sbc	r26, r14
     7b8:	bf 09       	sbc	r27, r15
     7ba:	80 3d       	cpi	r24, 0xD0	; 208
     7bc:	27 e0       	ldi	r18, 0x07	; 7
     7be:	92 07       	cpc	r25, r18
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	a2 07       	cpc	r26, r18
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	b2 07       	cpc	r27, r18
     7c8:	40 f0       	brcs	.+16     	; 0x7da <setup+0xe2>
		{
			errorVar = RAISE_FAIL;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	80 93 dd 02 	sts	0x02DD, r24
			stateVar = ERROR;
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	80 93 df 02 	sts	0x02DF, r24
			handleError();
     7d6:	0e 94 8d 00 	call	0x11a	; 0x11a <_Z11handleErrorv>
	digitalWrite(SELECT_0, LOW);
	digitalWrite(SELECT_1, HIGH);
	digitalWrite(SELECT_2, HIGH);
	digitalWrite(PISTON_PIN, HIGH); //raise piston when idle
	int startTime = millis();
	while(digitalRead(RAISED_PIN))
     7da:	8e e0       	ldi	r24, 0x0E	; 14
     7dc:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <digitalRead>
     7e0:	00 97       	sbiw	r24, 0x00	; 0
     7e2:	19 f7       	brne	.-58     	; 0x7aa <setup+0xb2>
			stateVar = ERROR;
			handleError();
			break;
		}
}
	open.attach(OPEN_PIN);
     7e4:	c0 ee       	ldi	r28, 0xE0	; 224
     7e6:	d2 e0       	ldi	r29, 0x02	; 2
     7e8:	ce 01       	movw	r24, r28
     7ea:	65 e0       	ldi	r22, 0x05	; 5
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN5Servo6attachEi>
	open.write(OPEN_POS); //open faces
     7f2:	ce 01       	movw	r24, r28
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <_ZN5Servo5writeEi>
	delay(1000);
     7fc:	68 ee       	ldi	r22, 0xE8	; 232
     7fe:	73 e0       	ldi	r23, 0x03	; 3
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
	open.detach();
     808:	ce 01       	movw	r24, r28
     80a:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN5Servo6detachEv>
	digitalWrite(GREEN_PIN, HIGH);
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
	Serial.println("RDY");
     816:	89 ec       	ldi	r24, 0xC9	; 201
     818:	93 e0       	ldi	r25, 0x03	; 3
     81a:	68 e6       	ldi	r22, 0x68	; 104
     81c:	71 e0       	ldi	r23, 0x01	; 1
     81e:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <_GLOBAL__sub_I_open>:
#define CAPTURE_PIN 8 //input capture pin
#define INTERRUPT_PIN 2 //interrupt pin

#define FAIL_THRESHOLD 100 //total number of individual connection failures allowed

Servo open;
     830:	80 ee       	ldi	r24, 0xE0	; 224
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 83 0a 	call	0x1506	; 0x1506 <_ZN5ServoC1Ev>
enum Error {NONE, RAISE_FAIL, LOWER_FAIL,};
Error errorVar = NONE;

int actionResponse(String inString);

CubeletsShield cubelets(true, 13);
     838:	88 ed       	ldi	r24, 0xD8	; 216
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	4d e0       	ldi	r20, 0x0D	; 13
     840:	0e 94 8d 05 	call	0xb1a	; 0xb1a <_ZN14CubeletsShieldC1Ehh>
		delay(500);
		digitalWrite(RED_PIN, LOW);
		delay(500);
	}
	
     844:	08 95       	ret

00000846 <_ZN14CubeletsShield13initializeI2CEv>:

// #######################################################################
// I2C-RELATED FUNCTIONS
// ####################################################################### 

void CubeletsShield::initializeI2C(){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
  I2c.begin();
     84a:	cb ee       	ldi	r28, 0xEB	; 235
     84c:	d2 e0       	ldi	r29, 0x02	; 2
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN3I2C5beginEv>
  I2c.pullup(0);     // Disable the internal pullups
     854:	ce 01       	movw	r24, r28
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	0e 94 b5 06 	call	0xd6a	; 0xd6a <_ZN3I2C6pullupEh>
  I2c.setSpeed(1);   // 1=400kHz 0=
     85c:	ce 01       	movw	r24, r28
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	0e 94 ab 06 	call	0xd56	; 0xd56 <_ZN3I2C8setSpeedEh>
  I2c.timeOut(1000);  //100ms for a request to succeed
     864:	ce 01       	movw	r24, r28
     866:	68 ee       	ldi	r22, 0xE8	; 232
     868:	73 e0       	ldi	r23, 0x03	; 3
     86a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <_ZN3I2C7timeOutEj>
}
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <_ZN14CubeletsShield12trafficLEDOnEv>:
     else return 0;  // Return an error when we're out of retries
   }
}

void CubeletsShield::trafficLEDOn(){
  digitalWrite(ledPin, HIGH); 
     874:	fc 01       	movw	r30, r24
     876:	83 81       	ldd	r24, Z+3	; 0x03
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
}
     87e:	08 95       	ret

00000880 <_ZN14CubeletsShield13trafficLEDOffEv>:

void CubeletsShield::trafficLEDOff(){
  digitalWrite(ledPin, LOW); 
     880:	fc 01       	movw	r30, r24
     882:	83 81       	ldd	r24, Z+3	; 0x03
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
}
     88a:	08 95       	ret

0000088c <_ZN14CubeletsShield10getDataI2CEhhhh>:
     else return 1;  // Return an error when we're out of retries
   }
}

// Returns 0 after `retries` attempts, else returns # of bytes available
unsigned char CubeletsShield::getDataI2C(unsigned char addr, unsigned char command, unsigned char bytesToRead, unsigned char retries ){
     88c:	cf 92       	push	r12
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	ec 01       	movw	r28, r24
     89e:	16 2f       	mov	r17, r22
     8a0:	d4 2e       	mov	r13, r20
     8a2:	c2 2e       	mov	r12, r18
  trafficLEDOn();
     8a4:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
     8a8:	0f 2e       	mov	r0, r31
     8aa:	fb ee       	ldi	r31, 0xEB	; 235
     8ac:	ef 2e       	mov	r14, r31
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	ff 2e       	mov	r15, r31
     8b2:	f0 2d       	mov	r31, r0
     8b4:	c7 01       	movw	r24, r14
     8b6:	61 2f       	mov	r22, r17
     8b8:	4d 2d       	mov	r20, r13
     8ba:	2c 2d       	mov	r18, r12
     8bc:	0e 94 80 08 	call	0x1100	; 0x1100 <_ZN3I2C4readEhhh>
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	90 93 ea 02 	sts	0x02EA, r25
     8c6:	80 93 e9 02 	sts	0x02E9, r24
  trafficLEDOff();
     8ca:	ce 01       	movw	r24, r28
     8cc:	0e 94 40 04 	call	0x880	; 0x880 <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2c.available() == 1){
     8d0:	c7 01       	movw	r24, r14
     8d2:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN3I2C9availableEv>
     8d6:	81 30       	cpi	r24, 0x01	; 1
     8d8:	09 f4       	brne	.+2      	; 0x8dc <_ZN14CubeletsShield10getDataI2CEhhhh+0x50>
     8da:	3f c0       	rjmp	.+126    	; 0x95a <__stack+0x5b>
    return 1;
  }
  else{
    if(debugOverUsart){
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	88 23       	and	r24, r24
     8e0:	91 f1       	breq	.+100    	; 0x946 <__stack+0x47>
     Serial.print("Failed to get data from I2C Slave addr: 0x");
     8e2:	0f 2e       	mov	r0, r31
     8e4:	f9 ec       	ldi	r31, 0xC9	; 201
     8e6:	ef 2e       	mov	r14, r31
     8e8:	f3 e0       	ldi	r31, 0x03	; 3
     8ea:	ff 2e       	mov	r15, r31
     8ec:	f0 2d       	mov	r31, r0
     8ee:	c7 01       	movw	r24, r14
     8f0:	6c e6       	ldi	r22, 0x6C	; 108
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     8f8:	c7 01       	movw	r24, r14
     8fa:	61 2f       	mov	r22, r17
     8fc:	40 e1       	ldi	r20, 0x10	; 16
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     904:	c7 01       	movw	r24, r14
     906:	67 e9       	ldi	r22, 0x97	; 151
     908:	71 e0       	ldi	r23, 0x01	; 1
     90a:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     90e:	c7 01       	movw	r24, r14
     910:	6d 2d       	mov	r22, r13
     912:	40 e1       	ldi	r20, 0x10	; 16
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" bytes requested: ");
     91a:	c7 01       	movw	r24, r14
     91c:	64 ea       	ldi	r22, 0xA4	; 164
     91e:	71 e0       	ldi	r23, 0x01	; 1
     920:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(bytesToRead, DEC);
     924:	c7 01       	movw	r24, r14
     926:	6c 2d       	mov	r22, r12
     928:	4a e0       	ldi	r20, 0x0A	; 10
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     930:	c7 01       	movw	r24, r14
     932:	67 eb       	ldi	r22, 0xB7	; 183
     934:	71 e0       	ldi	r23, 0x01	; 1
     936:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     93a:	c7 01       	movw	r24, r14
     93c:	60 2f       	mov	r22, r16
     93e:	4a e0       	ldi	r20, 0x0A	; 10
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     946:	00 23       	and	r16, r16
     948:	51 f0       	breq	.+20     	; 0x95e <__stack+0x5f>
       retries--;
     94a:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     94c:	ce 01       	movw	r24, r28
     94e:	61 2f       	mov	r22, r17
     950:	4d 2d       	mov	r20, r13
     952:	2c 2d       	mov	r18, r12
     954:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN14CubeletsShield10getDataI2CEhhhh>
     958:	03 c0       	rjmp	.+6      	; 0x960 <__stack+0x61>
  trafficLEDOn();
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
  trafficLEDOff();
  
  if(I2c.available() == 1){
    return 1;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	01 c0       	rjmp	.+2      	; 0x960 <__stack+0x61>
     if(retries >= 0 && retries >0){
       retries--;
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     }
     else return 0;  // Return an error when we're out of retries
     95e:	80 e0       	ldi	r24, 0x00	; 0
   }
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	08 95       	ret

00000972 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>:
     }
     else return 1;  // Return an error when we're out of retries
   }
}

unsigned char CubeletsShield::sendCommandWithDataI2C(unsigned char addr, unsigned char command, unsigned char data, unsigned char retries ){
     972:	cf 92       	push	r12
     974:	df 92       	push	r13
     976:	ef 92       	push	r14
     978:	ff 92       	push	r15
     97a:	0f 93       	push	r16
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
     982:	ec 01       	movw	r28, r24
     984:	16 2f       	mov	r17, r22
     986:	f4 2e       	mov	r15, r20
     988:	e2 2e       	mov	r14, r18
  trafficLEDOn();
     98a:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command, data); 
     98e:	8b ee       	ldi	r24, 0xEB	; 235
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	61 2f       	mov	r22, r17
     994:	4f 2d       	mov	r20, r15
     996:	2e 2d       	mov	r18, r14
     998:	0e 94 15 09 	call	0x122a	; 0x122a <_ZN3I2C5writeEhhh>
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	90 93 ea 02 	sts	0x02EA, r25
     9a2:	80 93 e9 02 	sts	0x02E9, r24
  trafficLEDOff();
     9a6:	ce 01       	movw	r24, r28
     9a8:	0e 94 40 04 	call	0x880	; 0x880 <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2CReturnCode == 0){
     9ac:	80 91 e9 02 	lds	r24, 0x02E9
     9b0:	90 91 ea 02 	lds	r25, 0x02EA
     9b4:	00 97       	sbiw	r24, 0x00	; 0
     9b6:	29 f4       	brne	.+10     	; 0x9c2 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0x50>
    return I2CReturnCode;
     9b8:	80 91 e9 02 	lds	r24, 0x02E9
     9bc:	90 91 ea 02 	lds	r25, 0x02EA
     9c0:	40 c0       	rjmp	.+128    	; 0xa42 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
  }
  else{
    if(debugOverUsart){
     9c2:	8c 81       	ldd	r24, Y+4	; 0x04
     9c4:	88 23       	and	r24, r24
     9c6:	91 f1       	breq	.+100    	; 0xa2c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xba>
     Serial.print("Failed to send I2C Command addr: 0x");
     9c8:	0f 2e       	mov	r0, r31
     9ca:	f9 ec       	ldi	r31, 0xC9	; 201
     9cc:	cf 2e       	mov	r12, r31
     9ce:	f3 e0       	ldi	r31, 0x03	; 3
     9d0:	df 2e       	mov	r13, r31
     9d2:	f0 2d       	mov	r31, r0
     9d4:	c6 01       	movw	r24, r12
     9d6:	6c ec       	ldi	r22, 0xCC	; 204
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     9de:	c6 01       	movw	r24, r12
     9e0:	61 2f       	mov	r22, r17
     9e2:	40 e1       	ldi	r20, 0x10	; 16
     9e4:	50 e0       	ldi	r21, 0x00	; 0
     9e6:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     9ea:	c6 01       	movw	r24, r12
     9ec:	67 e9       	ldi	r22, 0x97	; 151
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     9f4:	c6 01       	movw	r24, r12
     9f6:	6f 2d       	mov	r22, r15
     9f8:	40 e1       	ldi	r20, 0x10	; 16
     9fa:	50 e0       	ldi	r21, 0x00	; 0
     9fc:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" data: 0x");
     a00:	c6 01       	movw	r24, r12
     a02:	60 ef       	ldi	r22, 0xF0	; 240
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(data, HEX);
     a0a:	c6 01       	movw	r24, r12
     a0c:	6e 2d       	mov	r22, r14
     a0e:	40 e1       	ldi	r20, 0x10	; 16
     a10:	50 e0       	ldi	r21, 0x00	; 0
     a12:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     a16:	c6 01       	movw	r24, r12
     a18:	67 eb       	ldi	r22, 0xB7	; 183
     a1a:	71 e0       	ldi	r23, 0x01	; 1
     a1c:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     a20:	c6 01       	movw	r24, r12
     a22:	60 2f       	mov	r22, r16
     a24:	4a e0       	ldi	r20, 0x0A	; 10
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     a2c:	00 23       	and	r16, r16
     a2e:	41 f0       	breq	.+16     	; 0xa40 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xce>
       retries--;
     a30:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return sendCommandWithDataI2C(addr, command, data, retries);
     a32:	ce 01       	movw	r24, r28
     a34:	61 2f       	mov	r22, r17
     a36:	4f 2d       	mov	r20, r15
     a38:	2e 2d       	mov	r18, r14
     a3a:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
     a3e:	01 c0       	rjmp	.+2      	; 0xa42 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
     }
     else return 1;  // Return an error when we're out of retries
     a40:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	08 95       	ret

00000a54 <_ZN14CubeletsShield14sendCommandI2CEhhh>:
  I2c.pullup(0);     // Disable the internal pullups
  I2c.setSpeed(1);   // 1=400kHz 0=
  I2c.timeOut(1000);  //100ms for a request to succeed
}

unsigned char CubeletsShield::sendCommandI2C(unsigned char addr, unsigned char command, unsigned char retries){
     a54:	cf 92       	push	r12
     a56:	df 92       	push	r13
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ec 01       	movw	r28, r24
     a64:	16 2f       	mov	r17, r22
     a66:	04 2f       	mov	r16, r20
     a68:	f2 2e       	mov	r15, r18
  trafficLEDOn();
     a6a:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command); 
     a6e:	8b ee       	ldi	r24, 0xEB	; 235
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	61 2f       	mov	r22, r17
     a74:	40 2f       	mov	r20, r16
     a76:	0e 94 55 09 	call	0x12aa	; 0x12aa <_ZN3I2C5writeEhh>
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	90 93 ea 02 	sts	0x02EA, r25
     a80:	80 93 e9 02 	sts	0x02E9, r24
  trafficLEDOff();
     a84:	ce 01       	movw	r24, r28
     a86:	0e 94 40 04 	call	0x880	; 0x880 <_ZN14CubeletsShield13trafficLEDOffEv>
  if(I2CReturnCode == 0){
     a8a:	80 91 e9 02 	lds	r24, 0x02E9
     a8e:	90 91 ea 02 	lds	r25, 0x02EA
     a92:	00 97       	sbiw	r24, 0x00	; 0
     a94:	29 f4       	brne	.+10     	; 0xaa0 <_ZN14CubeletsShield14sendCommandI2CEhhh+0x4c>
    return I2CReturnCode;
     a96:	80 91 e9 02 	lds	r24, 0x02E9
     a9a:	90 91 ea 02 	lds	r25, 0x02EA
     a9e:	35 c0       	rjmp	.+106    	; 0xb0a <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
  }
  else{
    if(debugOverUsart){
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	88 23       	and	r24, r24
     aa4:	39 f1       	breq	.+78     	; 0xaf4 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xa0>
     Serial.print("Failed to send I2C Command addr: 0x");
     aa6:	0f 2e       	mov	r0, r31
     aa8:	f9 ec       	ldi	r31, 0xC9	; 201
     aaa:	cf 2e       	mov	r12, r31
     aac:	f3 e0       	ldi	r31, 0x03	; 3
     aae:	df 2e       	mov	r13, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	c6 01       	movw	r24, r12
     ab4:	6c ec       	ldi	r22, 0xCC	; 204
     ab6:	71 e0       	ldi	r23, 0x01	; 1
     ab8:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     abc:	c6 01       	movw	r24, r12
     abe:	61 2f       	mov	r22, r17
     ac0:	40 e1       	ldi	r20, 0x10	; 16
     ac2:	50 e0       	ldi	r21, 0x00	; 0
     ac4:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     ac8:	c6 01       	movw	r24, r12
     aca:	67 e9       	ldi	r22, 0x97	; 151
     acc:	71 e0       	ldi	r23, 0x01	; 1
     ace:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     ad2:	c6 01       	movw	r24, r12
     ad4:	60 2f       	mov	r22, r16
     ad6:	40 e1       	ldi	r20, 0x10	; 16
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	0e 94 ad 10 	call	0x215a	; 0x215a <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     ade:	c6 01       	movw	r24, r12
     ae0:	67 eb       	ldi	r22, 0xB7	; 183
     ae2:	71 e0       	ldi	r23, 0x01	; 1
     ae4:	0e 94 3c 11 	call	0x2278	; 0x2278 <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     ae8:	c6 01       	movw	r24, r12
     aea:	6f 2d       	mov	r22, r15
     aec:	4a e0       	ldi	r20, 0x0A	; 10
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	0e 94 bf 10 	call	0x217e	; 0x217e <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     af4:	ff 20       	and	r15, r15
     af6:	41 f0       	breq	.+16     	; 0xb08 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb4>
       retries--;
     af8:	2f 2d       	mov	r18, r15
     afa:	21 50       	subi	r18, 0x01	; 1
       return sendCommandI2C(addr, command, retries);
     afc:	ce 01       	movw	r24, r28
     afe:	61 2f       	mov	r22, r17
     b00:	40 2f       	mov	r20, r16
     b02:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14CubeletsShield14sendCommandI2CEhhh>
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
     }
     else return 1;  // Return an error when we're out of retries
     b08:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	df 90       	pop	r13
     b16:	cf 90       	pop	r12
     b18:	08 95       	ret

00000b1a <_ZN14CubeletsShieldC1Ehh>:
volatile int I2CReturnCode;             // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
unsigned char cubeletI2CAddresses[6]; 
unsigned char ledPin;
boolean debugOverUsart = 0;

CubeletsShield::CubeletsShield(boolean enableDebugOverUsart, unsigned char ledPinForI2C) {
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
     b22:	16 2f       	mov	r17, r22
  	// ############################################
	// #### Working Variable Initialization #######
	// ############################################

	rec_byte_i2c = 0x00;   // Worker variable to hold I2C Received Byte
     b24:	18 82       	st	Y, r1
	I2CReturnCode = -1;              // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
     b26:	2f ef       	ldi	r18, 0xFF	; 255
     b28:	3f ef       	ldi	r19, 0xFF	; 255
     b2a:	30 93 ea 02 	sts	0x02EA, r19
     b2e:	20 93 e9 02 	sts	0x02E9, r18

        // Initialize Addresses Array
        cubeletI2CAddresses[0] = ADDRESS_CUBE1;
     b32:	82 e2       	ldi	r24, 0x22	; 34
     b34:	80 93 e3 02 	sts	0x02E3, r24
        cubeletI2CAddresses[1] = ADDRESS_CUBE2;
     b38:	83 e2       	ldi	r24, 0x23	; 35
     b3a:	80 93 e4 02 	sts	0x02E4, r24
        cubeletI2CAddresses[2] = ADDRESS_CUBE3;
     b3e:	84 e2       	ldi	r24, 0x24	; 36
     b40:	80 93 e5 02 	sts	0x02E5, r24
        cubeletI2CAddresses[3] = ADDRESS_CUBE4;
     b44:	85 e2       	ldi	r24, 0x25	; 37
     b46:	80 93 e6 02 	sts	0x02E6, r24
        cubeletI2CAddresses[4] = ADDRESS_CUBE5;
     b4a:	86 e2       	ldi	r24, 0x26	; 38
     b4c:	80 93 e7 02 	sts	0x02E7, r24
        cubeletI2CAddresses[5] = ADDRESS_CUBE6;
     b50:	87 e2       	ldi	r24, 0x27	; 39
     b52:	80 93 e8 02 	sts	0x02E8, r24
        
        // I2C Activity indicator light
        if(ledPinForI2C > 0){
     b56:	44 23       	and	r20, r20
     b58:	41 f0       	breq	.+16     	; 0xb6a <_ZN14CubeletsShieldC1Ehh+0x50>
          ledPin = ledPinForI2C;
     b5a:	4b 83       	std	Y+3, r20	; 0x03
    	  pinMode(ledPin, OUTPUT);
     b5c:	84 2f       	mov	r24, r20
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
    	  trafficLEDOff();
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 40 04 	call	0x880	; 0x880 <_ZN14CubeletsShield13trafficLEDOffEv>
        }

        // Debug over USART enabled?
        if(enableDebugOverUsart){
     b6a:	11 23       	and	r17, r17
     b6c:	51 f0       	breq	.+20     	; 0xb82 <_ZN14CubeletsShieldC1Ehh+0x68>
    
          Serial.begin(9600);
     b6e:	89 ec       	ldi	r24, 0xC9	; 201
     b70:	93 e0       	ldi	r25, 0x03	; 3
     b72:	40 e8       	ldi	r20, 0x80	; 128
     b74:	55 e2       	ldi	r21, 0x25	; 37
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <_ZN14HardwareSerial5beginEm>
          debugOverUsart = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	8c 83       	std	Y+4, r24	; 0x04
        }
        trafficLEDOn();
     b82:	ce 01       	movw	r24, r28
     b84:	0e 94 3a 04 	call	0x874	; 0x874 <_ZN14CubeletsShield12trafficLEDOnEv>
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	1f 91       	pop	r17
     b8e:	08 95       	ret

00000b90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>:
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
}

// Returns I2C Address corresponding to the faceNumber on the Arduino Shields
unsigned char CubeletsShield::getI2CAddressByFace(unsigned char faceNumber){
  return cubeletI2CAddresses[faceNumber-1];
     b90:	e6 2f       	mov	r30, r22
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	ee 51       	subi	r30, 0x1E	; 30
     b96:	fd 4f       	sbci	r31, 0xFD	; 253
}
     b98:	80 81       	ld	r24, Z
     b9a:	08 95       	ret

00000b9c <_ZN14CubeletsShield24startCommunicationByFaceEh>:
unsigned char CubeletsShield::stopCommunicationByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STOPCOMM), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::startCommunicationByFace(unsigned char faceNumber){
     b9c:	cf 93       	push	r28
     b9e:	df 93       	push	r29
     ba0:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
     ba2:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     ba6:	68 2f       	mov	r22, r24
     ba8:	ce 01       	movw	r24, r28
     baa:	45 e2       	ldi	r20, 0x25	; 37
     bac:	25 e0       	ldi	r18, 0x05	; 5
     bae:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <_ZN14CubeletsShield23stopCommunicationByFaceEh>:
unsigned char CubeletsShield::greenOffByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDOFF), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::stopCommunicationByFace(unsigned char faceNumber){
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STOPCOMM), char(I2CRETRYCOUNT));
     bbe:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     bc2:	68 2f       	mov	r22, r24
     bc4:	ce 01       	movw	r24, r28
     bc6:	44 e2       	ldi	r20, 0x24	; 36
     bc8:	25 e0       	ldi	r18, 0x05	; 5
     bca:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <_ZN14CubeletsShield27stopAllCubeletCommunicationEv>:
     setBroadcastBlockValueByFace(i, 0x00);
     startCommunicationByFace(i);
  }
}

void CubeletsShield::stopAllCubeletCommunication(){
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
  for( unsigned char i = 1;i<=6;i++){
     bdc:	11 e0       	ldi	r17, 0x01	; 1
     stopCommunicationByFace(i);
     bde:	ce 01       	movw	r24, r28
     be0:	61 2f       	mov	r22, r17
     be2:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <_ZN14CubeletsShield23stopCommunicationByFaceEh>
     startCommunicationByFace(i);
  }
}

void CubeletsShield::stopAllCubeletCommunication(){
  for( unsigned char i = 1;i<=6;i++){
     be6:	1f 5f       	subi	r17, 0xFF	; 255
     be8:	17 30       	cpi	r17, 0x07	; 7
     bea:	c9 f7       	brne	.-14     	; 0xbde <_ZN14CubeletsShield27stopAllCubeletCommunicationEv+0xa>
     stopCommunicationByFace(i);
  }
}
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	1f 91       	pop	r17
     bf2:	08 95       	ret

00000bf4 <_ZN14CubeletsShield14greenOffByFaceEh>:
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOffByFace(unsigned char faceNumber){
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDOFF), char(I2CRETRYCOUNT));
     bfa:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     bfe:	68 2f       	mov	r22, r24
     c00:	ce 01       	movw	r24, r28
     c02:	41 e2       	ldi	r20, 0x21	; 33
     c04:	25 e0       	ldi	r18, 0x05	; 5
     c06:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	08 95       	ret

00000c10 <_ZN14CubeletsShield19greenOffAllCubeletsEv>:
  for( unsigned char i = 1;i<=6;i++){
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24
  for( unsigned char i = 1;i<=6;i++){
     c18:	11 e0       	ldi	r17, 0x01	; 1
     greenOffByFace(i);
     c1a:	ce 01       	movw	r24, r28
     c1c:	61 2f       	mov	r22, r17
     c1e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN14CubeletsShield14greenOffByFaceEh>
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
  for( unsigned char i = 1;i<=6;i++){
     c22:	1f 5f       	subi	r17, 0xFF	; 255
     c24:	17 30       	cpi	r17, 0x07	; 7
     c26:	c9 f7       	brne	.-14     	; 0xc1a <_ZN14CubeletsShield19greenOffAllCubeletsEv+0xa>
     greenOffByFace(i);
  }
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	08 95       	ret

00000c30 <_ZN14CubeletsShield13greenOnByFaceEh>:
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
     c30:	cf 93       	push	r28
     c32:	df 93       	push	r29
     c34:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
     c36:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     c3a:	68 2f       	mov	r22, r24
     c3c:	ce 01       	movw	r24, r28
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	25 e0       	ldi	r18, 0x05	; 5
     c42:	0e 94 2a 05 	call	0xa54	; 0xa54 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	08 95       	ret

00000c4c <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>:
    return false;
  }
}

// Returns 0 on success, error code on failure
unsigned char CubeletsShield::setBroadcastBlockValueByFace(unsigned char faceNumber, unsigned char blockValue){
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	14 2f       	mov	r17, r20
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
     c58:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     c5c:	68 2f       	mov	r22, r24
     c5e:	ce 01       	movw	r24, r28
     c60:	42 e2       	ldi	r20, 0x22	; 34
     c62:	21 2f       	mov	r18, r17
     c64:	05 e0       	ldi	r16, 0x05	; 5
     c66:	0e 94 b9 04 	call	0x972	; 0x972 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	08 95       	ret

00000c74 <_ZN14CubeletsShield24initializeCubeletsShieldEv>:

// #######################################################################
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	ec 01       	movw	r28, r24
  
  for( unsigned char i = 1;i<=6;i++){
     c7c:	11 e0       	ldi	r17, 0x01	; 1
     greenOnByFace(i);
     c7e:	ce 01       	movw	r24, r28
     c80:	61 2f       	mov	r22, r17
     c82:	0e 94 18 06 	call	0xc30	; 0xc30 <_ZN14CubeletsShield13greenOnByFaceEh>
     setBroadcastBlockValueByFace(i, 0x00);
     c86:	ce 01       	movw	r24, r28
     c88:	61 2f       	mov	r22, r17
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	0e 94 26 06 	call	0xc4c	; 0xc4c <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     startCommunicationByFace(i);
     c90:	ce 01       	movw	r24, r28
     c92:	61 2f       	mov	r22, r17
     c94:	0e 94 ce 05 	call	0xb9c	; 0xb9c <_ZN14CubeletsShield24startCommunicationByFaceEh>
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
  
  for( unsigned char i = 1;i<=6;i++){
     c98:	1f 5f       	subi	r17, 0xFF	; 255
     c9a:	17 30       	cpi	r17, 0x07	; 7
     c9c:	81 f7       	brne	.-32     	; 0xc7e <_ZN14CubeletsShield24initializeCubeletsShieldEv+0xa>
     greenOnByFace(i);
     setBroadcastBlockValueByFace(i, 0x00);
     startCommunicationByFace(i);
  }
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	08 95       	ret

00000ca6 <_ZN14CubeletsShield10initializeEv>:
          debugOverUsart = 1;
        }
        trafficLEDOn();
}

void CubeletsShield::initialize(){
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	ec 01       	movw	r28, r24
    // ############################################
    // #### Peripheral Configuration, Etc  ########
    // ############################################
	
    // Setup I2C for our needs
    initializeI2C();
     cac:	0e 94 23 04 	call	0x846	; 0x846 <_ZN14CubeletsShield13initializeI2CEv>

    // Wait plenty of time for the Cubelets MCUs to start, configure their SSPs
    delay(10);
     cb0:	6a e0       	ldi	r22, 0x0A	; 10
     cb2:	70 e0       	ldi	r23, 0x00	; 0
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <delay>
    
    // Clean Block Values, enable communication, light Debug LEDs
    initializeCubeletsShield();
     cbc:	ce 01       	movw	r24, r28
     cbe:	0e 94 3a 06 	call	0xc74	; 0xc74 <_ZN14CubeletsShield24initializeCubeletsShieldEv>

    if(debugOverUsart){
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	88 23       	and	r24, r24
     cc6:	31 f0       	breq	.+12     	; 0xcd4 <_ZN14CubeletsShield10initializeEv+0x2e>
	  Serial.println("Cubelet-Arduino Interface Loaded.  Ready.");
     cc8:	89 ec       	ldi	r24, 0xC9	; 201
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	6a ef       	ldi	r22, 0xFA	; 250
     cce:	71 e0       	ldi	r23, 0x01	; 1
     cd0:	0e 94 3f 11 	call	0x227e	; 0x227e <_ZN5Print7printlnEPKc>
    } 
}
     cd4:	df 91       	pop	r29
     cd6:	cf 91       	pop	r28
     cd8:	08 95       	ret

00000cda <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>:
    // Didn't get anything!
    return false;
  }
}

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	cf 93       	push	r28
     ce2:	df 93       	push	r29
     ce4:	7c 01       	movw	r14, r24
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
     ce6:	0e 94 c8 05 	call	0xb90	; 0xb90 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     cea:	68 2f       	mov	r22, r24
     cec:	c7 01       	movw	r24, r14
     cee:	43 e2       	ldi	r20, 0x23	; 35
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	05 e0       	ldi	r16, 0x05	; 5
     cf4:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN14CubeletsShield10getDataI2CEhhhh>
     cf8:	81 30       	cpi	r24, 0x01	; 1
     cfa:	41 f0       	breq	.+16     	; 0xd0c <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x32>
    }
    return rec_byte_i2c;
  }
  else{
    // Didn't get anything!
    return false;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x44>
unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
     d00:	ce 01       	movw	r24, r28
     d02:	0e 94 c0 06 	call	0xd80	; 0xd80 <_ZN3I2C7receiveEv>
     d06:	f7 01       	movw	r30, r14
     d08:	80 83       	st	Z, r24
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x36>

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
     d0c:	cb ee       	ldi	r28, 0xEB	; 235
     d0e:	d2 e0       	ldi	r29, 0x02	; 2
     d10:	ce 01       	movw	r24, r28
     d12:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN3I2C9availableEv>
     d16:	88 23       	and	r24, r24
     d18:	99 f7       	brne	.-26     	; 0xd00 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x26>
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
    }
    return rec_byte_i2c;
     d1a:	f7 01       	movw	r30, r14
     d1c:	80 81       	ld	r24, Z
  }
  else{
    // Didn't get anything!
    return false;
  }
}
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	08 95       	ret

00000d2a <_ZN3I2C5beginEv>:
void I2C::begin()
{
  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
     d2a:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
     d2c:	45 9a       	sbi	0x08, 5	; 8
    // as per note from atmega128 manual pg204
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif
  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     d2e:	e9 eb       	ldi	r30, 0xB9	; 185
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8e 7f       	andi	r24, 0xFE	; 254
     d36:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     d38:	80 81       	ld	r24, Z
     d3a:	8d 7f       	andi	r24, 0xFD	; 253
     d3c:	80 83       	st	Z, r24
  TWBR = ((F_CPU / 100000) - 16) / 2;
     d3e:	88 e4       	ldi	r24, 0x48	; 72
     d40:	80 93 b8 00 	sts	0x00B8, r24
  // enable twi module and acks
  TWCR = _BV(TWEN) | _BV(TWEA); 
     d44:	84 e4       	ldi	r24, 0x44	; 68
     d46:	80 93 bc 00 	sts	0x00BC, r24
}
     d4a:	08 95       	ret

00000d4c <_ZN3I2C7timeOutEj>:
  TWCR = 0;
}

void I2C::timeOut(uint16_t _timeOut)
{
  timeOutDelay = _timeOut;
     d4c:	70 93 0e 03 	sts	0x030E, r23
     d50:	60 93 0d 03 	sts	0x030D, r22
}
     d54:	08 95       	ret

00000d56 <_ZN3I2C8setSpeedEh>:

void I2C::setSpeed(uint8_t _fast)
{
  if(!_fast)
     d56:	66 23       	and	r22, r22
     d58:	21 f4       	brne	.+8      	; 0xd62 <_ZN3I2C8setSpeedEh+0xc>
  {
    TWBR = ((F_CPU / 100000) - 16) / 2;
     d5a:	88 e4       	ldi	r24, 0x48	; 72
     d5c:	80 93 b8 00 	sts	0x00B8, r24
     d60:	08 95       	ret
  }
  else
  {
    TWBR = ((F_CPU / 400000) - 16) / 2;
     d62:	8c e0       	ldi	r24, 0x0C	; 12
     d64:	80 93 b8 00 	sts	0x00B8, r24
     d68:	08 95       	ret

00000d6a <_ZN3I2C6pullupEh>:
  }
}
  
void I2C::pullup(uint8_t activate)
{
  if(activate)
     d6a:	66 23       	and	r22, r22
     d6c:	19 f0       	breq	.+6      	; 0xd74 <_ZN3I2C6pullupEh+0xa>
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // activate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      sbi(PORTC, 4);
     d6e:	44 9a       	sbi	0x08, 4	; 8
      sbi(PORTC, 5);
     d70:	45 9a       	sbi	0x08, 5	; 8
     d72:	08 95       	ret
  else
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // deactivate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      cbi(PORTC, 4);
     d74:	44 98       	cbi	0x08, 4	; 8
      cbi(PORTC, 5);
     d76:	45 98       	cbi	0x08, 5	; 8
     d78:	08 95       	ret

00000d7a <_ZN3I2C9availableEv>:


uint8_t I2C::available()
{
  return(bytesAvailable);
}
     d7a:	80 91 11 03 	lds	r24, 0x0311
     d7e:	08 95       	ret

00000d80 <_ZN3I2C7receiveEv>:

uint8_t I2C::receive()
{
  bufferIndex = totalBytes - bytesAvailable;
     d80:	20 91 11 03 	lds	r18, 0x0311
     d84:	30 91 0f 03 	lds	r19, 0x030F
     d88:	32 1b       	sub	r19, r18
     d8a:	30 93 10 03 	sts	0x0310, r19
  if(!bytesAvailable)
     d8e:	22 23       	and	r18, r18
     d90:	21 f4       	brne	.+8      	; 0xd9a <_ZN3I2C7receiveEv+0x1a>
  {
    bufferIndex = 0;
     d92:	10 92 10 03 	sts	0x0310, r1
    return(0);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 95       	ret
  }
  bytesAvailable--;
     d9a:	21 50       	subi	r18, 0x01	; 1
     d9c:	20 93 11 03 	sts	0x0311, r18
  return(data[bufferIndex]);
     da0:	83 0f       	add	r24, r19
     da2:	91 1d       	adc	r25, r1
     da4:	fc 01       	movw	r30, r24
     da6:	82 81       	ldd	r24, Z+2	; 0x02
}
     da8:	08 95       	ret

00000daa <_ZN3I2C6lockUpEv>:
  return(0);
}

void I2C::lockUp()
{
  TWCR = 0; //releases SDA and SCL lines to high impedance
     daa:	ec eb       	ldi	r30, 0xBC	; 188
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	10 82       	st	Z, r1
  TWCR = _BV(TWEN) | _BV(TWEA); //reinitialize TWI 
     db0:	84 e4       	ldi	r24, 0x44	; 68
     db2:	80 83       	st	Z, r24
}
     db4:	08 95       	ret

00000db6 <_ZN3I2C4stopEv>:
  }
  return(TWI_STATUS); 
}

uint8_t I2C::stop()
{
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
     dc4:	df 93       	push	r29
     dc6:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
     dc8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     dcc:	6b 01       	movw	r12, r22
     dce:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     dd0:	84 e9       	ldi	r24, 0x94	; 148
     dd2:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & (1<<TWSTO)))
     dd6:	cc eb       	ldi	r28, 0xBC	; 188
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
     dda:	1a c0       	rjmp	.+52     	; 0xe10 <_ZN3I2C4stopEv+0x5a>
  {
    if(!timeOutDelay){continue;}
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	e1 f0       	breq	.+56     	; 0xe18 <_ZN3I2C4stopEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
     de0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     de4:	ab 01       	movw	r20, r22
     de6:	bc 01       	movw	r22, r24
     de8:	4c 19       	sub	r20, r12
     dea:	5d 09       	sbc	r21, r13
     dec:	6e 09       	sbc	r22, r14
     dee:	7f 09       	sbc	r23, r15
     df0:	80 91 0d 03 	lds	r24, 0x030D
     df4:	90 91 0e 03 	lds	r25, 0x030E
     df8:	a0 e0       	ldi	r26, 0x00	; 0
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	48 17       	cp	r20, r24
     dfe:	59 07       	cpc	r21, r25
     e00:	6a 07       	cpc	r22, r26
     e02:	7b 07       	cpc	r23, r27
     e04:	28 f0       	brcs	.+10     	; 0xe10 <_ZN3I2C4stopEv+0x5a>
    {
      lockUp();
     e06:	c8 01       	movw	r24, r16
     e08:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
      return(1);
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	08 c0       	rjmp	.+16     	; 0xe20 <_ZN3I2C4stopEv+0x6a>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
  {
    if(!timeOutDelay){continue;}
     e10:	80 91 0d 03 	lds	r24, 0x030D
     e14:	90 91 0e 03 	lds	r25, 0x030E

uint8_t I2C::stop()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
     e18:	28 81       	ld	r18, Y
     e1a:	24 fd       	sbrc	r18, 4
     e1c:	df cf       	rjmp	.-66     	; 0xddc <_ZN3I2C4stopEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  return(0);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
}
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	08 95       	ret

00000e32 <_ZN3I2C11receiveByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::receiveByte(uint8_t ack)
{
     e32:	cf 92       	push	r12
     e34:	df 92       	push	r13
     e36:	ef 92       	push	r14
     e38:	ff 92       	push	r15
     e3a:	0f 93       	push	r16
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	8c 01       	movw	r16, r24
     e44:	c6 2f       	mov	r28, r22
  unsigned long startingTime = millis();
     e46:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     e4a:	6b 01       	movw	r12, r22
     e4c:	7c 01       	movw	r14, r24
  if(ack)
     e4e:	cc 23       	and	r28, r28
     e50:	21 f0       	breq	.+8      	; 0xe5a <_ZN3I2C11receiveByteEh+0x28>
  {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     e52:	84 ec       	ldi	r24, 0xC4	; 196
     e54:	80 93 bc 00 	sts	0x00BC, r24
     e58:	1e c0       	rjmp	.+60     	; 0xe96 <_ZN3I2C11receiveByteEh+0x64>

  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
     e5a:	84 e8       	ldi	r24, 0x84	; 132
     e5c:	80 93 bc 00 	sts	0x00BC, r24
     e60:	1a c0       	rjmp	.+52     	; 0xe96 <_ZN3I2C11receiveByteEh+0x64>
  }
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	f1 f0       	breq	.+60     	; 0xea2 <_ZN3I2C11receiveByteEh+0x70>
    if((millis() - startingTime) >= timeOutDelay)
     e66:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     e6a:	ab 01       	movw	r20, r22
     e6c:	bc 01       	movw	r22, r24
     e6e:	4c 19       	sub	r20, r12
     e70:	5d 09       	sbc	r21, r13
     e72:	6e 09       	sbc	r22, r14
     e74:	7f 09       	sbc	r23, r15
     e76:	80 91 0d 03 	lds	r24, 0x030D
     e7a:	90 91 0e 03 	lds	r25, 0x030E
     e7e:	a0 e0       	ldi	r26, 0x00	; 0
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	48 17       	cp	r20, r24
     e84:	59 07       	cpc	r21, r25
     e86:	6a 07       	cpc	r22, r26
     e88:	7b 07       	cpc	r23, r27
     e8a:	38 f0       	brcs	.+14     	; 0xe9a <_ZN3I2C11receiveByteEh+0x68>
    {
      lockUp();
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
      return(1);
     e92:	c1 e0       	ldi	r28, 0x01	; 1
     e94:	18 c0       	rjmp	.+48     	; 0xec6 <_ZN3I2C11receiveByteEh+0x94>
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
     e96:	cc eb       	ldi	r28, 0xBC	; 188
     e98:	d0 e0       	ldi	r29, 0x00	; 0
  {
    if(!timeOutDelay){continue;}
     e9a:	80 91 0d 03 	lds	r24, 0x030D
     e9e:	90 91 0e 03 	lds	r25, 0x030E
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
     ea2:	28 81       	ld	r18, Y
     ea4:	22 23       	and	r18, r18
     ea6:	ec f6       	brge	.-70     	; 0xe62 <_ZN3I2C11receiveByteEh+0x30>
    {
      lockUp();
      return(1);
    }
  }
  if (TWI_STATUS == LOST_ARBTRTN)
     ea8:	80 91 b9 00 	lds	r24, 0x00B9
     eac:	88 7f       	andi	r24, 0xF8	; 248
     eae:	88 33       	cpi	r24, 0x38	; 56
     eb0:	39 f4       	brne	.+14     	; 0xec0 <_ZN3I2C11receiveByteEh+0x8e>
  {
    uint8_t bufferedStatus = TWI_STATUS;
     eb2:	c0 91 b9 00 	lds	r28, 0x00B9
     eb6:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
     eb8:	c8 01       	movw	r24, r16
     eba:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <_ZN3I2C11receiveByteEh+0x94>
  }
  return(TWI_STATUS); 
     ec0:	c0 91 b9 00 	lds	r28, 0x00B9
     ec4:	c8 7f       	andi	r28, 0xF8	; 248
}
     ec6:	8c 2f       	mov	r24, r28
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	df 90       	pop	r13
     ed6:	cf 90       	pop	r12
     ed8:	08 95       	ret

00000eda <_ZN3I2C8sendByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::sendByte(uint8_t i2cData)
{
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	8c 01       	movw	r16, r24
  TWDR = i2cData;
     eec:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
     ef0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     ef4:	6b 01       	movw	r12, r22
     ef6:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     ef8:	84 e8       	ldi	r24, 0x84	; 132
     efa:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
     efe:	cc eb       	ldi	r28, 0xBC	; 188
     f00:	d0 e0       	ldi	r29, 0x00	; 0
     f02:	1a c0       	rjmp	.+52     	; 0xf38 <_ZN3I2C8sendByteEh+0x5e>
  {
    if(!timeOutDelay){continue;}
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	e1 f0       	breq	.+56     	; 0xf40 <_ZN3I2C8sendByteEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
     f08:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     f0c:	ab 01       	movw	r20, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	4c 19       	sub	r20, r12
     f12:	5d 09       	sbc	r21, r13
     f14:	6e 09       	sbc	r22, r14
     f16:	7f 09       	sbc	r23, r15
     f18:	80 91 0d 03 	lds	r24, 0x030D
     f1c:	90 91 0e 03 	lds	r25, 0x030E
     f20:	a0 e0       	ldi	r26, 0x00	; 0
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	48 17       	cp	r20, r24
     f26:	59 07       	cpc	r21, r25
     f28:	6a 07       	cpc	r22, r26
     f2a:	7b 07       	cpc	r23, r27
     f2c:	28 f0       	brcs	.+10     	; 0xf38 <_ZN3I2C8sendByteEh+0x5e>
    {
      lockUp();
     f2e:	c8 01       	movw	r24, r16
     f30:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
      return(1);
     f34:	c1 e0       	ldi	r28, 0x01	; 1
     f36:	1d c0       	rjmp	.+58     	; 0xf72 <_ZN3I2C8sendByteEh+0x98>
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
     f38:	80 91 0d 03 	lds	r24, 0x030D
     f3c:	90 91 0e 03 	lds	r25, 0x030E
uint8_t I2C::sendByte(uint8_t i2cData)
{
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
     f40:	28 81       	ld	r18, Y
     f42:	22 23       	and	r18, r18
     f44:	fc f6       	brge	.-66     	; 0xf04 <_ZN3I2C8sendByteEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
     f46:	80 91 b9 00 	lds	r24, 0x00B9
     f4a:	88 7f       	andi	r24, 0xF8	; 248
     f4c:	88 32       	cpi	r24, 0x28	; 40
     f4e:	81 f0       	breq	.+32     	; 0xf70 <_ZN3I2C8sendByteEh+0x96>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
     f50:	e9 eb       	ldi	r30, 0xB9	; 185
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	c0 81       	ld	r28, Z
     f56:	c8 7f       	andi	r28, 0xF8	; 248
  if (TWI_STATUS == MT_DATA_NACK)
     f58:	80 81       	ld	r24, Z
     f5a:	88 7f       	andi	r24, 0xF8	; 248
     f5c:	80 33       	cpi	r24, 0x30	; 48
     f5e:	21 f4       	brne	.+8      	; 0xf68 <_ZN3I2C8sendByteEh+0x8e>
  {
    stop();
     f60:	c8 01       	movw	r24, r16
     f62:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN3I2C4stopEv>
    return(bufferedStatus);
     f66:	05 c0       	rjmp	.+10     	; 0xf72 <_ZN3I2C8sendByteEh+0x98>
  }
  else
  {
    lockUp();
     f68:	c8 01       	movw	r24, r16
     f6a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <_ZN3I2C8sendByteEh+0x98>
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
  {
    return(0);
     f70:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
     f72:	8c 2f       	mov	r24, r28
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	08 95       	ret

00000f86 <_ZN3I2C11sendAddressEh>:
  }
  return(TWI_STATUS);
}

uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	0f 93       	push	r16
     f90:	1f 93       	push	r17
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	8c 01       	movw	r16, r24
  TWDR = i2cAddress;
     f98:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
     f9c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     fa0:	6b 01       	movw	r12, r22
     fa2:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     fa4:	84 e8       	ldi	r24, 0x84	; 132
     fa6:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
     faa:	cc eb       	ldi	r28, 0xBC	; 188
     fac:	d0 e0       	ldi	r29, 0x00	; 0
     fae:	1a c0       	rjmp	.+52     	; 0xfe4 <_ZN3I2C11sendAddressEh+0x5e>
  {
    if(!timeOutDelay){continue;}
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	e1 f0       	breq	.+56     	; 0xfec <_ZN3I2C11sendAddressEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
     fb4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
     fb8:	ab 01       	movw	r20, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	4c 19       	sub	r20, r12
     fbe:	5d 09       	sbc	r21, r13
     fc0:	6e 09       	sbc	r22, r14
     fc2:	7f 09       	sbc	r23, r15
     fc4:	80 91 0d 03 	lds	r24, 0x030D
     fc8:	90 91 0e 03 	lds	r25, 0x030E
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	48 17       	cp	r20, r24
     fd2:	59 07       	cpc	r21, r25
     fd4:	6a 07       	cpc	r22, r26
     fd6:	7b 07       	cpc	r23, r27
     fd8:	28 f0       	brcs	.+10     	; 0xfe4 <_ZN3I2C11sendAddressEh+0x5e>
    {
      lockUp();
     fda:	c8 01       	movw	r24, r16
     fdc:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
      return(1);
     fe0:	c1 e0       	ldi	r28, 0x01	; 1
     fe2:	29 c0       	rjmp	.+82     	; 0x1036 <_ZN3I2C11sendAddressEh+0xb0>
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
     fe4:	80 91 0d 03 	lds	r24, 0x030D
     fe8:	90 91 0e 03 	lds	r25, 0x030E
uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
     fec:	28 81       	ld	r18, Y
     fee:	22 23       	and	r18, r18
     ff0:	fc f6       	brge	.-66     	; 0xfb0 <_ZN3I2C11sendAddressEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
     ff2:	80 91 b9 00 	lds	r24, 0x00B9
     ff6:	88 7f       	andi	r24, 0xF8	; 248
     ff8:	88 31       	cpi	r24, 0x18	; 24
     ffa:	d1 f0       	breq	.+52     	; 0x1030 <_ZN3I2C11sendAddressEh+0xaa>
     ffc:	80 91 b9 00 	lds	r24, 0x00B9
    1000:	88 7f       	andi	r24, 0xF8	; 248
    1002:	80 34       	cpi	r24, 0x40	; 64
    1004:	b9 f0       	breq	.+46     	; 0x1034 <_ZN3I2C11sendAddressEh+0xae>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
    1006:	e9 eb       	ldi	r30, 0xB9	; 185
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	c0 81       	ld	r28, Z
    100c:	c8 7f       	andi	r28, 0xF8	; 248
  if ((TWI_STATUS == MT_SLA_NACK) || (TWI_STATUS == MR_SLA_NACK))
    100e:	80 81       	ld	r24, Z
    1010:	88 7f       	andi	r24, 0xF8	; 248
    1012:	80 32       	cpi	r24, 0x20	; 32
    1014:	29 f0       	breq	.+10     	; 0x1020 <_ZN3I2C11sendAddressEh+0x9a>
    1016:	80 91 b9 00 	lds	r24, 0x00B9
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	88 34       	cpi	r24, 0x48	; 72
    101e:	21 f4       	brne	.+8      	; 0x1028 <_ZN3I2C11sendAddressEh+0xa2>
  {
    stop();
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN3I2C4stopEv>
    return(bufferedStatus);
    1026:	07 c0       	rjmp	.+14     	; 0x1036 <_ZN3I2C11sendAddressEh+0xb0>
  }
  else
  {
    lockUp();
    1028:	c8 01       	movw	r24, r16
    102a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <_ZN3I2C11sendAddressEh+0xb0>
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
  {
    return(0);
    1030:	c0 e0       	ldi	r28, 0x00	; 0
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <_ZN3I2C11sendAddressEh+0xb0>
    1034:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
    1036:	8c 2f       	mov	r24, r28
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	1f 91       	pop	r17
    103e:	0f 91       	pop	r16
    1040:	ff 90       	pop	r15
    1042:	ef 90       	pop	r14
    1044:	df 90       	pop	r13
    1046:	cf 90       	pop	r12
    1048:	08 95       	ret

0000104a <_ZN3I2C5startEv>:

/////////////// Private Methods ////////////////////////////////////////


uint8_t I2C::start()
{
    104a:	cf 92       	push	r12
    104c:	df 92       	push	r13
    104e:	ef 92       	push	r14
    1050:	ff 92       	push	r15
    1052:	0f 93       	push	r16
    1054:	1f 93       	push	r17
    1056:	cf 93       	push	r28
    1058:	df 93       	push	r29
    105a:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
    105c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
    1060:	6b 01       	movw	r12, r22
    1062:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1064:	84 ea       	ldi	r24, 0xA4	; 164
    1066:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    106a:	cc eb       	ldi	r28, 0xBC	; 188
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	1a c0       	rjmp	.+52     	; 0x10a4 <_ZN3I2C5startEv+0x5a>
  {
    if(!timeOutDelay){continue;}
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	e1 f0       	breq	.+56     	; 0x10ac <_ZN3I2C5startEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
    1074:	0e 94 2c 0c 	call	0x1858	; 0x1858 <millis>
    1078:	ab 01       	movw	r20, r22
    107a:	bc 01       	movw	r22, r24
    107c:	4c 19       	sub	r20, r12
    107e:	5d 09       	sbc	r21, r13
    1080:	6e 09       	sbc	r22, r14
    1082:	7f 09       	sbc	r23, r15
    1084:	80 91 0d 03 	lds	r24, 0x030D
    1088:	90 91 0e 03 	lds	r25, 0x030E
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	48 17       	cp	r20, r24
    1092:	59 07       	cpc	r21, r25
    1094:	6a 07       	cpc	r22, r26
    1096:	7b 07       	cpc	r23, r27
    1098:	28 f0       	brcs	.+10     	; 0x10a4 <_ZN3I2C5startEv+0x5a>
    {
      lockUp();
    109a:	c8 01       	movw	r24, r16
    109c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
      return(1);
    10a0:	c1 e0       	ldi	r28, 0x01	; 1
    10a2:	24 c0       	rjmp	.+72     	; 0x10ec <_ZN3I2C5startEv+0xa2>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    10a4:	80 91 0d 03 	lds	r24, 0x030D
    10a8:	90 91 0e 03 	lds	r25, 0x030E

uint8_t I2C::start()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    10ac:	28 81       	ld	r18, Y
    10ae:	22 23       	and	r18, r18
    10b0:	fc f6       	brge	.-66     	; 0x1070 <_ZN3I2C5startEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
    10b2:	80 91 b9 00 	lds	r24, 0x00B9
    10b6:	88 7f       	andi	r24, 0xF8	; 248
    10b8:	88 30       	cpi	r24, 0x08	; 8
    10ba:	a9 f0       	breq	.+42     	; 0x10e6 <_ZN3I2C5startEv+0x9c>
    10bc:	80 91 b9 00 	lds	r24, 0x00B9
    10c0:	88 7f       	andi	r24, 0xF8	; 248
    10c2:	80 31       	cpi	r24, 0x10	; 16
    10c4:	91 f0       	breq	.+36     	; 0x10ea <_ZN3I2C5startEv+0xa0>
  {
    return(0);
  }
  if (TWI_STATUS == LOST_ARBTRTN)
    10c6:	80 91 b9 00 	lds	r24, 0x00B9
    10ca:	88 7f       	andi	r24, 0xF8	; 248
    10cc:	88 33       	cpi	r24, 0x38	; 56
    10ce:	39 f4       	brne	.+14     	; 0x10de <_ZN3I2C5startEv+0x94>
  {
    uint8_t bufferedStatus = TWI_STATUS;
    10d0:	c0 91 b9 00 	lds	r28, 0x00B9
    10d4:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
    10d6:	c8 01       	movw	r24, r16
    10d8:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    10dc:	07 c0       	rjmp	.+14     	; 0x10ec <_ZN3I2C5startEv+0xa2>
  }
  return(TWI_STATUS);
    10de:	c0 91 b9 00 	lds	r28, 0x00B9
    10e2:	c8 7f       	andi	r28, 0xF8	; 248
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <_ZN3I2C5startEv+0xa2>
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
  {
    return(0);
    10e6:	c0 e0       	ldi	r28, 0x00	; 0
    10e8:	01 c0       	rjmp	.+2      	; 0x10ec <_ZN3I2C5startEv+0xa2>
    10ea:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t bufferedStatus = TWI_STATUS;
    lockUp();
    return(bufferedStatus);
  }
  return(TWI_STATUS);
}
    10ec:	8c 2f       	mov	r24, r28
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	08 95       	ret

00001100 <_ZN3I2C4readEhhh>:
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
{
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	ec 01       	movw	r28, r24
    1112:	06 2f       	mov	r16, r22
    1114:	f4 2e       	mov	r15, r20
    1116:	12 2f       	mov	r17, r18
  bytesAvailable = 0;
    1118:	10 92 11 03 	sts	0x0311, r1
  bufferIndex = 0;
    111c:	10 92 10 03 	sts	0x0310, r1
  if(numberBytes == 0){numberBytes++;}
    1120:	22 23       	and	r18, r18
    1122:	09 f4       	brne	.+2      	; 0x1126 <_ZN3I2C4readEhhh+0x26>
    1124:	11 e0       	ldi	r17, 0x01	; 1
  nack = numberBytes - 1;
    1126:	81 2f       	mov	r24, r17
    1128:	81 50       	subi	r24, 0x01	; 1
    112a:	89 83       	std	Y+1, r24	; 0x01
  returnStatus = 0;
    112c:	18 82       	st	Y, r1
  returnStatus = start();
    112e:	ce 01       	movw	r24, r28
    1130:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN3I2C5startEv>
    1134:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    1136:	88 23       	and	r24, r24
    1138:	09 f0       	breq	.+2      	; 0x113c <_ZN3I2C4readEhhh+0x3c>
    113a:	6e c0       	rjmp	.+220    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
  returnStatus = sendAddress(SLA_W(address));
    113c:	00 0f       	add	r16, r16
    113e:	ce 01       	movw	r24, r28
    1140:	60 2f       	mov	r22, r16
    1142:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN3I2C11sendAddressEh>
    1146:	88 83       	st	Y, r24
  if(returnStatus)
    1148:	88 23       	and	r24, r24
    114a:	29 f0       	breq	.+10     	; 0x1156 <_ZN3I2C4readEhhh+0x56>
  {
    if(returnStatus == 1){return(2);}
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	09 f0       	breq	.+2      	; 0x1152 <_ZN3I2C4readEhhh+0x52>
    1150:	63 c0       	rjmp	.+198    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	61 c0       	rjmp	.+194    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    1156:	ce 01       	movw	r24, r28
    1158:	6f 2d       	mov	r22, r15
    115a:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN3I2C8sendByteEh>
    115e:	88 83       	st	Y, r24
  if(returnStatus)
    1160:	88 23       	and	r24, r24
    1162:	29 f0       	breq	.+10     	; 0x116e <_ZN3I2C4readEhhh+0x6e>
  {
    if(returnStatus == 1){return(3);}
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	09 f0       	breq	.+2      	; 0x116a <_ZN3I2C4readEhhh+0x6a>
    1168:	57 c0       	rjmp	.+174    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	55 c0       	rjmp	.+170    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = start();
    116e:	ce 01       	movw	r24, r28
    1170:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN3I2C5startEv>
    1174:	88 83       	st	Y, r24
  if(returnStatus)
    1176:	88 23       	and	r24, r24
    1178:	29 f0       	breq	.+10     	; 0x1184 <_ZN3I2C4readEhhh+0x84>
  {
    if(returnStatus == 1){return(4);}
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	09 f0       	breq	.+2      	; 0x1180 <_ZN3I2C4readEhhh+0x80>
    117e:	4c c0       	rjmp	.+152    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    1180:	84 e0       	ldi	r24, 0x04	; 4
    1182:	4a c0       	rjmp	.+148    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
    1184:	60 2f       	mov	r22, r16
    1186:	6f 5f       	subi	r22, 0xFF	; 255
    1188:	ce 01       	movw	r24, r28
    118a:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN3I2C11sendAddressEh>
    118e:	88 83       	st	Y, r24
  if(returnStatus)
    1190:	88 23       	and	r24, r24
    1192:	19 f4       	brne	.+6      	; 0x119a <_ZN3I2C4readEhhh+0x9a>
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    1194:	11 23       	and	r17, r17
    1196:	29 f4       	brne	.+10     	; 0x11a2 <_ZN3I2C4readEhhh+0xa2>
    1198:	32 c0       	rjmp	.+100    	; 0x11fe <_ZN3I2C4readEhhh+0xfe>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    119a:	81 30       	cpi	r24, 0x01	; 1
    119c:	e9 f5       	brne	.+122    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    119e:	85 e0       	ldi	r24, 0x05	; 5
    11a0:	3b c0       	rjmp	.+118    	; 0x1218 <_ZN3I2C4readEhhh+0x118>
uint8_t I2C::read(int address, int registerAddress, int numberBytes)
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
    11a2:	ee 24       	eor	r14, r14
    11a4:	ff 24       	eor	r15, r15
    11a6:	68 94       	set
    11a8:	e1 f8       	bld	r14, 1
    11aa:	ec 0e       	add	r14, r28
    11ac:	fd 1e       	adc	r15, r29
    11ae:	00 e0       	ldi	r16, 0x00	; 0
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    }
    data[i] = TWDR;
    11b0:	0f 2e       	mov	r0, r31
    11b2:	fb eb       	ldi	r31, 0xBB	; 187
    11b4:	cf 2e       	mov	r12, r31
    11b6:	dd 24       	eor	r13, r13
    11b8:	f0 2d       	mov	r31, r0
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 17       	cp	r24, r16
    11be:	51 f4       	brne	.+20     	; 0x11d4 <_ZN3I2C4readEhhh+0xd4>
    {
      returnStatus = receiveByte(0);
    11c0:	ce 01       	movw	r24, r28
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN3I2C11receiveByteEh>
    11c8:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    11ca:	81 30       	cpi	r24, 0x01	; 1
    11cc:	11 f1       	breq	.+68     	; 0x1212 <_ZN3I2C4readEhhh+0x112>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    11ce:	88 35       	cpi	r24, 0x58	; 88
    11d0:	51 f0       	breq	.+20     	; 0x11e6 <_ZN3I2C4readEhhh+0xe6>
    11d2:	22 c0       	rjmp	.+68     	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    }
    else
    {
      returnStatus = receiveByte(1);
    11d4:	ce 01       	movw	r24, r28
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	0e 94 19 07 	call	0xe32	; 0xe32 <_ZN3I2C11receiveByteEh>
    11dc:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	d1 f0       	breq	.+52     	; 0x1216 <_ZN3I2C4readEhhh+0x116>
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    11e2:	80 35       	cpi	r24, 0x50	; 80
    11e4:	c9 f4       	brne	.+50     	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    }
    data[i] = TWDR;
    11e6:	f6 01       	movw	r30, r12
    11e8:	80 81       	ld	r24, Z
    11ea:	f7 01       	movw	r30, r14
    11ec:	81 93       	st	Z+, r24
    11ee:	7f 01       	movw	r14, r30
    bytesAvailable = i+1;
    11f0:	0f 5f       	subi	r16, 0xFF	; 255
    11f2:	00 93 11 03 	sts	0x0311, r16
    totalBytes = i+1;
    11f6:	00 93 0f 03 	sts	0x030F, r16
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    11fa:	01 17       	cp	r16, r17
    11fc:	f1 f6       	brne	.-68     	; 0x11ba <_ZN3I2C4readEhhh+0xba>
    }
    data[i] = TWDR;
    bytesAvailable = i+1;
    totalBytes = i+1;
  }
  returnStatus = stop();
    11fe:	ce 01       	movw	r24, r28
    1200:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN3I2C4stopEv>
    1204:	88 83       	st	Y, r24
  if(returnStatus)
    1206:	88 23       	and	r24, r24
    1208:	39 f0       	breq	.+14     	; 0x1218 <_ZN3I2C4readEhhh+0x118>
  {
    if(returnStatus == 1){return(7);}
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	29 f4       	brne	.+10     	; 0x1218 <_ZN3I2C4readEhhh+0x118>
    120e:	87 e0       	ldi	r24, 0x07	; 7
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <_ZN3I2C4readEhhh+0x118>
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    {
      returnStatus = receiveByte(0);
      if(returnStatus == 1){return(6);}
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <_ZN3I2C4readEhhh+0x118>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    }
    else
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
    1216:	86 e0       	ldi	r24, 0x06	; 6
  {
    if(returnStatus == 1){return(7);}
    return(returnStatus);
  }
  return(returnStatus);
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	08 95       	ret

0000122a <_ZN3I2C5writeEhhh>:
{
  return(write((uint8_t) address, (uint8_t) registerAddress));
}

uint8_t I2C::write(uint8_t address, uint8_t registerAddress, uint8_t data)
{
    122a:	ff 92       	push	r15
    122c:	0f 93       	push	r16
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	ec 01       	movw	r28, r24
    1236:	16 2f       	mov	r17, r22
    1238:	04 2f       	mov	r16, r20
    123a:	f2 2e       	mov	r15, r18
  returnStatus = 0;
    123c:	18 82       	st	Y, r1
  returnStatus = start(); 
    123e:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN3I2C5startEv>
    1242:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    1244:	88 23       	and	r24, r24
    1246:	59 f5       	brne	.+86     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
  returnStatus = sendAddress(SLA_W(address));
    1248:	61 2f       	mov	r22, r17
    124a:	66 0f       	add	r22, r22
    124c:	ce 01       	movw	r24, r28
    124e:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN3I2C11sendAddressEh>
    1252:	88 83       	st	Y, r24
  if(returnStatus)
    1254:	88 23       	and	r24, r24
    1256:	21 f0       	breq	.+8      	; 0x1260 <_ZN3I2C5writeEhhh+0x36>
  {
    if(returnStatus == 1){return(2);}
    1258:	81 30       	cpi	r24, 0x01	; 1
    125a:	09 f5       	brne	.+66     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	1f c0       	rjmp	.+62     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    1260:	ce 01       	movw	r24, r28
    1262:	60 2f       	mov	r22, r16
    1264:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN3I2C8sendByteEh>
    1268:	88 83       	st	Y, r24
  if(returnStatus)
    126a:	88 23       	and	r24, r24
    126c:	21 f0       	breq	.+8      	; 0x1276 <_ZN3I2C5writeEhhh+0x4c>
  {
    if(returnStatus == 1){return(3);}
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	b1 f4       	brne	.+44     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    1272:	83 e0       	ldi	r24, 0x03	; 3
    1274:	14 c0       	rjmp	.+40     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(data);
    1276:	ce 01       	movw	r24, r28
    1278:	6f 2d       	mov	r22, r15
    127a:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN3I2C8sendByteEh>
    127e:	88 83       	st	Y, r24
  if(returnStatus)
    1280:	88 23       	and	r24, r24
    1282:	21 f0       	breq	.+8      	; 0x128c <_ZN3I2C5writeEhhh+0x62>
  {
    if(returnStatus == 1){return(3);}
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	59 f4       	brne	.+22     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    1288:	83 e0       	ldi	r24, 0x03	; 3
    128a:	09 c0       	rjmp	.+18     	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = stop();
    128c:	ce 01       	movw	r24, r28
    128e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN3I2C4stopEv>
    1292:	88 83       	st	Y, r24
  if(returnStatus)
    1294:	88 23       	and	r24, r24
    1296:	19 f0       	breq	.+6      	; 0x129e <_ZN3I2C5writeEhhh+0x74>
  {
    if(returnStatus == 1){return(7);}
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	09 f4       	brne	.+2      	; 0x129e <_ZN3I2C5writeEhhh+0x74>
    129c:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	08 95       	ret

000012aa <_ZN3I2C5writeEhh>:


/////////////////////////////////////////////////////

uint8_t I2C::write(uint8_t address, uint8_t registerAddress)
{
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
    12b4:	16 2f       	mov	r17, r22
    12b6:	04 2f       	mov	r16, r20
  returnStatus = 0;
    12b8:	18 82       	st	Y, r1
  returnStatus = start();
    12ba:	0e 94 25 08 	call	0x104a	; 0x104a <_ZN3I2C5startEv>
    12be:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    12c0:	88 23       	and	r24, r24
    12c2:	01 f5       	brne	.+64     	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
  returnStatus = sendAddress(SLA_W(address));
    12c4:	61 2f       	mov	r22, r17
    12c6:	66 0f       	add	r22, r22
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 c3 07 	call	0xf86	; 0xf86 <_ZN3I2C11sendAddressEh>
    12ce:	88 83       	st	Y, r24
  if(returnStatus)
    12d0:	88 23       	and	r24, r24
    12d2:	21 f0       	breq	.+8      	; 0x12dc <_ZN3I2C5writeEhh+0x32>
  {
    if(returnStatus == 1){return(2);}
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	b1 f4       	brne	.+44     	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	14 c0       	rjmp	.+40     	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    12dc:	ce 01       	movw	r24, r28
    12de:	60 2f       	mov	r22, r16
    12e0:	0e 94 6d 07 	call	0xeda	; 0xeda <_ZN3I2C8sendByteEh>
    12e4:	88 83       	st	Y, r24
  if(returnStatus)
    12e6:	88 23       	and	r24, r24
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <_ZN3I2C5writeEhh+0x48>
  {
    if(returnStatus == 1){return(3);}
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	59 f4       	brne	.+22     	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = stop();
    12f2:	ce 01       	movw	r24, r28
    12f4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <_ZN3I2C4stopEv>
    12f8:	88 83       	st	Y, r24
  if(returnStatus)
    12fa:	88 23       	and	r24, r24
    12fc:	19 f0       	breq	.+6      	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
  {
    if(returnStatus == 1){return(7);}
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	09 f4       	brne	.+2      	; 0x1304 <_ZN3I2C5writeEhh+0x5a>
    1302:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    1304:	df 91       	pop	r29
    1306:	cf 91       	pop	r28
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	08 95       	ret

0000130e <_ZL13isTimerActive18timer16_Sequence_t>:

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	c9 01       	movw	r24, r18
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	28 0f       	add	r18, r24
    131a:	39 1f       	adc	r19, r25
    131c:	c9 01       	movw	r24, r18
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	bc 01       	movw	r22, r24
    1328:	fc 01       	movw	r30, r24
    132a:	ee 0f       	add	r30, r30
    132c:	ff 1f       	adc	r31, r31
    132e:	8e 0f       	add	r24, r30
    1330:	9f 1f       	adc	r25, r31
    1332:	fc 01       	movw	r30, r24
    1334:	ec 5e       	subi	r30, 0xEC	; 236
    1336:	fc 4f       	sbci	r31, 0xFC	; 252
    1338:	80 81       	ld	r24, Z
    133a:	86 fd       	sbrc	r24, 6
    133c:	18 c0       	rjmp	.+48     	; 0x136e <_ZL13isTimerActive18timer16_Sequence_t+0x60>
    133e:	40 e0       	ldi	r20, 0x00	; 0
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	ca 01       	movw	r24, r20
    1344:	86 0f       	add	r24, r22
    1346:	97 1f       	adc	r25, r23
    1348:	01 96       	adiw	r24, 0x01	; 1
    134a:	9c 01       	movw	r18, r24
    134c:	22 0f       	add	r18, r18
    134e:	33 1f       	adc	r19, r19
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	fc 01       	movw	r30, r24
    1356:	ec 5e       	subi	r30, 0xEC	; 236
    1358:	fc 4f       	sbci	r31, 0xFC	; 252
    135a:	80 81       	ld	r24, Z
    135c:	86 fd       	sbrc	r24, 6
    135e:	09 c0       	rjmp	.+18     	; 0x1372 <_ZL13isTimerActive18timer16_Sequence_t+0x64>
    1360:	4f 5f       	subi	r20, 0xFF	; 255
    1362:	5f 4f       	sbci	r21, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    1364:	4b 30       	cpi	r20, 0x0B	; 11
    1366:	51 05       	cpc	r21, r1
    1368:	61 f7       	brne	.-40     	; 0x1342 <_ZL13isTimerActive18timer16_Sequence_t+0x34>
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
  }
  return false;
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	08 95       	ret
static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
      return true;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	08 95       	ret
    1372:	81 e0       	ldi	r24, 0x01	; 1
  }
  return false;
}
    1374:	08 95       	ret

00001376 <__vector_11>:

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
ISR(TIMER1_COMPA_vect) 
{ 
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
{
  if( Channel[timer] < 0 )
    1398:	80 91 13 03 	lds	r24, 0x0313
    139c:	88 23       	and	r24, r24
    139e:	2c f4       	brge	.+10     	; 0x13aa <__vector_11+0x34>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
    13a0:	10 92 85 00 	sts	0x0085, r1
    13a4:	10 92 84 00 	sts	0x0084, r1
    13a8:	2d c0       	rjmp	.+90     	; 0x1404 <__vector_11+0x8e>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
    13aa:	20 91 13 03 	lds	r18, 0x0313
    13ae:	33 27       	eor	r19, r19
    13b0:	27 fd       	sbrc	r18, 7
    13b2:	30 95       	com	r19
    13b4:	80 91 12 03 	lds	r24, 0x0312
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	28 17       	cp	r18, r24
    13bc:	39 07       	cpc	r19, r25
    13be:	14 f5       	brge	.+68     	; 0x1404 <__vector_11+0x8e>
    13c0:	80 91 13 03 	lds	r24, 0x0313
    13c4:	99 27       	eor	r25, r25
    13c6:	87 fd       	sbrc	r24, 7
    13c8:	90 95       	com	r25
    13ca:	fc 01       	movw	r30, r24
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	8e 0f       	add	r24, r30
    13d2:	9f 1f       	adc	r25, r31
    13d4:	fc 01       	movw	r30, r24
    13d6:	ec 5e       	subi	r30, 0xEC	; 236
    13d8:	fc 4f       	sbci	r31, 0xFC	; 252
    13da:	80 81       	ld	r24, Z
    13dc:	86 ff       	sbrs	r24, 6
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <__vector_11+0x8e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
    13e0:	80 91 13 03 	lds	r24, 0x0313
    13e4:	99 27       	eor	r25, r25
    13e6:	87 fd       	sbrc	r24, 7
    13e8:	90 95       	com	r25
    13ea:	fc 01       	movw	r30, r24
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	8e 0f       	add	r24, r30
    13f2:	9f 1f       	adc	r25, r31
    13f4:	fc 01       	movw	r30, r24
    13f6:	ec 5e       	subi	r30, 0xEC	; 236
    13f8:	fc 4f       	sbci	r31, 0xFC	; 252
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 73       	andi	r24, 0x3F	; 63
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
  }

  Channel[timer]++;    // increment to the next channel
    1404:	80 91 13 03 	lds	r24, 0x0313
    1408:	8f 5f       	subi	r24, 0xFF	; 255
    140a:	80 93 13 03 	sts	0x0313, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
    140e:	20 91 13 03 	lds	r18, 0x0313
    1412:	33 27       	eor	r19, r19
    1414:	27 fd       	sbrc	r18, 7
    1416:	30 95       	com	r19
    1418:	80 91 12 03 	lds	r24, 0x0312
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	28 17       	cp	r18, r24
    1420:	39 07       	cpc	r19, r25
    1422:	0c f0       	brlt	.+2      	; 0x1426 <__vector_11+0xb0>
    1424:	55 c0       	rjmp	.+170    	; 0x14d0 <__vector_11+0x15a>
    1426:	80 91 13 03 	lds	r24, 0x0313
    142a:	8c 30       	cpi	r24, 0x0C	; 12
    142c:	0c f0       	brlt	.+2      	; 0x1430 <__vector_11+0xba>
    142e:	50 c0       	rjmp	.+160    	; 0x14d0 <__vector_11+0x15a>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
    1430:	80 91 84 00 	lds	r24, 0x0084
    1434:	90 91 85 00 	lds	r25, 0x0085
    1438:	20 91 13 03 	lds	r18, 0x0313
    143c:	33 27       	eor	r19, r19
    143e:	27 fd       	sbrc	r18, 7
    1440:	30 95       	com	r19
    1442:	f9 01       	movw	r30, r18
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	2e 0f       	add	r18, r30
    144a:	3f 1f       	adc	r19, r31
    144c:	f9 01       	movw	r30, r18
    144e:	ec 5e       	subi	r30, 0xEC	; 236
    1450:	fc 4f       	sbci	r31, 0xFC	; 252
    1452:	21 81       	ldd	r18, Z+1	; 0x01
    1454:	32 81       	ldd	r19, Z+2	; 0x02
    1456:	82 0f       	add	r24, r18
    1458:	93 1f       	adc	r25, r19
    145a:	90 93 89 00 	sts	0x0089, r25
    145e:	80 93 88 00 	sts	0x0088, r24
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
    1462:	80 91 13 03 	lds	r24, 0x0313
    1466:	99 27       	eor	r25, r25
    1468:	87 fd       	sbrc	r24, 7
    146a:	90 95       	com	r25
    146c:	fc 01       	movw	r30, r24
    146e:	ee 0f       	add	r30, r30
    1470:	ff 1f       	adc	r31, r31
    1472:	8e 0f       	add	r24, r30
    1474:	9f 1f       	adc	r25, r31
    1476:	fc 01       	movw	r30, r24
    1478:	ec 5e       	subi	r30, 0xEC	; 236
    147a:	fc 4f       	sbci	r31, 0xFC	; 252
    147c:	80 81       	ld	r24, Z
    147e:	86 ff       	sbrs	r24, 6
    1480:	31 c0       	rjmp	.+98     	; 0x14e4 <__vector_11+0x16e>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
    1482:	80 91 13 03 	lds	r24, 0x0313
    1486:	99 27       	eor	r25, r25
    1488:	87 fd       	sbrc	r24, 7
    148a:	90 95       	com	r25
    148c:	fc 01       	movw	r30, r24
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	8e 0f       	add	r24, r30
    1494:	9f 1f       	adc	r25, r31
    1496:	fc 01       	movw	r30, r24
    1498:	ec 5e       	subi	r30, 0xEC	; 236
    149a:	fc 4f       	sbci	r31, 0xFC	; 252
    149c:	80 81       	ld	r24, Z
    149e:	8f 73       	andi	r24, 0x3F	; 63
    14a0:	61 e0       	ldi	r22, 0x01	; 1
    14a2:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <digitalWrite>
    14a6:	1e c0       	rjmp	.+60     	; 0x14e4 <__vector_11+0x16e>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    14a8:	80 e4       	ldi	r24, 0x40	; 64
    14aa:	9c e9       	ldi	r25, 0x9C	; 156
    14ac:	90 93 89 00 	sts	0x0089, r25
    14b0:	80 93 88 00 	sts	0x0088, r24
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <__vector_11+0x152>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    14b6:	80 91 84 00 	lds	r24, 0x0084
    14ba:	90 91 85 00 	lds	r25, 0x0085
    14be:	04 96       	adiw	r24, 0x04	; 4
    14c0:	90 93 89 00 	sts	0x0089, r25
    14c4:	80 93 88 00 	sts	0x0088, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	80 93 13 03 	sts	0x0313, r24
    14ce:	0a c0       	rjmp	.+20     	; 0x14e4 <__vector_11+0x16e>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
    14d0:	80 91 84 00 	lds	r24, 0x0084
    14d4:	90 91 85 00 	lds	r25, 0x0085
    14d8:	04 96       	adiw	r24, 0x04	; 4
    14da:	2c e9       	ldi	r18, 0x9C	; 156
    14dc:	80 34       	cpi	r24, 0x40	; 64
    14de:	92 07       	cpc	r25, r18
    14e0:	18 f3       	brcs	.-58     	; 0x14a8 <__vector_11+0x132>
    14e2:	e9 cf       	rjmp	.-46     	; 0x14b6 <__vector_11+0x140>
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
ISR(TIMER1_COMPA_vect) 
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
    14e4:	ff 91       	pop	r31
    14e6:	ef 91       	pop	r30
    14e8:	bf 91       	pop	r27
    14ea:	af 91       	pop	r26
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	7f 91       	pop	r23
    14f2:	6f 91       	pop	r22
    14f4:	5f 91       	pop	r21
    14f6:	4f 91       	pop	r20
    14f8:	3f 91       	pop	r19
    14fa:	2f 91       	pop	r18
    14fc:	0f 90       	pop	r0
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	0f 90       	pop	r0
    1502:	1f 90       	pop	r1
    1504:	18 95       	reti

00001506 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
    1506:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
    1508:	80 91 12 03 	lds	r24, 0x0312
    150c:	8c 30       	cpi	r24, 0x0C	; 12
    150e:	98 f4       	brcc	.+38     	; 0x1536 <_ZN5ServoC1Ev+0x30>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
    1510:	80 83       	st	Z, r24
    1512:	8f 5f       	subi	r24, 0xFF	; 255
    1514:	80 93 12 03 	sts	0x0312, r24
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
    1518:	80 81       	ld	r24, Z
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	fc 01       	movw	r30, r24
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	8e 0f       	add	r24, r30
    1524:	9f 1f       	adc	r25, r31
    1526:	fc 01       	movw	r30, r24
    1528:	ec 5e       	subi	r30, 0xEC	; 236
    152a:	fc 4f       	sbci	r31, 0xFC	; 252
    152c:	88 eb       	ldi	r24, 0xB8	; 184
    152e:	9b e0       	ldi	r25, 0x0B	; 11
    1530:	92 83       	std	Z+2, r25	; 0x02
    1532:	81 83       	std	Z+1, r24	; 0x01
    1534:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
    153a:	08 95       	ret

0000153c <_ZN5Servo6attachEiii>:
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
{
    153c:	cf 92       	push	r12
    153e:	df 92       	push	r13
    1540:	ef 92       	push	r14
    1542:	ff 92       	push	r15
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	8c 01       	movw	r16, r24
    154c:	c6 2f       	mov	r28, r22
    154e:	7a 01       	movw	r14, r20
    1550:	69 01       	movw	r12, r18
  if(this->servoIndex < MAX_SERVOS ) {
    1552:	fc 01       	movw	r30, r24
    1554:	80 81       	ld	r24, Z
    1556:	8c 30       	cpi	r24, 0x0C	; 12
    1558:	08 f0       	brcs	.+2      	; 0x155c <_ZN5Servo6attachEiii+0x20>
    155a:	54 c0       	rjmp	.+168    	; 0x1604 <_ZN5Servo6attachEiii+0xc8>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
    155c:	86 2f       	mov	r24, r22
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	0e 94 ce 0c 	call	0x199c	; 0x199c <pinMode>
    servos[this->servoIndex].Pin.nbr = pin;  
    1564:	f8 01       	movw	r30, r16
    1566:	40 81       	ld	r20, Z
    1568:	84 2f       	mov	r24, r20
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9c 01       	movw	r18, r24
    156e:	22 0f       	add	r18, r18
    1570:	33 1f       	adc	r19, r19
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	fc 01       	movw	r30, r24
    1578:	ec 5e       	subi	r30, 0xEC	; 236
    157a:	fc 4f       	sbci	r31, 0xFC	; 252
    157c:	cf 73       	andi	r28, 0x3F	; 63
    157e:	80 81       	ld	r24, Z
    1580:	80 7c       	andi	r24, 0xC0	; 192
    1582:	c8 2b       	or	r28, r24
    1584:	c0 83       	st	Z, r28
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
    1586:	80 e2       	ldi	r24, 0x20	; 32
    1588:	92 e0       	ldi	r25, 0x02	; 2
    158a:	8e 19       	sub	r24, r14
    158c:	9f 09       	sbc	r25, r15
    158e:	0a f4       	brpl	.+2      	; 0x1592 <_ZN5Servo6attachEiii+0x56>
    1590:	03 96       	adiw	r24, 0x03	; 3
    1592:	95 95       	asr	r25
    1594:	87 95       	ror	r24
    1596:	95 95       	asr	r25
    1598:	87 95       	ror	r24
    159a:	f8 01       	movw	r30, r16
    159c:	81 83       	std	Z+1, r24	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    159e:	80 e6       	ldi	r24, 0x60	; 96
    15a0:	99 e0       	ldi	r25, 0x09	; 9
    15a2:	8c 19       	sub	r24, r12
    15a4:	9d 09       	sbc	r25, r13
    15a6:	0a f4       	brpl	.+2      	; 0x15aa <_ZN5Servo6attachEiii+0x6e>
    15a8:	03 96       	adiw	r24, 0x03	; 3
    15aa:	95 95       	asr	r25
    15ac:	87 95       	ror	r24
    15ae:	95 95       	asr	r25
    15b0:	87 95       	ror	r24
    15b2:	f8 01       	movw	r30, r16
    15b4:	82 83       	std	Z+2, r24	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    15b6:	84 2f       	mov	r24, r20
    15b8:	6c e0       	ldi	r22, 0x0C	; 12
    15ba:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__udivmodqi4>
    15be:	c8 2f       	mov	r28, r24
    if(isTimerActive(timer) == false)
    15c0:	0e 94 87 09 	call	0x130e	; 0x130e <_ZL13isTimerActive18timer16_Sequence_t>
    15c4:	88 23       	and	r24, r24
    15c6:	89 f4       	brne	.+34     	; 0x15ea <_ZN5Servo6attachEiii+0xae>


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    15c8:	cc 23       	and	r28, r28
    15ca:	79 f4       	brne	.+30     	; 0x15ea <_ZN5Servo6attachEiii+0xae>
    TCCR1A = 0;             // normal counting mode 
    15cc:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
    15d6:	10 92 85 00 	sts	0x0085, r1
    15da:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
    15de:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
    15e0:	ef e6       	ldi	r30, 0x6F	; 111
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	82 60       	ori	r24, 0x02	; 2
    15e8:	80 83       	st	Z, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
    15ea:	f8 01       	movw	r30, r16
    15ec:	80 81       	ld	r24, Z
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	fc 01       	movw	r30, r24
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	e8 0f       	add	r30, r24
    15f8:	f9 1f       	adc	r31, r25
    15fa:	ec 5e       	subi	r30, 0xEC	; 236
    15fc:	fc 4f       	sbci	r31, 0xFC	; 252
    15fe:	80 81       	ld	r24, Z
    1600:	80 64       	ori	r24, 0x40	; 64
    1602:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
    1604:	f8 01       	movw	r30, r16
    1606:	80 81       	ld	r24, Z
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	ff 90       	pop	r15
    1610:	ef 90       	pop	r14
    1612:	df 90       	pop	r13
    1614:	cf 90       	pop	r12
    1616:	08 95       	ret

00001618 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	52 e0       	ldi	r21, 0x02	; 2
    161c:	20 e6       	ldi	r18, 0x60	; 96
    161e:	39 e0       	ldi	r19, 0x09	; 9
    1620:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN5Servo6attachEiii>
}
    1624:	08 95       	ret

00001626 <_ZN5Servo6detachEv>:
  return this->servoIndex ;
}

void Servo::detach()  
{
  servos[this->servoIndex].Pin.isActive = false;  
    1626:	fc 01       	movw	r30, r24
    1628:	80 81       	ld	r24, Z
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	fc 01       	movw	r30, r24
    162e:	ee 0f       	add	r30, r30
    1630:	ff 1f       	adc	r31, r31
    1632:	e8 0f       	add	r30, r24
    1634:	f9 1f       	adc	r31, r25
    1636:	ec 5e       	subi	r30, 0xEC	; 236
    1638:	fc 4f       	sbci	r31, 0xFC	; 252
    163a:	80 81       	ld	r24, Z
    163c:	8f 7b       	andi	r24, 0xBF	; 191
    163e:	80 83       	st	Z, r24
  timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}
    1640:	08 95       	ret

00001642 <_ZN5Servo17writeMicrosecondsEi>:
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	fc 01       	movw	r30, r24
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
    1648:	c0 81       	ld	r28, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
    164a:	cc 30       	cpi	r28, 0x0C	; 12
    164c:	08 f0       	brcs	.+2      	; 0x1650 <_ZN5Servo17writeMicrosecondsEi+0xe>
    164e:	4c c0       	rjmp	.+152    	; 0x16e8 <_ZN5Servo17writeMicrosecondsEi+0xa6>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    1650:	81 81       	ldd	r24, Z+1	; 0x01
    1652:	99 27       	eor	r25, r25
    1654:	87 fd       	sbrc	r24, 7
    1656:	90 95       	com	r25
    1658:	28 e8       	ldi	r18, 0x88	; 136
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	28 1b       	sub	r18, r24
    165e:	39 0b       	sbc	r19, r25
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	22 0f       	add	r18, r18
    1666:	33 1f       	adc	r19, r19
    1668:	62 17       	cp	r22, r18
    166a:	73 07       	cpc	r23, r19
    166c:	84 f0       	brlt	.+32     	; 0x168e <_ZN5Servo17writeMicrosecondsEi+0x4c>
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
    166e:	82 81       	ldd	r24, Z+2	; 0x02
    1670:	99 27       	eor	r25, r25
    1672:	87 fd       	sbrc	r24, 7
    1674:	90 95       	com	r25
    1676:	28 e5       	ldi	r18, 0x58	; 88
    1678:	32 e0       	ldi	r19, 0x02	; 2
    167a:	28 1b       	sub	r18, r24
    167c:	39 0b       	sbc	r19, r25
    167e:	22 0f       	add	r18, r18
    1680:	33 1f       	adc	r19, r19
    1682:	22 0f       	add	r18, r18
    1684:	33 1f       	adc	r19, r19
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
    1686:	62 17       	cp	r22, r18
    1688:	73 07       	cpc	r23, r19
    168a:	0c f4       	brge	.+2      	; 0x168e <_ZN5Servo17writeMicrosecondsEi+0x4c>
    168c:	9b 01       	movw	r18, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    168e:	22 50       	subi	r18, 0x02	; 2
    1690:	30 40       	sbci	r19, 0x00	; 0
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    1692:	c9 01       	movw	r24, r18
    1694:	aa 27       	eor	r26, r26
    1696:	97 fd       	sbrc	r25, 7
    1698:	a0 95       	com	r26
    169a:	ba 2f       	mov	r27, r26
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	aa 1f       	adc	r26, r26
    16aa:	bb 1f       	adc	r27, r27
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	66 0f       	add	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	66 0f       	add	r22, r22
    16ba:	77 1f       	adc	r23, r23
    16bc:	88 1f       	adc	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	28 e0       	ldi	r18, 0x08	; 8
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e0       	ldi	r20, 0x00	; 0
    16c6:	50 e0       	ldi	r21, 0x00	; 0
    16c8:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__divmodsi4>

    uint8_t oldSREG = SREG;
    16cc:	4f b7       	in	r20, 0x3f	; 63
    cli();
    16ce:	f8 94       	cli
    servos[channel].ticks = value;  
    16d0:	8c 2f       	mov	r24, r28
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	ec 01       	movw	r28, r24
    16d6:	cc 0f       	add	r28, r28
    16d8:	dd 1f       	adc	r29, r29
    16da:	c8 0f       	add	r28, r24
    16dc:	d9 1f       	adc	r29, r25
    16de:	cc 5e       	subi	r28, 0xEC	; 236
    16e0:	dc 4f       	sbci	r29, 0xFC	; 252
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
    16e2:	29 83       	std	Y+1, r18	; 0x01
    16e4:	3a 83       	std	Y+2, r19	; 0x02

    uint8_t oldSREG = SREG;
    cli();
    servos[channel].ticks = value;  
    SREG = oldSREG;   
    16e6:	4f bf       	out	0x3f, r20	; 63
  } 
}
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	08 95       	ret

000016ee <_ZN5Servo5writeEi>:
    finISR(timer);
  }
}

void Servo::write(int value)
{  
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ec 01       	movw	r28, r24
  if(value < MIN_PULSE_WIDTH)
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	60 32       	cpi	r22, 0x20	; 32
    1708:	78 07       	cpc	r23, r24
    170a:	0c f0       	brlt	.+2      	; 0x170e <_ZN5Servo5writeEi+0x20>
    170c:	4f c0       	rjmp	.+158    	; 0x17ac <_ZN5Servo5writeEi+0xbe>
    170e:	77 23       	and	r23, r23
    1710:	14 f4       	brge	.+4      	; 0x1716 <_ZN5Servo5writeEi+0x28>
    1712:	60 e0       	ldi	r22, 0x00	; 0
    1714:	70 e0       	ldi	r23, 0x00	; 0
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
    if(value > 180) value = 180;
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
    1716:	00 d0       	rcall	.+0      	; 0x1718 <_ZN5Servo5writeEi+0x2a>
    1718:	00 d0       	rcall	.+0      	; 0x171a <_ZN5Servo5writeEi+0x2c>
    171a:	ed b7       	in	r30, 0x3d	; 61
    171c:	fe b7       	in	r31, 0x3e	; 62
    171e:	31 96       	adiw	r30, 0x01	; 1
    1720:	65 3b       	cpi	r22, 0xB5	; 181
    1722:	71 05       	cpc	r23, r1
    1724:	14 f0       	brlt	.+4      	; 0x172a <_ZN5Servo5writeEi+0x3c>
    1726:	64 eb       	ldi	r22, 0xB4	; 180
    1728:	70 e0       	ldi	r23, 0x00	; 0
    172a:	cb 01       	movw	r24, r22
    172c:	ac 01       	movw	r20, r24
    172e:	66 27       	eor	r22, r22
    1730:	57 fd       	sbrc	r21, 7
    1732:	60 95       	com	r22
    1734:	76 2f       	mov	r23, r22
    1736:	89 81       	ldd	r24, Y+1	; 0x01
    1738:	99 27       	eor	r25, r25
    173a:	87 fd       	sbrc	r24, 7
    173c:	90 95       	com	r25
    173e:	28 e8       	ldi	r18, 0x88	; 136
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	28 1b       	sub	r18, r24
    1744:	39 0b       	sbc	r19, r25
    1746:	59 01       	movw	r10, r18
    1748:	aa 0c       	add	r10, r10
    174a:	bb 1c       	adc	r11, r11
    174c:	aa 0c       	add	r10, r10
    174e:	bb 1c       	adc	r11, r11
    1750:	cc 24       	eor	r12, r12
    1752:	b7 fc       	sbrc	r11, 7
    1754:	c0 94       	com	r12
    1756:	dc 2c       	mov	r13, r12
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	99 27       	eor	r25, r25
    175c:	87 fd       	sbrc	r24, 7
    175e:	90 95       	com	r25
    1760:	28 e5       	ldi	r18, 0x58	; 88
    1762:	32 e0       	ldi	r19, 0x02	; 2
    1764:	28 1b       	sub	r18, r24
    1766:	39 0b       	sbc	r19, r25
    1768:	c9 01       	movw	r24, r18
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	aa 27       	eor	r26, r26
    1774:	97 fd       	sbrc	r25, 7
    1776:	a0 95       	com	r26
    1778:	ba 2f       	mov	r27, r26
    177a:	80 83       	st	Z, r24
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	a2 83       	std	Z+2, r26	; 0x02
    1780:	b3 83       	std	Z+3, r27	; 0x03
    1782:	cb 01       	movw	r24, r22
    1784:	ba 01       	movw	r22, r20
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	0f 2e       	mov	r0, r31
    178e:	f4 eb       	ldi	r31, 0xB4	; 180
    1790:	ef 2e       	mov	r14, r31
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	ff 2e       	mov	r15, r31
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	0f 2f       	mov	r16, r31
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	1f 2f       	mov	r17, r31
    179e:	f0 2d       	mov	r31, r0
    17a0:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_Z3maplllll>
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
    17ac:	ce 01       	movw	r24, r28
    17ae:	0e 94 21 0b 	call	0x1642	; 0x1642 <_ZN5Servo17writeMicrosecondsEi>
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	08 95       	ret

000017c8 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    17c8:	1f 92       	push	r1
    17ca:	0f 92       	push	r0
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	0f 92       	push	r0
    17d0:	11 24       	eor	r1, r1
    17d2:	2f 93       	push	r18
    17d4:	3f 93       	push	r19
    17d6:	8f 93       	push	r24
    17d8:	9f 93       	push	r25
    17da:	af 93       	push	r26
    17dc:	bf 93       	push	r27
    17de:	80 91 3c 03 	lds	r24, 0x033C
    17e2:	90 91 3d 03 	lds	r25, 0x033D
    17e6:	a0 91 3e 03 	lds	r26, 0x033E
    17ea:	b0 91 3f 03 	lds	r27, 0x033F
    17ee:	30 91 40 03 	lds	r19, 0x0340
    17f2:	01 96       	adiw	r24, 0x01	; 1
    17f4:	a1 1d       	adc	r26, r1
    17f6:	b1 1d       	adc	r27, r1
    17f8:	23 2f       	mov	r18, r19
    17fa:	2d 5f       	subi	r18, 0xFD	; 253
    17fc:	2d 37       	cpi	r18, 0x7D	; 125
    17fe:	20 f0       	brcs	.+8      	; 0x1808 <__vector_16+0x40>
    1800:	2d 57       	subi	r18, 0x7D	; 125
    1802:	01 96       	adiw	r24, 0x01	; 1
    1804:	a1 1d       	adc	r26, r1
    1806:	b1 1d       	adc	r27, r1
    1808:	20 93 40 03 	sts	0x0340, r18
    180c:	80 93 3c 03 	sts	0x033C, r24
    1810:	90 93 3d 03 	sts	0x033D, r25
    1814:	a0 93 3e 03 	sts	0x033E, r26
    1818:	b0 93 3f 03 	sts	0x033F, r27
    181c:	80 91 38 03 	lds	r24, 0x0338
    1820:	90 91 39 03 	lds	r25, 0x0339
    1824:	a0 91 3a 03 	lds	r26, 0x033A
    1828:	b0 91 3b 03 	lds	r27, 0x033B
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	a1 1d       	adc	r26, r1
    1830:	b1 1d       	adc	r27, r1
    1832:	80 93 38 03 	sts	0x0338, r24
    1836:	90 93 39 03 	sts	0x0339, r25
    183a:	a0 93 3a 03 	sts	0x033A, r26
    183e:	b0 93 3b 03 	sts	0x033B, r27
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	3f 91       	pop	r19
    184c:	2f 91       	pop	r18
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	0f 90       	pop	r0
    1854:	1f 90       	pop	r1
    1856:	18 95       	reti

00001858 <millis>:
    1858:	8f b7       	in	r24, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	20 91 3c 03 	lds	r18, 0x033C
    1860:	30 91 3d 03 	lds	r19, 0x033D
    1864:	40 91 3e 03 	lds	r20, 0x033E
    1868:	50 91 3f 03 	lds	r21, 0x033F
    186c:	8f bf       	out	0x3f, r24	; 63
    186e:	b9 01       	movw	r22, r18
    1870:	ca 01       	movw	r24, r20
    1872:	08 95       	ret

00001874 <delay>:
    1874:	9b 01       	movw	r18, r22
    1876:	ac 01       	movw	r20, r24
    1878:	7f b7       	in	r23, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	80 91 38 03 	lds	r24, 0x0338
    1880:	90 91 39 03 	lds	r25, 0x0339
    1884:	a0 91 3a 03 	lds	r26, 0x033A
    1888:	b0 91 3b 03 	lds	r27, 0x033B
    188c:	66 b5       	in	r22, 0x26	; 38
    188e:	a8 9b       	sbis	0x15, 0	; 21
    1890:	05 c0       	rjmp	.+10     	; 0x189c <delay+0x28>
    1892:	6f 3f       	cpi	r22, 0xFF	; 255
    1894:	19 f0       	breq	.+6      	; 0x189c <delay+0x28>
    1896:	01 96       	adiw	r24, 0x01	; 1
    1898:	a1 1d       	adc	r26, r1
    189a:	b1 1d       	adc	r27, r1
    189c:	7f bf       	out	0x3f, r23	; 63
    189e:	ba 2f       	mov	r27, r26
    18a0:	a9 2f       	mov	r26, r25
    18a2:	98 2f       	mov	r25, r24
    18a4:	88 27       	eor	r24, r24
    18a6:	86 0f       	add	r24, r22
    18a8:	91 1d       	adc	r25, r1
    18aa:	a1 1d       	adc	r26, r1
    18ac:	b1 1d       	adc	r27, r1
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	88 0f       	add	r24, r24
    18b2:	99 1f       	adc	r25, r25
    18b4:	aa 1f       	adc	r26, r26
    18b6:	bb 1f       	adc	r27, r27
    18b8:	6a 95       	dec	r22
    18ba:	d1 f7       	brne	.-12     	; 0x18b0 <delay+0x3c>
    18bc:	bc 01       	movw	r22, r24
    18be:	2d c0       	rjmp	.+90     	; 0x191a <delay+0xa6>
    18c0:	ff b7       	in	r31, 0x3f	; 63
    18c2:	f8 94       	cli
    18c4:	80 91 38 03 	lds	r24, 0x0338
    18c8:	90 91 39 03 	lds	r25, 0x0339
    18cc:	a0 91 3a 03 	lds	r26, 0x033A
    18d0:	b0 91 3b 03 	lds	r27, 0x033B
    18d4:	e6 b5       	in	r30, 0x26	; 38
    18d6:	a8 9b       	sbis	0x15, 0	; 21
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <delay+0x70>
    18da:	ef 3f       	cpi	r30, 0xFF	; 255
    18dc:	19 f0       	breq	.+6      	; 0x18e4 <delay+0x70>
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	b1 1d       	adc	r27, r1
    18e4:	ff bf       	out	0x3f, r31	; 63
    18e6:	ba 2f       	mov	r27, r26
    18e8:	a9 2f       	mov	r26, r25
    18ea:	98 2f       	mov	r25, r24
    18ec:	88 27       	eor	r24, r24
    18ee:	8e 0f       	add	r24, r30
    18f0:	91 1d       	adc	r25, r1
    18f2:	a1 1d       	adc	r26, r1
    18f4:	b1 1d       	adc	r27, r1
    18f6:	e2 e0       	ldi	r30, 0x02	; 2
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	aa 1f       	adc	r26, r26
    18fe:	bb 1f       	adc	r27, r27
    1900:	ea 95       	dec	r30
    1902:	d1 f7       	brne	.-12     	; 0x18f8 <delay+0x84>
    1904:	86 1b       	sub	r24, r22
    1906:	97 0b       	sbc	r25, r23
    1908:	88 5e       	subi	r24, 0xE8	; 232
    190a:	93 40       	sbci	r25, 0x03	; 3
    190c:	c8 f2       	brcs	.-78     	; 0x18c0 <delay+0x4c>
    190e:	21 50       	subi	r18, 0x01	; 1
    1910:	30 40       	sbci	r19, 0x00	; 0
    1912:	40 40       	sbci	r20, 0x00	; 0
    1914:	50 40       	sbci	r21, 0x00	; 0
    1916:	68 51       	subi	r22, 0x18	; 24
    1918:	7c 4f       	sbci	r23, 0xFC	; 252
    191a:	21 15       	cp	r18, r1
    191c:	31 05       	cpc	r19, r1
    191e:	41 05       	cpc	r20, r1
    1920:	51 05       	cpc	r21, r1
    1922:	71 f6       	brne	.-100    	; 0x18c0 <delay+0x4c>
    1924:	08 95       	ret

00001926 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1926:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1928:	84 b5       	in	r24, 0x24	; 36
    192a:	82 60       	ori	r24, 0x02	; 2
    192c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    192e:	84 b5       	in	r24, 0x24	; 36
    1930:	81 60       	ori	r24, 0x01	; 1
    1932:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1934:	85 b5       	in	r24, 0x25	; 37
    1936:	82 60       	ori	r24, 0x02	; 2
    1938:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    193a:	85 b5       	in	r24, 0x25	; 37
    193c:	81 60       	ori	r24, 0x01	; 1
    193e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1940:	ee e6       	ldi	r30, 0x6E	; 110
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	81 60       	ori	r24, 0x01	; 1
    1948:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    194a:	e1 e8       	ldi	r30, 0x81	; 129
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1950:	80 81       	ld	r24, Z
    1952:	82 60       	ori	r24, 0x02	; 2
    1954:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1956:	80 81       	ld	r24, Z
    1958:	81 60       	ori	r24, 0x01	; 1
    195a:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    195c:	e0 e8       	ldi	r30, 0x80	; 128
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	81 60       	ori	r24, 0x01	; 1
    1964:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1966:	e1 eb       	ldi	r30, 0xB1	; 177
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	84 60       	ori	r24, 0x04	; 4
    196e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1970:	e0 eb       	ldi	r30, 0xB0	; 176
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	81 60       	ori	r24, 0x01	; 1
    1978:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    197a:	ea e7       	ldi	r30, 0x7A	; 122
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	84 60       	ori	r24, 0x04	; 4
    1982:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1984:	80 81       	ld	r24, Z
    1986:	82 60       	ori	r24, 0x02	; 2
    1988:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    198a:	80 81       	ld	r24, Z
    198c:	81 60       	ori	r24, 0x01	; 1
    198e:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1990:	80 81       	ld	r24, Z
    1992:	80 68       	ori	r24, 0x80	; 128
    1994:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1996:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    199a:	08 95       	ret

0000199c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    19a0:	48 2f       	mov	r20, r24
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	ca 01       	movw	r24, r20
    19a6:	86 56       	subi	r24, 0x66	; 102
    19a8:	9f 4f       	sbci	r25, 0xFF	; 255
    19aa:	fc 01       	movw	r30, r24
    19ac:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    19ae:	4a 57       	subi	r20, 0x7A	; 122
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255
    19b2:	fa 01       	movw	r30, r20
    19b4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    19b6:	88 23       	and	r24, r24
    19b8:	69 f1       	breq	.+90     	; 0x1a14 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	fc 01       	movw	r30, r24
    19c2:	e8 59       	subi	r30, 0x98	; 152
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	a5 91       	lpm	r26, Z+
    19c8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    19ca:	fc 01       	movw	r30, r24
    19cc:	ee 58       	subi	r30, 0x8E	; 142
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	c5 91       	lpm	r28, Z+
    19d2:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    19d4:	66 23       	and	r22, r22
    19d6:	51 f4       	brne	.+20     	; 0x19ec <pinMode+0x50>
		uint8_t oldSREG = SREG;
    19d8:	2f b7       	in	r18, 0x3f	; 63
                cli();
    19da:	f8 94       	cli
		*reg &= ~bit;
    19dc:	8c 91       	ld	r24, X
    19de:	93 2f       	mov	r25, r19
    19e0:	90 95       	com	r25
    19e2:	89 23       	and	r24, r25
    19e4:	8c 93       	st	X, r24
		*out &= ~bit;
    19e6:	88 81       	ld	r24, Y
    19e8:	89 23       	and	r24, r25
    19ea:	0b c0       	rjmp	.+22     	; 0x1a02 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    19ec:	62 30       	cpi	r22, 0x02	; 2
    19ee:	61 f4       	brne	.+24     	; 0x1a08 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    19f0:	2f b7       	in	r18, 0x3f	; 63
                cli();
    19f2:	f8 94       	cli
		*reg &= ~bit;
    19f4:	8c 91       	ld	r24, X
    19f6:	93 2f       	mov	r25, r19
    19f8:	90 95       	com	r25
    19fa:	89 23       	and	r24, r25
    19fc:	8c 93       	st	X, r24
		*out |= bit;
    19fe:	88 81       	ld	r24, Y
    1a00:	83 2b       	or	r24, r19
    1a02:	88 83       	st	Y, r24
		SREG = oldSREG;
    1a04:	2f bf       	out	0x3f, r18	; 63
    1a06:	06 c0       	rjmp	.+12     	; 0x1a14 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1a08:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1a0a:	f8 94       	cli
		*reg |= bit;
    1a0c:	8c 91       	ld	r24, X
    1a0e:	83 2b       	or	r24, r19
    1a10:	8c 93       	st	X, r24
		SREG = oldSREG;
    1a12:	9f bf       	out	0x3f, r25	; 63
	}
}
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	ca 01       	movw	r24, r20
    1a20:	82 55       	subi	r24, 0x52	; 82
    1a22:	9f 4f       	sbci	r25, 0xFF	; 255
    1a24:	fc 01       	movw	r30, r24
    1a26:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1a28:	ca 01       	movw	r24, r20
    1a2a:	86 56       	subi	r24, 0x66	; 102
    1a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a2e:	fc 01       	movw	r30, r24
    1a30:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    1a32:	4a 57       	subi	r20, 0x7A	; 122
    1a34:	5f 4f       	sbci	r21, 0xFF	; 255
    1a36:	fa 01       	movw	r30, r20
    1a38:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1a3a:	33 23       	and	r19, r19
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <digitalWrite+0x26>
    1a3e:	40 c0       	rjmp	.+128    	; 0x1ac0 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1a40:	22 23       	and	r18, r18
    1a42:	51 f1       	breq	.+84     	; 0x1a98 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1a44:	23 30       	cpi	r18, 0x03	; 3
    1a46:	71 f0       	breq	.+28     	; 0x1a64 <digitalWrite+0x4a>
    1a48:	24 30       	cpi	r18, 0x04	; 4
    1a4a:	28 f4       	brcc	.+10     	; 0x1a56 <digitalWrite+0x3c>
    1a4c:	21 30       	cpi	r18, 0x01	; 1
    1a4e:	a1 f0       	breq	.+40     	; 0x1a78 <digitalWrite+0x5e>
    1a50:	22 30       	cpi	r18, 0x02	; 2
    1a52:	11 f5       	brne	.+68     	; 0x1a98 <digitalWrite+0x7e>
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <digitalWrite+0x64>
    1a56:	26 30       	cpi	r18, 0x06	; 6
    1a58:	b1 f0       	breq	.+44     	; 0x1a86 <digitalWrite+0x6c>
    1a5a:	27 30       	cpi	r18, 0x07	; 7
    1a5c:	c1 f0       	breq	.+48     	; 0x1a8e <digitalWrite+0x74>
    1a5e:	24 30       	cpi	r18, 0x04	; 4
    1a60:	d9 f4       	brne	.+54     	; 0x1a98 <digitalWrite+0x7e>
    1a62:	04 c0       	rjmp	.+8      	; 0x1a6c <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1a64:	80 91 80 00 	lds	r24, 0x0080
    1a68:	8f 77       	andi	r24, 0x7F	; 127
    1a6a:	03 c0       	rjmp	.+6      	; 0x1a72 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1a6c:	80 91 80 00 	lds	r24, 0x0080
    1a70:	8f 7d       	andi	r24, 0xDF	; 223
    1a72:	80 93 80 00 	sts	0x0080, r24
    1a76:	10 c0       	rjmp	.+32     	; 0x1a98 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1a78:	84 b5       	in	r24, 0x24	; 36
    1a7a:	8f 77       	andi	r24, 0x7F	; 127
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1a7e:	84 b5       	in	r24, 0x24	; 36
    1a80:	8f 7d       	andi	r24, 0xDF	; 223
    1a82:	84 bd       	out	0x24, r24	; 36
    1a84:	09 c0       	rjmp	.+18     	; 0x1a98 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1a86:	80 91 b0 00 	lds	r24, 0x00B0
    1a8a:	8f 77       	andi	r24, 0x7F	; 127
    1a8c:	03 c0       	rjmp	.+6      	; 0x1a94 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1a8e:	80 91 b0 00 	lds	r24, 0x00B0
    1a92:	8f 7d       	andi	r24, 0xDF	; 223
    1a94:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    1a98:	e3 2f       	mov	r30, r19
    1a9a:	f0 e0       	ldi	r31, 0x00	; 0
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	ee 58       	subi	r30, 0x8E	; 142
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	a5 91       	lpm	r26, Z+
    1aa6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1aa8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    1aaa:	f8 94       	cli

	if (val == LOW) {
    1aac:	66 23       	and	r22, r22
    1aae:	21 f4       	brne	.+8      	; 0x1ab8 <digitalWrite+0x9e>
		*out &= ~bit;
    1ab0:	8c 91       	ld	r24, X
    1ab2:	90 95       	com	r25
    1ab4:	89 23       	and	r24, r25
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1ab8:	8c 91       	ld	r24, X
    1aba:	89 2b       	or	r24, r25
    1abc:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1abe:	2f bf       	out	0x3f, r18	; 63
    1ac0:	08 95       	ret

00001ac2 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1ac2:	68 2f       	mov	r22, r24
    1ac4:	70 e0       	ldi	r23, 0x00	; 0
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	82 55       	subi	r24, 0x52	; 82
    1aca:	9f 4f       	sbci	r25, 0xFF	; 255
    1acc:	fc 01       	movw	r30, r24
    1ace:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	86 56       	subi	r24, 0x66	; 102
    1ad4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    1ada:	6a 57       	subi	r22, 0x7A	; 122
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	fb 01       	movw	r30, r22
    1ae0:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
    1ae2:	99 23       	and	r25, r25
    1ae4:	19 f4       	brne	.+6      	; 0x1aec <digitalRead+0x2a>
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	3c c0       	rjmp	.+120    	; 0x1b64 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1aec:	22 23       	and	r18, r18
    1aee:	51 f1       	breq	.+84     	; 0x1b44 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1af0:	23 30       	cpi	r18, 0x03	; 3
    1af2:	71 f0       	breq	.+28     	; 0x1b10 <digitalRead+0x4e>
    1af4:	24 30       	cpi	r18, 0x04	; 4
    1af6:	28 f4       	brcc	.+10     	; 0x1b02 <digitalRead+0x40>
    1af8:	21 30       	cpi	r18, 0x01	; 1
    1afa:	a1 f0       	breq	.+40     	; 0x1b24 <digitalRead+0x62>
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	11 f5       	brne	.+68     	; 0x1b44 <digitalRead+0x82>
    1b00:	14 c0       	rjmp	.+40     	; 0x1b2a <digitalRead+0x68>
    1b02:	26 30       	cpi	r18, 0x06	; 6
    1b04:	b1 f0       	breq	.+44     	; 0x1b32 <digitalRead+0x70>
    1b06:	27 30       	cpi	r18, 0x07	; 7
    1b08:	c1 f0       	breq	.+48     	; 0x1b3a <digitalRead+0x78>
    1b0a:	24 30       	cpi	r18, 0x04	; 4
    1b0c:	d9 f4       	brne	.+54     	; 0x1b44 <digitalRead+0x82>
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1b10:	80 91 80 00 	lds	r24, 0x0080
    1b14:	8f 77       	andi	r24, 0x7F	; 127
    1b16:	03 c0       	rjmp	.+6      	; 0x1b1e <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1b18:	80 91 80 00 	lds	r24, 0x0080
    1b1c:	8f 7d       	andi	r24, 0xDF	; 223
    1b1e:	80 93 80 00 	sts	0x0080, r24
    1b22:	10 c0       	rjmp	.+32     	; 0x1b44 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1b24:	84 b5       	in	r24, 0x24	; 36
    1b26:	8f 77       	andi	r24, 0x7F	; 127
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1b2a:	84 b5       	in	r24, 0x24	; 36
    1b2c:	8f 7d       	andi	r24, 0xDF	; 223
    1b2e:	84 bd       	out	0x24, r24	; 36
    1b30:	09 c0       	rjmp	.+18     	; 0x1b44 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1b32:	80 91 b0 00 	lds	r24, 0x00B0
    1b36:	8f 77       	andi	r24, 0x7F	; 127
    1b38:	03 c0       	rjmp	.+6      	; 0x1b40 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1b3a:	80 91 b0 00 	lds	r24, 0x00B0
    1b3e:	8f 7d       	andi	r24, 0xDF	; 223
    1b40:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1b44:	89 2f       	mov	r24, r25
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	84 58       	subi	r24, 0x84	; 132
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	fc 01       	movw	r30, r24
    1b52:	a5 91       	lpm	r26, Z+
    1b54:	b4 91       	lpm	r27, Z
    1b56:	8c 91       	ld	r24, X
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	84 23       	and	r24, r20
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <digitalRead+0xa2>
    1b60:	21 e0       	ldi	r18, 0x01	; 1
    1b62:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1b64:	c9 01       	movw	r24, r18
    1b66:	08 95       	ret

00001b68 <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    1b68:	08 95       	ret

00001b6a <__vector_18>:
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	4f 93       	push	r20
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	ef 93       	push	r30
    1b80:	ff 93       	push	r31
    1b82:	80 91 c0 00 	lds	r24, 0x00C0
    1b86:	82 fd       	sbrc	r24, 2
    1b88:	1d c0       	rjmp	.+58     	; 0x1bc4 <__vector_18+0x5a>
    1b8a:	40 91 c6 00 	lds	r20, 0x00C6
    1b8e:	20 91 81 03 	lds	r18, 0x0381
    1b92:	30 91 82 03 	lds	r19, 0x0382
    1b96:	2f 5f       	subi	r18, 0xFF	; 255
    1b98:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9a:	2f 73       	andi	r18, 0x3F	; 63
    1b9c:	30 70       	andi	r19, 0x00	; 0
    1b9e:	80 91 83 03 	lds	r24, 0x0383
    1ba2:	90 91 84 03 	lds	r25, 0x0384
    1ba6:	28 17       	cp	r18, r24
    1ba8:	39 07       	cpc	r19, r25
    1baa:	71 f0       	breq	.+28     	; 0x1bc8 <__vector_18+0x5e>
    1bac:	e0 91 81 03 	lds	r30, 0x0381
    1bb0:	f0 91 82 03 	lds	r31, 0x0382
    1bb4:	ef 5b       	subi	r30, 0xBF	; 191
    1bb6:	fc 4f       	sbci	r31, 0xFC	; 252
    1bb8:	40 83       	st	Z, r20
    1bba:	30 93 82 03 	sts	0x0382, r19
    1bbe:	20 93 81 03 	sts	0x0381, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <__vector_18+0x5e>
    1bc4:	80 91 c6 00 	lds	r24, 0x00C6
    1bc8:	ff 91       	pop	r31
    1bca:	ef 91       	pop	r30
    1bcc:	9f 91       	pop	r25
    1bce:	8f 91       	pop	r24
    1bd0:	4f 91       	pop	r20
    1bd2:	3f 91       	pop	r19
    1bd4:	2f 91       	pop	r18
    1bd6:	0f 90       	pop	r0
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	0f 90       	pop	r0
    1bdc:	1f 90       	pop	r1
    1bde:	18 95       	reti

00001be0 <_Z14serialEventRunv>:
    1be0:	e0 91 d5 03 	lds	r30, 0x03D5
    1be4:	f0 91 d6 03 	lds	r31, 0x03D6
    1be8:	e0 5c       	subi	r30, 0xC0	; 192
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	81 91       	ld	r24, Z+
    1bee:	91 91       	ld	r25, Z+
    1bf0:	20 81       	ld	r18, Z
    1bf2:	31 81       	ldd	r19, Z+1	; 0x01
    1bf4:	82 1b       	sub	r24, r18
    1bf6:	93 0b       	sbc	r25, r19
    1bf8:	8f 73       	andi	r24, 0x3F	; 63
    1bfa:	90 70       	andi	r25, 0x00	; 0
    1bfc:	89 2b       	or	r24, r25
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <_Z14serialEventRunv+0x24>
    1c00:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <_Z11serialEventv>
    1c04:	08 95       	ret

00001c06 <__vector_19>:
    1c06:	1f 92       	push	r1
    1c08:	0f 92       	push	r0
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	0f 92       	push	r0
    1c0e:	11 24       	eor	r1, r1
    1c10:	2f 93       	push	r18
    1c12:	3f 93       	push	r19
    1c14:	8f 93       	push	r24
    1c16:	9f 93       	push	r25
    1c18:	ef 93       	push	r30
    1c1a:	ff 93       	push	r31
    1c1c:	20 91 c5 03 	lds	r18, 0x03C5
    1c20:	30 91 c6 03 	lds	r19, 0x03C6
    1c24:	80 91 c7 03 	lds	r24, 0x03C7
    1c28:	90 91 c8 03 	lds	r25, 0x03C8
    1c2c:	28 17       	cp	r18, r24
    1c2e:	39 07       	cpc	r19, r25
    1c30:	31 f4       	brne	.+12     	; 0x1c3e <__vector_19+0x38>
    1c32:	80 91 c1 00 	lds	r24, 0x00C1
    1c36:	8f 7d       	andi	r24, 0xDF	; 223
    1c38:	80 93 c1 00 	sts	0x00C1, r24
    1c3c:	14 c0       	rjmp	.+40     	; 0x1c66 <__vector_19+0x60>
    1c3e:	e0 91 c7 03 	lds	r30, 0x03C7
    1c42:	f0 91 c8 03 	lds	r31, 0x03C8
    1c46:	eb 57       	subi	r30, 0x7B	; 123
    1c48:	fc 4f       	sbci	r31, 0xFC	; 252
    1c4a:	20 81       	ld	r18, Z
    1c4c:	80 91 c7 03 	lds	r24, 0x03C7
    1c50:	90 91 c8 03 	lds	r25, 0x03C8
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	8f 73       	andi	r24, 0x3F	; 63
    1c58:	90 70       	andi	r25, 0x00	; 0
    1c5a:	90 93 c8 03 	sts	0x03C8, r25
    1c5e:	80 93 c7 03 	sts	0x03C7, r24
    1c62:	20 93 c6 00 	sts	0x00C6, r18
    1c66:	ff 91       	pop	r31
    1c68:	ef 91       	pop	r30
    1c6a:	9f 91       	pop	r25
    1c6c:	8f 91       	pop	r24
    1c6e:	3f 91       	pop	r19
    1c70:	2f 91       	pop	r18
    1c72:	0f 90       	pop	r0
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	0f 90       	pop	r0
    1c78:	1f 90       	pop	r1
    1c7a:	18 95       	reti

00001c7c <_ZN14HardwareSerial5beginEm>:
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	7a 01       	movw	r14, r20
    1c92:	8b 01       	movw	r16, r22
    1c94:	dd 24       	eor	r13, r13
    1c96:	40 30       	cpi	r20, 0x00	; 0
    1c98:	81 ee       	ldi	r24, 0xE1	; 225
    1c9a:	58 07       	cpc	r21, r24
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	68 07       	cpc	r22, r24
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	78 07       	cpc	r23, r24
    1ca4:	11 f0       	breq	.+4      	; 0x1caa <_ZN14HardwareSerial5beginEm+0x2e>
    1ca6:	dd 24       	eor	r13, r13
    1ca8:	d3 94       	inc	r13
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	a9 2e       	mov	r10, r25
    1cae:	b1 2c       	mov	r11, r1
    1cb0:	ec 89       	ldd	r30, Y+20	; 0x14
    1cb2:	fd 89       	ldd	r31, Y+21	; 0x15
    1cb4:	dd 20       	and	r13, r13
    1cb6:	69 f0       	breq	.+26     	; 0x1cd2 <_ZN14HardwareSerial5beginEm+0x56>
    1cb8:	c5 01       	movw	r24, r10
    1cba:	08 a0       	lds	r16, 0x88
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <_ZN14HardwareSerial5beginEm+0x46>
    1cbe:	88 0f       	add	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	0a 94       	dec	r0
    1cc4:	e2 f7       	brpl	.-8      	; 0x1cbe <_ZN14HardwareSerial5beginEm+0x42>
    1cc6:	80 83       	st	Z, r24
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	79 e0       	ldi	r23, 0x09	; 9
    1ccc:	8d e3       	ldi	r24, 0x3D	; 61
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	05 c0       	rjmp	.+10     	; 0x1cdc <_ZN14HardwareSerial5beginEm+0x60>
    1cd2:	10 82       	st	Z, r1
    1cd4:	60 e8       	ldi	r22, 0x80	; 128
    1cd6:	74 e8       	ldi	r23, 0x84	; 132
    1cd8:	8e e1       	ldi	r24, 0x1E	; 30
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a8 01       	movw	r20, r16
    1cde:	97 01       	movw	r18, r14
    1ce0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodsi4>
    1ce4:	21 50       	subi	r18, 0x01	; 1
    1ce6:	30 40       	sbci	r19, 0x00	; 0
    1ce8:	40 40       	sbci	r20, 0x00	; 0
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	56 95       	lsr	r21
    1cee:	47 95       	ror	r20
    1cf0:	37 95       	ror	r19
    1cf2:	27 95       	ror	r18
    1cf4:	80 e1       	ldi	r24, 0x10	; 16
    1cf6:	20 30       	cpi	r18, 0x00	; 0
    1cf8:	38 07       	cpc	r19, r24
    1cfa:	20 f0       	brcs	.+8      	; 0x1d04 <_ZN14HardwareSerial5beginEm+0x88>
    1cfc:	dd 20       	and	r13, r13
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <_ZN14HardwareSerial5beginEm+0x88>
    1d00:	dd 24       	eor	r13, r13
    1d02:	d6 cf       	rjmp	.-84     	; 0x1cb0 <_ZN14HardwareSerial5beginEm+0x34>
    1d04:	e8 89       	ldd	r30, Y+16	; 0x10
    1d06:	f9 89       	ldd	r31, Y+17	; 0x11
    1d08:	30 83       	st	Z, r19
    1d0a:	ea 89       	ldd	r30, Y+18	; 0x12
    1d0c:	fb 89       	ldd	r31, Y+19	; 0x13
    1d0e:	20 83       	st	Z, r18
    1d10:	19 a2       	lds	r17, 0x99
    1d12:	ee 89       	ldd	r30, Y+22	; 0x16
    1d14:	ff 89       	ldd	r31, Y+23	; 0x17
    1d16:	40 81       	ld	r20, Z
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	c9 01       	movw	r24, r18
    1d1e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <_ZN14HardwareSerial5beginEm+0xaa>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	0a 94       	dec	r0
    1d28:	e2 f7       	brpl	.-8      	; 0x1d22 <_ZN14HardwareSerial5beginEm+0xa6>
    1d2a:	48 2b       	or	r20, r24
    1d2c:	40 83       	st	Z, r20
    1d2e:	ee 89       	ldd	r30, Y+22	; 0x16
    1d30:	ff 89       	ldd	r31, Y+23	; 0x17
    1d32:	40 81       	ld	r20, Z
    1d34:	c9 01       	movw	r24, r18
    1d36:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <_ZN14HardwareSerial5beginEm+0xc2>
    1d3a:	88 0f       	add	r24, r24
    1d3c:	99 1f       	adc	r25, r25
    1d3e:	0a 94       	dec	r0
    1d40:	e2 f7       	brpl	.-8      	; 0x1d3a <_ZN14HardwareSerial5beginEm+0xbe>
    1d42:	48 2b       	or	r20, r24
    1d44:	40 83       	st	Z, r20
    1d46:	ee 89       	ldd	r30, Y+22	; 0x16
    1d48:	ff 89       	ldd	r31, Y+23	; 0x17
    1d4a:	40 81       	ld	r20, Z
    1d4c:	c9 01       	movw	r24, r18
    1d4e:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <_ZN14HardwareSerial5beginEm+0xda>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <_ZN14HardwareSerial5beginEm+0xd6>
    1d5a:	48 2b       	or	r20, r24
    1d5c:	40 83       	st	Z, r20
    1d5e:	ee 89       	ldd	r30, Y+22	; 0x16
    1d60:	ff 89       	ldd	r31, Y+23	; 0x17
    1d62:	80 81       	ld	r24, Z
    1d64:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <_ZN14HardwareSerial5beginEm+0xf0>
    1d68:	22 0f       	add	r18, r18
    1d6a:	33 1f       	adc	r19, r19
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <_ZN14HardwareSerial5beginEm+0xec>
    1d70:	20 95       	com	r18
    1d72:	28 23       	and	r18, r24
    1d74:	20 83       	st	Z, r18
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	bf 90       	pop	r11
    1d86:	af 90       	pop	r10
    1d88:	08 95       	ret

00001d8a <_ZN14HardwareSerial9availableEv>:
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	1c 96       	adiw	r26, 0x0c	; 12
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	1d 97       	sbiw	r26, 0x0d	; 13
    1d94:	e0 5c       	subi	r30, 0xC0	; 192
    1d96:	ff 4f       	sbci	r31, 0xFF	; 255
    1d98:	21 91       	ld	r18, Z+
    1d9a:	31 91       	ld	r19, Z+
    1d9c:	80 81       	ld	r24, Z
    1d9e:	91 81       	ldd	r25, Z+1	; 0x01
    1da0:	28 1b       	sub	r18, r24
    1da2:	39 0b       	sbc	r19, r25
    1da4:	2f 73       	andi	r18, 0x3F	; 63
    1da6:	30 70       	andi	r19, 0x00	; 0
    1da8:	c9 01       	movw	r24, r18
    1daa:	08 95       	ret

00001dac <_ZN14HardwareSerial4peekEv>:
    1dac:	dc 01       	movw	r26, r24
    1dae:	1c 96       	adiw	r26, 0x0c	; 12
    1db0:	ed 91       	ld	r30, X+
    1db2:	fc 91       	ld	r31, X
    1db4:	1d 97       	sbiw	r26, 0x0d	; 13
    1db6:	e0 5c       	subi	r30, 0xC0	; 192
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	20 81       	ld	r18, Z
    1dbc:	31 81       	ldd	r19, Z+1	; 0x01
    1dbe:	e0 54       	subi	r30, 0x40	; 64
    1dc0:	f0 40       	sbci	r31, 0x00	; 0
    1dc2:	df 01       	movw	r26, r30
    1dc4:	ae 5b       	subi	r26, 0xBE	; 190
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	8d 91       	ld	r24, X+
    1dca:	9c 91       	ld	r25, X
    1dcc:	11 97       	sbiw	r26, 0x01	; 1
    1dce:	28 17       	cp	r18, r24
    1dd0:	39 07       	cpc	r19, r25
    1dd2:	19 f4       	brne	.+6      	; 0x1dda <_ZN14HardwareSerial4peekEv+0x2e>
    1dd4:	2f ef       	ldi	r18, 0xFF	; 255
    1dd6:	3f ef       	ldi	r19, 0xFF	; 255
    1dd8:	07 c0       	rjmp	.+14     	; 0x1de8 <_ZN14HardwareSerial4peekEv+0x3c>
    1dda:	8d 91       	ld	r24, X+
    1ddc:	9c 91       	ld	r25, X
    1dde:	e8 0f       	add	r30, r24
    1de0:	f9 1f       	adc	r31, r25
    1de2:	80 81       	ld	r24, Z
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	c9 01       	movw	r24, r18
    1dea:	08 95       	ret

00001dec <_ZN14HardwareSerial4readEv>:
    1dec:	dc 01       	movw	r26, r24
    1dee:	1c 96       	adiw	r26, 0x0c	; 12
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	1d 97       	sbiw	r26, 0x0d	; 13
    1df6:	e0 5c       	subi	r30, 0xC0	; 192
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	20 81       	ld	r18, Z
    1dfc:	31 81       	ldd	r19, Z+1	; 0x01
    1dfe:	e0 54       	subi	r30, 0x40	; 64
    1e00:	f0 40       	sbci	r31, 0x00	; 0
    1e02:	df 01       	movw	r26, r30
    1e04:	ae 5b       	subi	r26, 0xBE	; 190
    1e06:	bf 4f       	sbci	r27, 0xFF	; 255
    1e08:	8d 91       	ld	r24, X+
    1e0a:	9c 91       	ld	r25, X
    1e0c:	11 97       	sbiw	r26, 0x01	; 1
    1e0e:	28 17       	cp	r18, r24
    1e10:	39 07       	cpc	r19, r25
    1e12:	19 f4       	brne	.+6      	; 0x1e1a <_ZN14HardwareSerial4readEv+0x2e>
    1e14:	2f ef       	ldi	r18, 0xFF	; 255
    1e16:	3f ef       	ldi	r19, 0xFF	; 255
    1e18:	10 c0       	rjmp	.+32     	; 0x1e3a <_ZN14HardwareSerial4readEv+0x4e>
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	11 97       	sbiw	r26, 0x01	; 1
    1e20:	e8 0f       	add	r30, r24
    1e22:	f9 1f       	adc	r31, r25
    1e24:	20 81       	ld	r18, Z
    1e26:	8d 91       	ld	r24, X+
    1e28:	9c 91       	ld	r25, X
    1e2a:	11 97       	sbiw	r26, 0x01	; 1
    1e2c:	01 96       	adiw	r24, 0x01	; 1
    1e2e:	8f 73       	andi	r24, 0x3F	; 63
    1e30:	90 70       	andi	r25, 0x00	; 0
    1e32:	11 96       	adiw	r26, 0x01	; 1
    1e34:	9c 93       	st	X, r25
    1e36:	8e 93       	st	-X, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	08 95       	ret

00001e3e <_ZN14HardwareSerial5flushEv>:
    1e3e:	dc 01       	movw	r26, r24
    1e40:	91 96       	adiw	r26, 0x21	; 33
    1e42:	8c 91       	ld	r24, X
    1e44:	91 97       	sbiw	r26, 0x21	; 33
    1e46:	88 23       	and	r24, r24
    1e48:	39 f0       	breq	.+14     	; 0x1e58 <_ZN14HardwareSerial5flushEv+0x1a>
    1e4a:	54 96       	adiw	r26, 0x14	; 20
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
    1e50:	55 97       	sbiw	r26, 0x15	; 21
    1e52:	80 81       	ld	r24, Z
    1e54:	86 ff       	sbrs	r24, 6
    1e56:	f9 cf       	rjmp	.-14     	; 0x1e4a <_ZN14HardwareSerial5flushEv+0xc>
    1e58:	91 96       	adiw	r26, 0x21	; 33
    1e5a:	1c 92       	st	X, r1
    1e5c:	08 95       	ret

00001e5e <_ZN14HardwareSerial5writeEh>:
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	ec 01       	movw	r28, r24
    1e64:	ee 85       	ldd	r30, Y+14	; 0x0e
    1e66:	ff 85       	ldd	r31, Y+15	; 0x0f
    1e68:	e0 5c       	subi	r30, 0xC0	; 192
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	20 81       	ld	r18, Z
    1e6e:	31 81       	ldd	r19, Z+1	; 0x01
    1e70:	e0 54       	subi	r30, 0x40	; 64
    1e72:	f0 40       	sbci	r31, 0x00	; 0
    1e74:	2f 5f       	subi	r18, 0xFF	; 255
    1e76:	3f 4f       	sbci	r19, 0xFF	; 255
    1e78:	2f 73       	andi	r18, 0x3F	; 63
    1e7a:	30 70       	andi	r19, 0x00	; 0
    1e7c:	df 01       	movw	r26, r30
    1e7e:	ae 5b       	subi	r26, 0xBE	; 190
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	8d 91       	ld	r24, X+
    1e84:	9c 91       	ld	r25, X
    1e86:	11 97       	sbiw	r26, 0x01	; 1
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	d1 f3       	breq	.-12     	; 0x1e82 <_ZN14HardwareSerial5writeEh+0x24>
    1e8e:	e0 5c       	subi	r30, 0xC0	; 192
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	e0 54       	subi	r30, 0x40	; 64
    1e98:	f0 40       	sbci	r31, 0x00	; 0
    1e9a:	e8 0f       	add	r30, r24
    1e9c:	f9 1f       	adc	r31, r25
    1e9e:	60 83       	st	Z, r22
    1ea0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1ea2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1ea4:	e0 5c       	subi	r30, 0xC0	; 192
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	31 83       	std	Z+1, r19	; 0x01
    1eaa:	20 83       	st	Z, r18
    1eac:	ee 89       	ldd	r30, Y+22	; 0x16
    1eae:	ff 89       	ldd	r31, Y+23	; 0x17
    1eb0:	20 81       	ld	r18, Z
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <_ZN14HardwareSerial5writeEh+0x60>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	0a 94       	dec	r0
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <_ZN14HardwareSerial5writeEh+0x5c>
    1ec2:	28 2b       	or	r18, r24
    1ec4:	20 83       	st	Z, r18
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	89 a3       	lds	r24, 0x59
    1eca:	ec 89       	ldd	r30, Y+20	; 0x14
    1ecc:	fd 89       	ldd	r31, Y+21	; 0x15
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 64       	ori	r24, 0x40	; 64
    1ed2:	80 83       	st	Z, r24
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	08 95       	ret

00001ede <_GLOBAL__I_rx_buffer>:
    1ede:	10 92 cc 03 	sts	0x03CC, r1
    1ee2:	10 92 cb 03 	sts	0x03CB, r1
    1ee6:	88 ee       	ldi	r24, 0xE8	; 232
    1ee8:	93 e0       	ldi	r25, 0x03	; 3
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	80 93 cd 03 	sts	0x03CD, r24
    1ef2:	90 93 ce 03 	sts	0x03CE, r25
    1ef6:	a0 93 cf 03 	sts	0x03CF, r26
    1efa:	b0 93 d0 03 	sts	0x03D0, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1efe:	8b ec       	ldi	r24, 0xCB	; 203
    1f00:	92 e0       	ldi	r25, 0x02	; 2
    1f02:	90 93 ca 03 	sts	0x03CA, r25
    1f06:	80 93 c9 03 	sts	0x03C9, r24
{
  _rx_buffer = rx_buffer;
    1f0a:	81 e4       	ldi	r24, 0x41	; 65
    1f0c:	93 e0       	ldi	r25, 0x03	; 3
    1f0e:	90 93 d6 03 	sts	0x03D6, r25
    1f12:	80 93 d5 03 	sts	0x03D5, r24
  _tx_buffer = tx_buffer;
    1f16:	85 e8       	ldi	r24, 0x85	; 133
    1f18:	93 e0       	ldi	r25, 0x03	; 3
    1f1a:	90 93 d8 03 	sts	0x03D8, r25
    1f1e:	80 93 d7 03 	sts	0x03D7, r24
  _ubrrh = ubrrh;
    1f22:	85 ec       	ldi	r24, 0xC5	; 197
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	90 93 da 03 	sts	0x03DA, r25
    1f2a:	80 93 d9 03 	sts	0x03D9, r24
  _ubrrl = ubrrl;
    1f2e:	84 ec       	ldi	r24, 0xC4	; 196
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	90 93 dc 03 	sts	0x03DC, r25
    1f36:	80 93 db 03 	sts	0x03DB, r24
  _ucsra = ucsra;
    1f3a:	80 ec       	ldi	r24, 0xC0	; 192
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	90 93 de 03 	sts	0x03DE, r25
    1f42:	80 93 dd 03 	sts	0x03DD, r24
  _ucsrb = ucsrb;
    1f46:	81 ec       	ldi	r24, 0xC1	; 193
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	90 93 e0 03 	sts	0x03E0, r25
    1f4e:	80 93 df 03 	sts	0x03DF, r24
  _ucsrc = ucsrc;
    1f52:	82 ec       	ldi	r24, 0xC2	; 194
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	90 93 e2 03 	sts	0x03E2, r25
    1f5a:	80 93 e1 03 	sts	0x03E1, r24
  _udr = udr;
    1f5e:	86 ec       	ldi	r24, 0xC6	; 198
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	90 93 e4 03 	sts	0x03E4, r25
    1f66:	80 93 e3 03 	sts	0x03E3, r24
  _rxen = rxen;
    1f6a:	84 e0       	ldi	r24, 0x04	; 4
    1f6c:	80 93 e5 03 	sts	0x03E5, r24
  _txen = txen;
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	80 93 e6 03 	sts	0x03E6, r24
  _rxcie = rxcie;
    1f76:	87 e0       	ldi	r24, 0x07	; 7
    1f78:	80 93 e7 03 	sts	0x03E7, r24
  _udrie = udrie;
    1f7c:	85 e0       	ldi	r24, 0x05	; 5
    1f7e:	80 93 e8 03 	sts	0x03E8, r24
  _u2x = u2x;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	80 93 e9 03 	sts	0x03E9, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1f88:	08 95       	ret

00001f8a <main>:
#include <Arduino.h>

int main(void)
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
{
	init();
    1f8e:	0e 94 93 0c 	call	0x1926	; 0x1926 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1f92:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1f96:	c0 ef       	ldi	r28, 0xF0	; 240
    1f98:	dd e0       	ldi	r29, 0x0D	; 13
#endif
	
	setup();
    
	for (;;) {
		loop();
    1f9a:	0e 94 22 03 	call	0x644	; 0x644 <loop>
		if (serialEventRun) serialEventRun();
    1f9e:	20 97       	sbiw	r28, 0x00	; 0
    1fa0:	e1 f3       	breq	.-8      	; 0x1f9a <main+0x10>
    1fa2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <_Z14serialEventRunv>
    1fa6:	f9 cf       	rjmp	.-14     	; 0x1f9a <main+0x10>

00001fa8 <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	7c 01       	movw	r14, r24
    1fba:	6b 01       	movw	r12, r22
    1fbc:	8a 01       	movw	r16, r20
    1fbe:	c0 e0       	ldi	r28, 0x00	; 0
    1fc0:	d0 e0       	ldi	r29, 0x00	; 0
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <_ZN5Print5writeEPKhj+0x3a>
    1fc4:	d6 01       	movw	r26, r12
    1fc6:	6d 91       	ld	r22, X+
    1fc8:	6d 01       	movw	r12, r26
    1fca:	d7 01       	movw	r26, r14
    1fcc:	ed 91       	ld	r30, X+
    1fce:	fc 91       	ld	r31, X
    1fd0:	01 90       	ld	r0, Z+
    1fd2:	f0 81       	ld	r31, Z
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	c7 01       	movw	r24, r14
    1fd8:	09 95       	icall
    1fda:	c8 0f       	add	r28, r24
    1fdc:	d9 1f       	adc	r29, r25
    1fde:	01 50       	subi	r16, 0x01	; 1
    1fe0:	10 40       	sbci	r17, 0x00	; 0
    1fe2:	01 15       	cp	r16, r1
    1fe4:	11 05       	cpc	r17, r1
    1fe6:	71 f7       	brne	.-36     	; 0x1fc4 <_ZN5Print5writeEPKhj+0x1c>
    1fe8:	ce 01       	movw	r24, r28
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	08 95       	ret

00001ffc <_ZN5Print7printlnEv>:
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	8c 01       	movw	r16, r24
    2006:	dc 01       	movw	r26, r24
    2008:	ed 91       	ld	r30, X+
    200a:	fc 91       	ld	r31, X
    200c:	01 90       	ld	r0, Z+
    200e:	f0 81       	ld	r31, Z
    2010:	e0 2d       	mov	r30, r0
    2012:	6d e0       	ldi	r22, 0x0D	; 13
    2014:	09 95       	icall
    2016:	7c 01       	movw	r14, r24
    2018:	d8 01       	movw	r26, r16
    201a:	ed 91       	ld	r30, X+
    201c:	fc 91       	ld	r31, X
    201e:	01 90       	ld	r0, Z+
    2020:	f0 81       	ld	r31, Z
    2022:	e0 2d       	mov	r30, r0
    2024:	c8 01       	movw	r24, r16
    2026:	6a e0       	ldi	r22, 0x0A	; 10
    2028:	09 95       	icall
    202a:	9c 01       	movw	r18, r24
    202c:	2e 0d       	add	r18, r14
    202e:	3f 1d       	adc	r19, r15
    2030:	c9 01       	movw	r24, r18
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	ff 90       	pop	r15
    2038:	ef 90       	pop	r14
    203a:	08 95       	ret

0000203c <_ZN5Print5writeEPKc>:
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	61 15       	cp	r22, r1
    2044:	71 05       	cpc	r23, r1
    2046:	19 f4       	brne	.+6      	; 0x204e <_ZN5Print5writeEPKc+0x12>
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	0f c0       	rjmp	.+30     	; 0x206c <_ZN5Print5writeEPKc+0x30>
    204e:	db 01       	movw	r26, r22
    2050:	0d 90       	ld	r0, X+
    2052:	00 20       	and	r0, r0
    2054:	e9 f7       	brne	.-6      	; 0x2050 <_ZN5Print5writeEPKc+0x14>
    2056:	11 97       	sbiw	r26, 0x01	; 1
    2058:	a6 1b       	sub	r26, r22
    205a:	b7 0b       	sbc	r27, r23
    205c:	e8 81       	ld	r30, Y
    205e:	f9 81       	ldd	r31, Y+1	; 0x01
    2060:	02 80       	ldd	r0, Z+2	; 0x02
    2062:	f3 81       	ldd	r31, Z+3	; 0x03
    2064:	e0 2d       	mov	r30, r0
    2066:	ad 01       	movw	r20, r26
    2068:	09 95       	icall
    206a:	9c 01       	movw	r18, r24
    206c:	c9 01       	movw	r24, r18
    206e:	df 91       	pop	r29
    2070:	cf 91       	pop	r28
    2072:	08 95       	ret

00002074 <_ZN5Print11printNumberEmh>:
    2074:	4f 92       	push	r4
    2076:	5f 92       	push	r5
    2078:	7f 92       	push	r7
    207a:	8f 92       	push	r8
    207c:	9f 92       	push	r9
    207e:	af 92       	push	r10
    2080:	bf 92       	push	r11
    2082:	cf 92       	push	r12
    2084:	df 92       	push	r13
    2086:	ef 92       	push	r14
    2088:	ff 92       	push	r15
    208a:	0f 93       	push	r16
    208c:	1f 93       	push	r17
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
    2096:	a1 97       	sbiw	r28, 0x21	; 33
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	2c 01       	movw	r4, r24
    20a4:	74 2e       	mov	r7, r20
    20a6:	cb 01       	movw	r24, r22
    20a8:	22 30       	cpi	r18, 0x02	; 2
    20aa:	08 f4       	brcc	.+2      	; 0x20ae <_ZN5Print11printNumberEmh+0x3a>
    20ac:	2a e0       	ldi	r18, 0x0A	; 10
    20ae:	19 a2       	lds	r17, 0x99
    20b0:	31 e2       	ldi	r19, 0x21	; 33
    20b2:	c3 2e       	mov	r12, r19
    20b4:	d1 2c       	mov	r13, r1
    20b6:	cc 0e       	add	r12, r28
    20b8:	dd 1e       	adc	r13, r29
    20ba:	82 2e       	mov	r8, r18
    20bc:	99 24       	eor	r9, r9
    20be:	aa 24       	eor	r10, r10
    20c0:	bb 24       	eor	r11, r11
    20c2:	67 2d       	mov	r22, r7
    20c4:	75 2f       	mov	r23, r21
    20c6:	a5 01       	movw	r20, r10
    20c8:	94 01       	movw	r18, r8
    20ca:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodsi4>
    20ce:	79 01       	movw	r14, r18
    20d0:	8a 01       	movw	r16, r20
    20d2:	c8 01       	movw	r24, r16
    20d4:	b7 01       	movw	r22, r14
    20d6:	a5 01       	movw	r20, r10
    20d8:	94 01       	movw	r18, r8
    20da:	0e 94 bb 14 	call	0x2976	; 0x2976 <__mulsi3>
    20de:	47 2d       	mov	r20, r7
    20e0:	46 1b       	sub	r20, r22
    20e2:	08 94       	sec
    20e4:	c1 08       	sbc	r12, r1
    20e6:	d1 08       	sbc	r13, r1
    20e8:	4a 30       	cpi	r20, 0x0A	; 10
    20ea:	14 f4       	brge	.+4      	; 0x20f0 <_ZN5Print11printNumberEmh+0x7c>
    20ec:	40 5d       	subi	r20, 0xD0	; 208
    20ee:	01 c0       	rjmp	.+2      	; 0x20f2 <_ZN5Print11printNumberEmh+0x7e>
    20f0:	49 5c       	subi	r20, 0xC9	; 201
    20f2:	f6 01       	movw	r30, r12
    20f4:	40 83       	st	Z, r20
    20f6:	e1 14       	cp	r14, r1
    20f8:	f1 04       	cpc	r15, r1
    20fa:	01 05       	cpc	r16, r1
    20fc:	11 05       	cpc	r17, r1
    20fe:	21 f0       	breq	.+8      	; 0x2108 <_ZN5Print11printNumberEmh+0x94>
    2100:	7e 2c       	mov	r7, r14
    2102:	5f 2d       	mov	r21, r15
    2104:	c8 01       	movw	r24, r16
    2106:	dd cf       	rjmp	.-70     	; 0x20c2 <_ZN5Print11printNumberEmh+0x4e>
    2108:	c2 01       	movw	r24, r4
    210a:	b6 01       	movw	r22, r12
    210c:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN5Print5writeEPKc>
    2110:	a1 96       	adiw	r28, 0x21	; 33
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	de bf       	out	0x3e, r29	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	cd bf       	out	0x3d, r28	; 61
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	ff 90       	pop	r15
    2126:	ef 90       	pop	r14
    2128:	df 90       	pop	r13
    212a:	cf 90       	pop	r12
    212c:	bf 90       	pop	r11
    212e:	af 90       	pop	r10
    2130:	9f 90       	pop	r9
    2132:	8f 90       	pop	r8
    2134:	7f 90       	pop	r7
    2136:	5f 90       	pop	r5
    2138:	4f 90       	pop	r4
    213a:	08 95       	ret

0000213c <_ZN5Print5printEmi>:
    213c:	dc 01       	movw	r26, r24
    213e:	21 15       	cp	r18, r1
    2140:	31 05       	cpc	r19, r1
    2142:	41 f4       	brne	.+16     	; 0x2154 <_ZN5Print5printEmi+0x18>
    2144:	ed 91       	ld	r30, X+
    2146:	fc 91       	ld	r31, X
    2148:	01 90       	ld	r0, Z+
    214a:	f0 81       	ld	r31, Z
    214c:	e0 2d       	mov	r30, r0
    214e:	64 2f       	mov	r22, r20
    2150:	09 95       	icall
    2152:	08 95       	ret
    2154:	0e 94 3a 10 	call	0x2074	; 0x2074 <_ZN5Print11printNumberEmh>
    2158:	08 95       	ret

0000215a <_ZN5Print5printEhi>:
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	9a 01       	movw	r18, r20
    2164:	e6 2e       	mov	r14, r22
    2166:	ff 24       	eor	r15, r15
    2168:	00 e0       	ldi	r16, 0x00	; 0
    216a:	10 e0       	ldi	r17, 0x00	; 0
    216c:	b8 01       	movw	r22, r16
    216e:	a7 01       	movw	r20, r14
    2170:	0e 94 9e 10 	call	0x213c	; 0x213c <_ZN5Print5printEmi>
    2174:	1f 91       	pop	r17
    2176:	0f 91       	pop	r16
    2178:	ff 90       	pop	r15
    217a:	ef 90       	pop	r14
    217c:	08 95       	ret

0000217e <_ZN5Print7printlnEhi>:
    217e:	cf 92       	push	r12
    2180:	df 92       	push	r13
    2182:	ef 92       	push	r14
    2184:	ff 92       	push	r15
    2186:	0f 93       	push	r16
    2188:	1f 93       	push	r17
    218a:	6c 01       	movw	r12, r24
    218c:	e6 2e       	mov	r14, r22
    218e:	9a 01       	movw	r18, r20
    2190:	ff 24       	eor	r15, r15
    2192:	00 e0       	ldi	r16, 0x00	; 0
    2194:	10 e0       	ldi	r17, 0x00	; 0
    2196:	b8 01       	movw	r22, r16
    2198:	a7 01       	movw	r20, r14
    219a:	0e 94 9e 10 	call	0x213c	; 0x213c <_ZN5Print5printEmi>
    219e:	8c 01       	movw	r16, r24
    21a0:	c6 01       	movw	r24, r12
    21a2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEv>
    21a6:	08 0f       	add	r16, r24
    21a8:	19 1f       	adc	r17, r25
    21aa:	c8 01       	movw	r24, r16
    21ac:	1f 91       	pop	r17
    21ae:	0f 91       	pop	r16
    21b0:	ff 90       	pop	r15
    21b2:	ef 90       	pop	r14
    21b4:	df 90       	pop	r13
    21b6:	cf 90       	pop	r12
    21b8:	08 95       	ret

000021ba <_ZN5Print5printEli>:
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	cf 93       	push	r28
    21c8:	df 93       	push	r29
    21ca:	ec 01       	movw	r28, r24
    21cc:	6a 01       	movw	r12, r20
    21ce:	7b 01       	movw	r14, r22
    21d0:	21 15       	cp	r18, r1
    21d2:	31 05       	cpc	r19, r1
    21d4:	41 f4       	brne	.+16     	; 0x21e6 <_ZN5Print5printEli+0x2c>
    21d6:	e8 81       	ld	r30, Y
    21d8:	f9 81       	ldd	r31, Y+1	; 0x01
    21da:	01 90       	ld	r0, Z+
    21dc:	f0 81       	ld	r31, Z
    21de:	e0 2d       	mov	r30, r0
    21e0:	64 2f       	mov	r22, r20
    21e2:	09 95       	icall
    21e4:	1f c0       	rjmp	.+62     	; 0x2224 <_ZN5Print5printEli+0x6a>
    21e6:	2a 30       	cpi	r18, 0x0A	; 10
    21e8:	31 05       	cpc	r19, r1
    21ea:	d1 f4       	brne	.+52     	; 0x2220 <_ZN5Print5printEli+0x66>
    21ec:	77 ff       	sbrs	r23, 7
    21ee:	17 c0       	rjmp	.+46     	; 0x221e <_ZN5Print5printEli+0x64>
    21f0:	e8 81       	ld	r30, Y
    21f2:	f9 81       	ldd	r31, Y+1	; 0x01
    21f4:	01 90       	ld	r0, Z+
    21f6:	f0 81       	ld	r31, Z
    21f8:	e0 2d       	mov	r30, r0
    21fa:	6d e2       	ldi	r22, 0x2D	; 45
    21fc:	09 95       	icall
    21fe:	8c 01       	movw	r16, r24
    2200:	44 27       	eor	r20, r20
    2202:	55 27       	eor	r21, r21
    2204:	ba 01       	movw	r22, r20
    2206:	4c 19       	sub	r20, r12
    2208:	5d 09       	sbc	r21, r13
    220a:	6e 09       	sbc	r22, r14
    220c:	7f 09       	sbc	r23, r15
    220e:	ce 01       	movw	r24, r28
    2210:	2a e0       	ldi	r18, 0x0A	; 10
    2212:	0e 94 3a 10 	call	0x2074	; 0x2074 <_ZN5Print11printNumberEmh>
    2216:	98 01       	movw	r18, r16
    2218:	28 0f       	add	r18, r24
    221a:	39 1f       	adc	r19, r25
    221c:	04 c0       	rjmp	.+8      	; 0x2226 <_ZN5Print5printEli+0x6c>
    221e:	2a e0       	ldi	r18, 0x0A	; 10
    2220:	0e 94 3a 10 	call	0x2074	; 0x2074 <_ZN5Print11printNumberEmh>
    2224:	9c 01       	movw	r18, r24
    2226:	c9 01       	movw	r24, r18
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	ff 90       	pop	r15
    2232:	ef 90       	pop	r14
    2234:	df 90       	pop	r13
    2236:	cf 90       	pop	r12
    2238:	08 95       	ret

0000223a <_ZN5Print7printlnEii>:
    223a:	cf 92       	push	r12
    223c:	df 92       	push	r13
    223e:	ef 92       	push	r14
    2240:	ff 92       	push	r15
    2242:	0f 93       	push	r16
    2244:	1f 93       	push	r17
    2246:	6c 01       	movw	r12, r24
    2248:	7b 01       	movw	r14, r22
    224a:	9a 01       	movw	r18, r20
    224c:	00 27       	eor	r16, r16
    224e:	f7 fc       	sbrc	r15, 7
    2250:	00 95       	com	r16
    2252:	10 2f       	mov	r17, r16
    2254:	b8 01       	movw	r22, r16
    2256:	a7 01       	movw	r20, r14
    2258:	0e 94 dd 10 	call	0x21ba	; 0x21ba <_ZN5Print5printEli>
    225c:	8c 01       	movw	r16, r24
    225e:	c6 01       	movw	r24, r12
    2260:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEv>
    2264:	08 0f       	add	r16, r24
    2266:	19 1f       	adc	r17, r25
    2268:	c8 01       	movw	r24, r16
    226a:	1f 91       	pop	r17
    226c:	0f 91       	pop	r16
    226e:	ff 90       	pop	r15
    2270:	ef 90       	pop	r14
    2272:	df 90       	pop	r13
    2274:	cf 90       	pop	r12
    2276:	08 95       	ret

00002278 <_ZN5Print5printEPKc>:
    2278:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN5Print5writeEPKc>
    227c:	08 95       	ret

0000227e <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    227e:	ef 92       	push	r14
    2280:	ff 92       	push	r15
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    2288:	0e 94 1e 10 	call	0x203c	; 0x203c <_ZN5Print5writeEPKc>
    228c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    228e:	c7 01       	movw	r24, r14
    2290:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEv>
    2294:	08 0f       	add	r16, r24
    2296:	19 1f       	adc	r17, r25
  return n;
}
    2298:	c8 01       	movw	r24, r16
    229a:	1f 91       	pop	r17
    229c:	0f 91       	pop	r16
    229e:	ff 90       	pop	r15
    22a0:	ef 90       	pop	r14
    22a2:	08 95       	ret

000022a4 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
    22a4:	2f 92       	push	r2
    22a6:	3f 92       	push	r3
    22a8:	4f 92       	push	r4
    22aa:	5f 92       	push	r5
    22ac:	6f 92       	push	r6
    22ae:	7f 92       	push	r7
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	3b 01       	movw	r6, r22
    22ce:	4c 01       	movw	r8, r24
    22d0:	19 01       	movw	r2, r18
    22d2:	2a 01       	movw	r4, r20
    22d4:	6d 89       	ldd	r22, Y+21	; 0x15
    22d6:	7e 89       	ldd	r23, Y+22	; 0x16
    22d8:	8f 89       	ldd	r24, Y+23	; 0x17
    22da:	98 8d       	ldd	r25, Y+24	; 0x18
    22dc:	6a 19       	sub	r22, r10
    22de:	7b 09       	sbc	r23, r11
    22e0:	8c 09       	sbc	r24, r12
    22e2:	9d 09       	sbc	r25, r13
    22e4:	62 1a       	sub	r6, r18
    22e6:	73 0a       	sbc	r7, r19
    22e8:	84 0a       	sbc	r8, r20
    22ea:	95 0a       	sbc	r9, r21
    22ec:	a4 01       	movw	r20, r8
    22ee:	93 01       	movw	r18, r6
    22f0:	0e 94 bb 14 	call	0x2976	; 0x2976 <__mulsi3>
    22f4:	e2 18       	sub	r14, r2
    22f6:	f3 08       	sbc	r15, r3
    22f8:	04 09       	sbc	r16, r4
    22fa:	15 09       	sbc	r17, r5
    22fc:	a8 01       	movw	r20, r16
    22fe:	97 01       	movw	r18, r14
    2300:	0e 94 08 15 	call	0x2a10	; 0x2a10 <__divmodsi4>
    2304:	2a 0d       	add	r18, r10
    2306:	3b 1d       	adc	r19, r11
    2308:	4c 1d       	adc	r20, r12
    230a:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
    230c:	b9 01       	movw	r22, r18
    230e:	ca 01       	movw	r24, r20
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	9f 90       	pop	r9
    2326:	8f 90       	pop	r8
    2328:	7f 90       	pop	r7
    232a:	6f 90       	pop	r6
    232c:	5f 90       	pop	r5
    232e:	4f 90       	pop	r4
    2330:	3f 90       	pop	r3
    2332:	2f 90       	pop	r2
    2334:	08 95       	ret

00002336 <_ZNK6String16equalsIgnoreCaseERKS_>:

String::String(const String &value)
{
	init();
	*this = value;
}
    2336:	ef 92       	push	r14
    2338:	ff 92       	push	r15
    233a:	0f 93       	push	r16
    233c:	1f 93       	push	r17
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	fc 01       	movw	r30, r24
    2344:	db 01       	movw	r26, r22
    2346:	86 17       	cp	r24, r22
    2348:	97 07       	cpc	r25, r23
    234a:	39 f1       	breq	.+78     	; 0x239a <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
    234c:	24 81       	ldd	r18, Z+4	; 0x04
    234e:	35 81       	ldd	r19, Z+5	; 0x05
    2350:	14 96       	adiw	r26, 0x04	; 4
    2352:	8d 91       	ld	r24, X+
    2354:	9c 91       	ld	r25, X
    2356:	15 97       	sbiw	r26, 0x05	; 5
    2358:	28 17       	cp	r18, r24
    235a:	39 07       	cpc	r19, r25
    235c:	01 f5       	brne	.+64     	; 0x239e <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    235e:	23 2b       	or	r18, r19
    2360:	e1 f0       	breq	.+56     	; 0x239a <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
    2362:	e0 80       	ld	r14, Z
    2364:	f1 80       	ldd	r15, Z+1	; 0x01
    2366:	cd 91       	ld	r28, X+
    2368:	dc 91       	ld	r29, X
    236a:	13 c0       	rjmp	.+38     	; 0x2392 <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
    236c:	99 27       	eor	r25, r25
    236e:	87 fd       	sbrc	r24, 7
    2370:	90 95       	com	r25
    2372:	0e 94 29 15 	call	0x2a52	; 0x2a52 <tolower>
    2376:	8c 01       	movw	r16, r24
    2378:	88 81       	ld	r24, Y
    237a:	99 27       	eor	r25, r25
    237c:	87 fd       	sbrc	r24, 7
    237e:	90 95       	com	r25
    2380:	0e 94 29 15 	call	0x2a52	; 0x2a52 <tolower>
    2384:	08 17       	cp	r16, r24
    2386:	19 07       	cpc	r17, r25
    2388:	51 f4       	brne	.+20     	; 0x239e <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    238a:	08 94       	sec
    238c:	e1 1c       	adc	r14, r1
    238e:	f1 1c       	adc	r15, r1
    2390:	21 96       	adiw	r28, 0x01	; 1
    2392:	f7 01       	movw	r30, r14
    2394:	80 81       	ld	r24, Z
    2396:	88 23       	and	r24, r24
    2398:	49 f7       	brne	.-46     	; 0x236c <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <_ZNK6String16equalsIgnoreCaseERKS_+0x6a>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	1f 91       	pop	r17
    23a6:	0f 91       	pop	r16
    23a8:	ff 90       	pop	r15
    23aa:	ef 90       	pop	r14
    23ac:	08 95       	ret

000023ae <_ZN6String12changeBufferEj>:
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	ec 01       	movw	r28, r24
    23b8:	8b 01       	movw	r16, r22
    23ba:	6f 5f       	subi	r22, 0xFF	; 255
    23bc:	7f 4f       	sbci	r23, 0xFF	; 255
    23be:	88 81       	ld	r24, Y
    23c0:	99 81       	ldd	r25, Y+1	; 0x01
    23c2:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <realloc>
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	11 f4       	brne	.+4      	; 0x23ce <_ZN6String12changeBufferEj+0x20>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	05 c0       	rjmp	.+10     	; 0x23d8 <_ZN6String12changeBufferEj+0x2a>
    23ce:	99 83       	std	Y+1, r25	; 0x01
    23d0:	88 83       	st	Y, r24
    23d2:	1b 83       	std	Y+3, r17	; 0x03
    23d4:	0a 83       	std	Y+2, r16	; 0x02
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <_ZN6String7reserveEj>:
    23e2:	cf 93       	push	r28
    23e4:	df 93       	push	r29
    23e6:	ec 01       	movw	r28, r24
    23e8:	88 81       	ld	r24, Y
    23ea:	99 81       	ldd	r25, Y+1	; 0x01
    23ec:	89 2b       	or	r24, r25
    23ee:	29 f0       	breq	.+10     	; 0x23fa <_ZN6String7reserveEj+0x18>
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	9b 81       	ldd	r25, Y+3	; 0x03
    23f4:	86 17       	cp	r24, r22
    23f6:	97 07       	cpc	r25, r23
    23f8:	60 f4       	brcc	.+24     	; 0x2412 <_ZN6String7reserveEj+0x30>
    23fa:	ce 01       	movw	r24, r28
    23fc:	0e 94 d7 11 	call	0x23ae	; 0x23ae <_ZN6String12changeBufferEj>
    2400:	88 23       	and	r24, r24
    2402:	41 f0       	breq	.+16     	; 0x2414 <_ZN6String7reserveEj+0x32>
    2404:	8c 81       	ldd	r24, Y+4	; 0x04
    2406:	9d 81       	ldd	r25, Y+5	; 0x05
    2408:	89 2b       	or	r24, r25
    240a:	19 f4       	brne	.+6      	; 0x2412 <_ZN6String7reserveEj+0x30>
    240c:	e8 81       	ld	r30, Y
    240e:	f9 81       	ldd	r31, Y+1	; 0x01
    2410:	10 82       	st	Z, r1
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	08 95       	ret

0000241a <_ZN6String6concatEPKcj>:
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	ec 01       	movw	r28, r24
    2428:	7b 01       	movw	r14, r22
    242a:	6c 81       	ldd	r22, Y+4	; 0x04
    242c:	7d 81       	ldd	r23, Y+5	; 0x05
    242e:	e1 14       	cp	r14, r1
    2430:	f1 04       	cpc	r15, r1
    2432:	c1 f0       	breq	.+48     	; 0x2464 <_ZN6String6concatEPKcj+0x4a>
    2434:	41 15       	cp	r20, r1
    2436:	51 05       	cpc	r21, r1
    2438:	99 f0       	breq	.+38     	; 0x2460 <_ZN6String6concatEPKcj+0x46>
    243a:	8a 01       	movw	r16, r20
    243c:	06 0f       	add	r16, r22
    243e:	17 1f       	adc	r17, r23
    2440:	b8 01       	movw	r22, r16
    2442:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN6String7reserveEj>
    2446:	88 23       	and	r24, r24
    2448:	69 f0       	breq	.+26     	; 0x2464 <_ZN6String6concatEPKcj+0x4a>
    244a:	88 81       	ld	r24, Y
    244c:	99 81       	ldd	r25, Y+1	; 0x01
    244e:	2c 81       	ldd	r18, Y+4	; 0x04
    2450:	3d 81       	ldd	r19, Y+5	; 0x05
    2452:	82 0f       	add	r24, r18
    2454:	93 1f       	adc	r25, r19
    2456:	b7 01       	movw	r22, r14
    2458:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <strcpy>
    245c:	1d 83       	std	Y+5, r17	; 0x05
    245e:	0c 83       	std	Y+4, r16	; 0x04
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <_ZN6String6concatEPKcj+0x4c>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	0f 91       	pop	r16
    246e:	ff 90       	pop	r15
    2470:	ef 90       	pop	r14
    2472:	08 95       	ret

00002474 <_ZN6String6concatEc>:
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <_ZN6String6concatEc+0x6>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	69 83       	std	Y+1, r22	; 0x01
    2480:	1a 82       	std	Y+2, r1	; 0x02
    2482:	be 01       	movw	r22, r28
    2484:	6f 5f       	subi	r22, 0xFF	; 255
    2486:	7f 4f       	sbci	r23, 0xFF	; 255
    2488:	41 e0       	ldi	r20, 0x01	; 1
    248a:	50 e0       	ldi	r21, 0x00	; 0
    248c:	0e 94 0d 12 	call	0x241a	; 0x241a <_ZN6String6concatEPKcj>
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <_ZN6String10invalidateEv>:
    249a:	cf 93       	push	r28
    249c:	df 93       	push	r29
    249e:	ec 01       	movw	r28, r24
    24a0:	88 81       	ld	r24, Y
    24a2:	99 81       	ldd	r25, Y+1	; 0x01
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	11 f0       	breq	.+4      	; 0x24ac <_ZN6String10invalidateEv+0x12>
    24a8:	0e 94 49 13 	call	0x2692	; 0x2692 <free>
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	18 82       	st	Y, r1
    24b0:	1d 82       	std	Y+5, r1	; 0x05
    24b2:	1c 82       	std	Y+4, r1	; 0x04
    24b4:	1b 82       	std	Y+3, r1	; 0x03
    24b6:	1a 82       	std	Y+2, r1	; 0x02
    24b8:	df 91       	pop	r29
    24ba:	cf 91       	pop	r28
    24bc:	08 95       	ret

000024be <_ZN6String4copyEPKcj>:
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	7b 01       	movw	r14, r22
    24ce:	8a 01       	movw	r16, r20
    24d0:	ba 01       	movw	r22, r20
    24d2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <_ZN6String7reserveEj>
    24d6:	88 23       	and	r24, r24
    24d8:	21 f4       	brne	.+8      	; 0x24e2 <_ZN6String4copyEPKcj+0x24>
    24da:	ce 01       	movw	r24, r28
    24dc:	0e 94 4d 12 	call	0x249a	; 0x249a <_ZN6String10invalidateEv>
    24e0:	07 c0       	rjmp	.+14     	; 0x24f0 <_ZN6String4copyEPKcj+0x32>
    24e2:	1d 83       	std	Y+5, r17	; 0x05
    24e4:	0c 83       	std	Y+4, r16	; 0x04
    24e6:	88 81       	ld	r24, Y
    24e8:	99 81       	ldd	r25, Y+1	; 0x01
    24ea:	b7 01       	movw	r22, r14
    24ec:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <strcpy>
    24f0:	ce 01       	movw	r24, r28
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	1f 91       	pop	r17
    24f8:	0f 91       	pop	r16
    24fa:	ff 90       	pop	r15
    24fc:	ef 90       	pop	r14
    24fe:	08 95       	ret

00002500 <_ZN6StringC1EPKc>:
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
    2506:	19 82       	std	Y+1, r1	; 0x01
    2508:	18 82       	st	Y, r1
    250a:	1b 82       	std	Y+3, r1	; 0x03
    250c:	1a 82       	std	Y+2, r1	; 0x02
    250e:	1d 82       	std	Y+5, r1	; 0x05
    2510:	1c 82       	std	Y+4, r1	; 0x04
    2512:	1e 82       	std	Y+6, r1	; 0x06
    2514:	61 15       	cp	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	51 f0       	breq	.+20     	; 0x252e <_ZN6StringC1EPKc+0x2e>
    251a:	db 01       	movw	r26, r22
    251c:	0d 90       	ld	r0, X+
    251e:	00 20       	and	r0, r0
    2520:	e9 f7       	brne	.-6      	; 0x251c <_ZN6StringC1EPKc+0x1c>
    2522:	11 97       	sbiw	r26, 0x01	; 1
    2524:	a6 1b       	sub	r26, r22
    2526:	b7 0b       	sbc	r27, r23
    2528:	ad 01       	movw	r20, r26
    252a:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN6String4copyEPKcj>
    252e:	df 91       	pop	r29
    2530:	cf 91       	pop	r28
    2532:	08 95       	ret

00002534 <_ZN6StringaSERKS_>:
    2534:	cf 93       	push	r28
    2536:	df 93       	push	r29
    2538:	ec 01       	movw	r28, r24
    253a:	fb 01       	movw	r30, r22
    253c:	86 17       	cp	r24, r22
    253e:	97 07       	cpc	r25, r23
    2540:	61 f0       	breq	.+24     	; 0x255a <_ZN6StringaSERKS_+0x26>
    2542:	60 81       	ld	r22, Z
    2544:	71 81       	ldd	r23, Z+1	; 0x01
    2546:	61 15       	cp	r22, r1
    2548:	71 05       	cpc	r23, r1
    254a:	29 f0       	breq	.+10     	; 0x2556 <_ZN6StringaSERKS_+0x22>
    254c:	44 81       	ldd	r20, Z+4	; 0x04
    254e:	55 81       	ldd	r21, Z+5	; 0x05
    2550:	0e 94 5f 12 	call	0x24be	; 0x24be <_ZN6String4copyEPKcj>
    2554:	02 c0       	rjmp	.+4      	; 0x255a <_ZN6StringaSERKS_+0x26>
    2556:	0e 94 4d 12 	call	0x249a	; 0x249a <_ZN6String10invalidateEv>
    255a:	ce 01       	movw	r24, r28
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	08 95       	ret

00002562 <_ZN6StringC1ERKS_>:
    2562:	fc 01       	movw	r30, r24
    2564:	11 82       	std	Z+1, r1	; 0x01
    2566:	10 82       	st	Z, r1
    2568:	13 82       	std	Z+3, r1	; 0x03
    256a:	12 82       	std	Z+2, r1	; 0x02
    256c:	15 82       	std	Z+5, r1	; 0x05
    256e:	14 82       	std	Z+4, r1	; 0x04
    2570:	16 82       	std	Z+6, r1	; 0x06
    2572:	0e 94 9a 12 	call	0x2534	; 0x2534 <_ZN6StringaSERKS_>
    2576:	08 95       	ret

00002578 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    2578:	fc 01       	movw	r30, r24
{
	free(buffer);
    257a:	80 81       	ld	r24, Z
    257c:	91 81       	ldd	r25, Z+1	; 0x01
    257e:	0e 94 49 13 	call	0x2692	; 0x2692 <free>
}
    2582:	08 95       	ret

00002584 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    2584:	0f 93       	push	r16
    2586:	1f 93       	push	r17
    2588:	cf 93       	push	r28
    258a:	df 93       	push	r29
    258c:	bc 01       	movw	r22, r24
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	91 05       	cpc	r25, r1
    2592:	10 f4       	brcc	.+4      	; 0x2598 <malloc+0x14>
    2594:	62 e0       	ldi	r22, 0x02	; 2
    2596:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    2598:	e0 91 eb 03 	lds	r30, 0x03EB
    259c:	f0 91 ec 03 	lds	r31, 0x03EC
    25a0:	a0 e0       	ldi	r26, 0x00	; 0
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	24 c0       	rjmp	.+72     	; 0x25f2 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    25aa:	80 81       	ld	r24, Z
    25ac:	91 81       	ldd	r25, Z+1	; 0x01
    25ae:	86 17       	cp	r24, r22
    25b0:	97 07       	cpc	r25, r23
    25b2:	d0 f0       	brcs	.+52     	; 0x25e8 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    25b4:	86 17       	cp	r24, r22
    25b6:	97 07       	cpc	r25, r23
    25b8:	71 f4       	brne	.+28     	; 0x25d6 <malloc+0x52>
    25ba:	82 81       	ldd	r24, Z+2	; 0x02
    25bc:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    25be:	10 97       	sbiw	r26, 0x00	; 0
    25c0:	29 f0       	breq	.+10     	; 0x25cc <malloc+0x48>
				fp2->nx = fp1->nx;
    25c2:	13 96       	adiw	r26, 0x03	; 3
    25c4:	9c 93       	st	X, r25
    25c6:	8e 93       	st	-X, r24
    25c8:	12 97       	sbiw	r26, 0x02	; 2
    25ca:	2c c0       	rjmp	.+88     	; 0x2624 <malloc+0xa0>
			else
				__flp = fp1->nx;
    25cc:	90 93 ec 03 	sts	0x03EC, r25
    25d0:	80 93 eb 03 	sts	0x03EB, r24
    25d4:	27 c0       	rjmp	.+78     	; 0x2624 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    25d6:	41 15       	cp	r20, r1
    25d8:	51 05       	cpc	r21, r1
    25da:	19 f0       	breq	.+6      	; 0x25e2 <malloc+0x5e>
    25dc:	84 17       	cp	r24, r20
    25de:	95 07       	cpc	r25, r21
    25e0:	18 f4       	brcc	.+6      	; 0x25e8 <malloc+0x64>
    25e2:	ef 01       	movw	r28, r30
    25e4:	8d 01       	movw	r16, r26
    25e6:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    25e8:	df 01       	movw	r26, r30
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	9c 01       	movw	r18, r24
    25f0:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    25f2:	30 97       	sbiw	r30, 0x00	; 0
    25f4:	d1 f6       	brne	.-76     	; 0x25aa <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    25f6:	41 15       	cp	r20, r1
    25f8:	51 05       	cpc	r21, r1
    25fa:	f9 f0       	breq	.+62     	; 0x263a <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    25fc:	ca 01       	movw	r24, r20
    25fe:	86 1b       	sub	r24, r22
    2600:	97 0b       	sbc	r25, r23
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	91 05       	cpc	r25, r1
    2606:	80 f4       	brcc	.+32     	; 0x2628 <malloc+0xa4>
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    260c:	01 15       	cp	r16, r1
    260e:	11 05       	cpc	r17, r1
    2610:	21 f0       	breq	.+8      	; 0x261a <malloc+0x96>
				sfp2->nx = sfp1->nx;
    2612:	f8 01       	movw	r30, r16
    2614:	93 83       	std	Z+3, r25	; 0x03
    2616:	82 83       	std	Z+2, r24	; 0x02
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    261a:	90 93 ec 03 	sts	0x03EC, r25
    261e:	80 93 eb 03 	sts	0x03EB, r24
			return &(sfp1->nx);
    2622:	fe 01       	movw	r30, r28
    2624:	32 96       	adiw	r30, 0x02	; 2
    2626:	2f c0       	rjmp	.+94     	; 0x2686 <malloc+0x102>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    2628:	fe 01       	movw	r30, r28
    262a:	e8 0f       	add	r30, r24
    262c:	f9 1f       	adc	r31, r25
    262e:	61 93       	st	Z+, r22
    2630:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    2632:	02 97       	sbiw	r24, 0x02	; 2
    2634:	99 83       	std	Y+1, r25	; 0x01
    2636:	88 83       	st	Y, r24
    2638:	26 c0       	rjmp	.+76     	; 0x2686 <malloc+0x102>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	cp = STACK_POINTER() - __MALLOC_MARGIN__;
    263a:	8d b7       	in	r24, 0x3d	; 61
    263c:	9e b7       	in	r25, 0x3e	; 62
    263e:	88 57       	subi	r24, 0x78	; 120
    2640:	90 40       	sbci	r25, 0x00	; 0
	if (cp <= __brkval)
    2642:	20 91 c3 02 	lds	r18, 0x02C3
    2646:	30 91 c4 02 	lds	r19, 0x02C4
    264a:	28 17       	cp	r18, r24
    264c:	39 07       	cpc	r19, r25
    264e:	c8 f4       	brcc	.+50     	; 0x2682 <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    2650:	ac 01       	movw	r20, r24
    2652:	42 1b       	sub	r20, r18
    2654:	53 0b       	sbc	r21, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    2656:	46 17       	cp	r20, r22
    2658:	57 07       	cpc	r21, r23
    265a:	98 f0       	brcs	.+38     	; 0x2682 <malloc+0xfe>
    265c:	cb 01       	movw	r24, r22
    265e:	02 96       	adiw	r24, 0x02	; 2
    2660:	48 17       	cp	r20, r24
    2662:	59 07       	cpc	r21, r25
    2664:	70 f0       	brcs	.+28     	; 0x2682 <malloc+0xfe>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    2666:	82 0f       	add	r24, r18
    2668:	93 1f       	adc	r25, r19
    266a:	90 93 c4 02 	sts	0x02C4, r25
    266e:	80 93 c3 02 	sts	0x02C3, r24
		__brkval_maximum = __brkval;
    2672:	90 93 c6 02 	sts	0x02C6, r25
    2676:	80 93 c5 02 	sts	0x02C5, r24
		fp1->sz = len;
    267a:	f9 01       	movw	r30, r18
    267c:	61 93       	st	Z+, r22
    267e:	71 93       	st	Z+, r23
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <malloc+0x102>
		return &(fp1->nx);
    2682:	e0 e0       	ldi	r30, 0x00	; 0
    2684:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    2686:	cf 01       	movw	r24, r30
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	08 95       	ret

00002692 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    2692:	cf 93       	push	r28
    2694:	df 93       	push	r29
    2696:	9c 01       	movw	r18, r24
    2698:	00 97       	sbiw	r24, 0x00	; 0
    269a:	09 f4       	brne	.+2      	; 0x269e <free+0xc>
    269c:	8f c0       	rjmp	.+286    	; 0x27bc <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    269e:	ec 01       	movw	r28, r24
    26a0:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    26a2:	1b 82       	std	Y+3, r1	; 0x03
    26a4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    26a6:	60 91 eb 03 	lds	r22, 0x03EB
    26aa:	70 91 ec 03 	lds	r23, 0x03EC
    26ae:	61 15       	cp	r22, r1
    26b0:	71 05       	cpc	r23, r1
    26b2:	81 f4       	brne	.+32     	; 0x26d4 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    26b4:	88 81       	ld	r24, Y
    26b6:	99 81       	ldd	r25, Y+1	; 0x01
    26b8:	82 0f       	add	r24, r18
    26ba:	93 1f       	adc	r25, r19
    26bc:	20 91 c3 02 	lds	r18, 0x02C3
    26c0:	30 91 c4 02 	lds	r19, 0x02C4
    26c4:	28 17       	cp	r18, r24
    26c6:	39 07       	cpc	r19, r25
    26c8:	39 f5       	brne	.+78     	; 0x2718 <free+0x86>
			__brkval = cpnew;
    26ca:	d0 93 c4 02 	sts	0x02C4, r29
    26ce:	c0 93 c3 02 	sts	0x02C3, r28
    26d2:	74 c0       	rjmp	.+232    	; 0x27bc <free+0x12a>
		else
			__flp = fpnew;
    26d4:	db 01       	movw	r26, r22
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    26da:	ac 17       	cp	r26, r28
    26dc:	bd 07       	cpc	r27, r29
    26de:	08 f1       	brcs	.+66     	; 0x2722 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    26e0:	bb 83       	std	Y+3, r27	; 0x03
    26e2:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    26e4:	fe 01       	movw	r30, r28
    26e6:	21 91       	ld	r18, Z+
    26e8:	31 91       	ld	r19, Z+
    26ea:	e2 0f       	add	r30, r18
    26ec:	f3 1f       	adc	r31, r19
    26ee:	ae 17       	cp	r26, r30
    26f0:	bf 07       	cpc	r27, r31
    26f2:	79 f4       	brne	.+30     	; 0x2712 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    26f4:	8d 91       	ld	r24, X+
    26f6:	9c 91       	ld	r25, X
    26f8:	11 97       	sbiw	r26, 0x01	; 1
    26fa:	28 0f       	add	r18, r24
    26fc:	39 1f       	adc	r19, r25
    26fe:	2e 5f       	subi	r18, 0xFE	; 254
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	39 83       	std	Y+1, r19	; 0x01
    2704:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    2706:	12 96       	adiw	r26, 0x02	; 2
    2708:	8d 91       	ld	r24, X+
    270a:	9c 91       	ld	r25, X
    270c:	13 97       	sbiw	r26, 0x03	; 3
    270e:	9b 83       	std	Y+3, r25	; 0x03
    2710:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    2712:	41 15       	cp	r20, r1
    2714:	51 05       	cpc	r21, r1
    2716:	71 f4       	brne	.+28     	; 0x2734 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    2718:	d0 93 ec 03 	sts	0x03EC, r29
    271c:	c0 93 eb 03 	sts	0x03EB, r28
    2720:	4d c0       	rjmp	.+154    	; 0x27bc <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2722:	12 96       	adiw	r26, 0x02	; 2
    2724:	8d 91       	ld	r24, X+
    2726:	9c 91       	ld	r25, X
    2728:	13 97       	sbiw	r26, 0x03	; 3
    272a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	11 f0       	breq	.+4      	; 0x2734 <free+0xa2>
    2730:	dc 01       	movw	r26, r24
    2732:	d3 cf       	rjmp	.-90     	; 0x26da <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    2734:	da 01       	movw	r26, r20
    2736:	13 96       	adiw	r26, 0x03	; 3
    2738:	dc 93       	st	X, r29
    273a:	ce 93       	st	-X, r28
    273c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    273e:	fa 01       	movw	r30, r20
    2740:	21 91       	ld	r18, Z+
    2742:	31 91       	ld	r19, Z+
    2744:	e2 0f       	add	r30, r18
    2746:	f3 1f       	adc	r31, r19
    2748:	ce 17       	cp	r28, r30
    274a:	df 07       	cpc	r29, r31
    274c:	69 f4       	brne	.+26     	; 0x2768 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    274e:	88 81       	ld	r24, Y
    2750:	99 81       	ldd	r25, Y+1	; 0x01
    2752:	28 0f       	add	r18, r24
    2754:	39 1f       	adc	r19, r25
    2756:	2e 5f       	subi	r18, 0xFE	; 254
    2758:	3f 4f       	sbci	r19, 0xFF	; 255
    275a:	fa 01       	movw	r30, r20
    275c:	31 83       	std	Z+1, r19	; 0x01
    275e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    2760:	8a 81       	ldd	r24, Y+2	; 0x02
    2762:	9b 81       	ldd	r25, Y+3	; 0x03
    2764:	93 83       	std	Z+3, r25	; 0x03
    2766:	82 83       	std	Z+2, r24	; 0x02
    2768:	e0 e0       	ldi	r30, 0x00	; 0
    276a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    276c:	db 01       	movw	r26, r22
    276e:	12 96       	adiw	r26, 0x02	; 2
    2770:	8d 91       	ld	r24, X+
    2772:	9c 91       	ld	r25, X
    2774:	13 97       	sbiw	r26, 0x03	; 3
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	19 f0       	breq	.+6      	; 0x2780 <free+0xee>
    277a:	bc 01       	movw	r22, r24
    277c:	fd 01       	movw	r30, r26
    277e:	f6 cf       	rjmp	.-20     	; 0x276c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    2780:	ab 01       	movw	r20, r22
    2782:	4e 5f       	subi	r20, 0xFE	; 254
    2784:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    2786:	db 01       	movw	r26, r22
    2788:	8d 91       	ld	r24, X+
    278a:	9c 91       	ld	r25, X
    278c:	84 0f       	add	r24, r20
    278e:	95 1f       	adc	r25, r21
    2790:	20 91 c3 02 	lds	r18, 0x02C3
    2794:	30 91 c4 02 	lds	r19, 0x02C4
    2798:	28 17       	cp	r18, r24
    279a:	39 07       	cpc	r19, r25
    279c:	79 f4       	brne	.+30     	; 0x27bc <free+0x12a>
		if (fp2 == NULL)
    279e:	30 97       	sbiw	r30, 0x00	; 0
    27a0:	29 f4       	brne	.+10     	; 0x27ac <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    27a2:	10 92 ec 03 	sts	0x03EC, r1
    27a6:	10 92 eb 03 	sts	0x03EB, r1
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <free+0x11e>
		else
			fp2->nx = NULL;
    27ac:	13 82       	std	Z+3, r1	; 0x03
    27ae:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    27b0:	42 50       	subi	r20, 0x02	; 2
    27b2:	50 40       	sbci	r21, 0x00	; 0
    27b4:	50 93 c4 02 	sts	0x02C4, r21
    27b8:	40 93 c3 02 	sts	0x02C3, r20
	}
}
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	08 95       	ret

000027c2 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    27c2:	6f 92       	push	r6
    27c4:	7f 92       	push	r7
    27c6:	8f 92       	push	r8
    27c8:	9f 92       	push	r9
    27ca:	af 92       	push	r10
    27cc:	bf 92       	push	r11
    27ce:	cf 92       	push	r12
    27d0:	df 92       	push	r13
    27d2:	ef 92       	push	r14
    27d4:	ff 92       	push	r15
    27d6:	0f 93       	push	r16
    27d8:	1f 93       	push	r17
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	8c 01       	movw	r16, r24
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	29 f4       	brne	.+10     	; 0x27ee <realloc+0x2c>
		return malloc(len);
    27e4:	cb 01       	movw	r24, r22
    27e6:	0e 94 c2 12 	call	0x2584	; 0x2584 <malloc>
    27ea:	8c 01       	movw	r16, r24
    27ec:	b4 c0       	rjmp	.+360    	; 0x2956 <realloc+0x194>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    27ee:	8e ef       	ldi	r24, 0xFE	; 254
    27f0:	e8 2e       	mov	r14, r24
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	f8 2e       	mov	r15, r24
    27f6:	e0 0e       	add	r14, r16
    27f8:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    27fa:	58 01       	movw	r10, r16
    27fc:	a6 0e       	add	r10, r22
    27fe:	b7 1e       	adc	r11, r23
	if (cp < cp1)
    2800:	ae 14       	cp	r10, r14
    2802:	bf 04       	cpc	r11, r15
    2804:	08 f4       	brcc	.+2      	; 0x2808 <realloc+0x46>
    2806:	a5 c0       	rjmp	.+330    	; 0x2952 <realloc+0x190>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    2808:	d7 01       	movw	r26, r14
    280a:	4d 91       	ld	r20, X+
    280c:	5c 91       	ld	r21, X
    280e:	11 97       	sbiw	r26, 0x01	; 1
    2810:	46 17       	cp	r20, r22
    2812:	57 07       	cpc	r21, r23
    2814:	b8 f0       	brcs	.+46     	; 0x2844 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    2816:	45 30       	cpi	r20, 0x05	; 5
    2818:	51 05       	cpc	r21, r1
    281a:	08 f4       	brcc	.+2      	; 0x281e <realloc+0x5c>
    281c:	9c c0       	rjmp	.+312    	; 0x2956 <realloc+0x194>
    281e:	ca 01       	movw	r24, r20
    2820:	04 97       	sbiw	r24, 0x04	; 4
    2822:	86 17       	cp	r24, r22
    2824:	97 07       	cpc	r25, r23
    2826:	08 f4       	brcc	.+2      	; 0x282a <realloc+0x68>
    2828:	96 c0       	rjmp	.+300    	; 0x2956 <realloc+0x194>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    282a:	42 50       	subi	r20, 0x02	; 2
    282c:	50 40       	sbci	r21, 0x00	; 0
    282e:	46 1b       	sub	r20, r22
    2830:	57 0b       	sbc	r21, r23
    2832:	f5 01       	movw	r30, r10
    2834:	41 93       	st	Z+, r20
    2836:	51 93       	st	Z+, r21
		fp1->sz = len;
    2838:	6d 93       	st	X+, r22
    283a:	7c 93       	st	X, r23
		free(&(fp2->nx));
    283c:	cf 01       	movw	r24, r30
    283e:	0e 94 49 13 	call	0x2692	; 0x2692 <free>
    2842:	89 c0       	rjmp	.+274    	; 0x2956 <realloc+0x194>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    2844:	4b 01       	movw	r8, r22
    2846:	84 1a       	sub	r8, r20
    2848:	95 0a       	sbc	r9, r21
	cp = (char *)ptr + fp1->sz;
    284a:	38 01       	movw	r6, r16
    284c:	64 0e       	add	r6, r20
    284e:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    2850:	a0 91 eb 03 	lds	r26, 0x03EB
    2854:	b0 91 ec 03 	lds	r27, 0x03EC
    2858:	cc 24       	eor	r12, r12
    285a:	dd 24       	eor	r13, r13
    285c:	e0 e0       	ldi	r30, 0x00	; 0
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	47 c0       	rjmp	.+142    	; 0x28f0 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    2862:	a6 15       	cp	r26, r6
    2864:	b7 05       	cpc	r27, r7
    2866:	a9 f5       	brne	.+106    	; 0x28d2 <realloc+0x110>
    2868:	cd 91       	ld	r28, X+
    286a:	dc 91       	ld	r29, X
    286c:	11 97       	sbiw	r26, 0x01	; 1
    286e:	ce 01       	movw	r24, r28
    2870:	02 96       	adiw	r24, 0x02	; 2
    2872:	88 15       	cp	r24, r8
    2874:	99 05       	cpc	r25, r9
    2876:	68 f1       	brcs	.+90     	; 0x28d2 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    2878:	ce 01       	movw	r24, r28
    287a:	88 19       	sub	r24, r8
    287c:	99 09       	sbc	r25, r9
    287e:	02 96       	adiw	r24, 0x02	; 2
    2880:	12 96       	adiw	r26, 0x02	; 2
    2882:	2c 91       	ld	r18, X
    2884:	12 97       	sbiw	r26, 0x02	; 2
    2886:	13 96       	adiw	r26, 0x03	; 3
    2888:	3c 91       	ld	r19, X
    288a:	05 97       	sbiw	r24, 0x05	; 5
    288c:	58 f0       	brcs	.+22     	; 0x28a4 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    288e:	f5 01       	movw	r30, r10
				fp2->nx = fp3->nx;
    2890:	22 83       	std	Z+2, r18	; 0x02
    2892:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    2894:	c8 19       	sub	r28, r8
    2896:	d9 09       	sbc	r29, r9
    2898:	d1 83       	std	Z+1, r29	; 0x01
    289a:	c0 83       	st	Z, r28
				fp1->sz = len;
    289c:	d7 01       	movw	r26, r14
    289e:	6d 93       	st	X+, r22
    28a0:	7c 93       	st	X, r23
    28a2:	09 c0       	rjmp	.+18     	; 0x28b6 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    28a4:	4e 5f       	subi	r20, 0xFE	; 254
    28a6:	5f 4f       	sbci	r21, 0xFF	; 255
    28a8:	4c 0f       	add	r20, r28
    28aa:	5d 1f       	adc	r21, r29
    28ac:	f7 01       	movw	r30, r14
    28ae:	51 83       	std	Z+1, r21	; 0x01
    28b0:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    28b2:	c9 01       	movw	r24, r18
    28b4:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    28b6:	c1 14       	cp	r12, r1
    28b8:	d1 04       	cpc	r13, r1
    28ba:	31 f0       	breq	.+12     	; 0x28c8 <realloc+0x106>
				ofp3->nx = fp2;
    28bc:	d6 01       	movw	r26, r12
    28be:	13 96       	adiw	r26, 0x03	; 3
    28c0:	fc 93       	st	X, r31
    28c2:	ee 93       	st	-X, r30
    28c4:	12 97       	sbiw	r26, 0x02	; 2
    28c6:	47 c0       	rjmp	.+142    	; 0x2956 <realloc+0x194>
			else
				__flp = fp2;
    28c8:	f0 93 ec 03 	sts	0x03EC, r31
    28cc:	e0 93 eb 03 	sts	0x03EB, r30
    28d0:	42 c0       	rjmp	.+132    	; 0x2956 <realloc+0x194>
    28d2:	8d 91       	ld	r24, X+
    28d4:	9c 91       	ld	r25, X
    28d6:	11 97       	sbiw	r26, 0x01	; 1
    28d8:	e8 17       	cp	r30, r24
    28da:	f9 07       	cpc	r31, r25
    28dc:	08 f4       	brcc	.+2      	; 0x28e0 <realloc+0x11e>
    28de:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    28e0:	6d 01       	movw	r12, r26
    28e2:	12 96       	adiw	r26, 0x02	; 2
    28e4:	8c 91       	ld	r24, X
    28e6:	12 97       	sbiw	r26, 0x02	; 2
    28e8:	13 96       	adiw	r26, 0x03	; 3
    28ea:	9c 91       	ld	r25, X
    28ec:	9c 01       	movw	r18, r24
    28ee:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    28f0:	10 97       	sbiw	r26, 0x00	; 0
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <realloc+0x134>
    28f4:	b6 cf       	rjmp	.-148    	; 0x2862 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    28f6:	80 91 c3 02 	lds	r24, 0x02C3
    28fa:	90 91 c4 02 	lds	r25, 0x02C4
    28fe:	86 15       	cp	r24, r6
    2900:	97 05       	cpc	r25, r7
    2902:	b1 f4       	brne	.+44     	; 0x2930 <realloc+0x16e>
    2904:	e6 17       	cp	r30, r22
    2906:	f7 07       	cpc	r31, r23
    2908:	98 f4       	brcc	.+38     	; 0x2930 <realloc+0x16e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __MALLOC_MARGIN__;
    290a:	8d b7       	in	r24, 0x3d	; 61
    290c:	9e b7       	in	r25, 0x3e	; 62
		if (cp < cp1) {
    290e:	88 57       	subi	r24, 0x78	; 120
    2910:	90 40       	sbci	r25, 0x00	; 0
    2912:	a8 16       	cp	r10, r24
    2914:	b9 06       	cpc	r11, r25
    2916:	e8 f4       	brcc	.+58     	; 0x2952 <realloc+0x190>
			__brkval = cp;
    2918:	b0 92 c4 02 	sts	0x02C4, r11
    291c:	a0 92 c3 02 	sts	0x02C3, r10
			__brkval_maximum = cp;
    2920:	b0 92 c6 02 	sts	0x02C6, r11
    2924:	a0 92 c5 02 	sts	0x02C5, r10
			fp1->sz = len;
    2928:	f7 01       	movw	r30, r14
    292a:	71 83       	std	Z+1, r23	; 0x01
    292c:	60 83       	st	Z, r22
    292e:	13 c0       	rjmp	.+38     	; 0x2956 <realloc+0x194>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    2930:	cb 01       	movw	r24, r22
    2932:	0e 94 c2 12 	call	0x2584	; 0x2584 <malloc>
    2936:	ec 01       	movw	r28, r24
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	59 f0       	breq	.+22     	; 0x2952 <realloc+0x190>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    293c:	d7 01       	movw	r26, r14
    293e:	4d 91       	ld	r20, X+
    2940:	5c 91       	ld	r21, X
    2942:	b8 01       	movw	r22, r16
    2944:	0e 94 31 15 	call	0x2a62	; 0x2a62 <memcpy>
	free(ptr);
    2948:	c8 01       	movw	r24, r16
    294a:	0e 94 49 13 	call	0x2692	; 0x2692 <free>
    294e:	8e 01       	movw	r16, r28
    2950:	02 c0       	rjmp	.+4      	; 0x2956 <realloc+0x194>
	return memp;
    2952:	00 e0       	ldi	r16, 0x00	; 0
    2954:	10 e0       	ldi	r17, 0x00	; 0
}
    2956:	c8 01       	movw	r24, r16
    2958:	df 91       	pop	r29
    295a:	cf 91       	pop	r28
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	bf 90       	pop	r11
    296a:	af 90       	pop	r10
    296c:	9f 90       	pop	r9
    296e:	8f 90       	pop	r8
    2970:	7f 90       	pop	r7
    2972:	6f 90       	pop	r6
    2974:	08 95       	ret

00002976 <__mulsi3>:
    2976:	62 9f       	mul	r22, r18
    2978:	d0 01       	movw	r26, r0
    297a:	73 9f       	mul	r23, r19
    297c:	f0 01       	movw	r30, r0
    297e:	82 9f       	mul	r24, r18
    2980:	e0 0d       	add	r30, r0
    2982:	f1 1d       	adc	r31, r1
    2984:	64 9f       	mul	r22, r20
    2986:	e0 0d       	add	r30, r0
    2988:	f1 1d       	adc	r31, r1
    298a:	92 9f       	mul	r25, r18
    298c:	f0 0d       	add	r31, r0
    298e:	83 9f       	mul	r24, r19
    2990:	f0 0d       	add	r31, r0
    2992:	74 9f       	mul	r23, r20
    2994:	f0 0d       	add	r31, r0
    2996:	65 9f       	mul	r22, r21
    2998:	f0 0d       	add	r31, r0
    299a:	99 27       	eor	r25, r25
    299c:	72 9f       	mul	r23, r18
    299e:	b0 0d       	add	r27, r0
    29a0:	e1 1d       	adc	r30, r1
    29a2:	f9 1f       	adc	r31, r25
    29a4:	63 9f       	mul	r22, r19
    29a6:	b0 0d       	add	r27, r0
    29a8:	e1 1d       	adc	r30, r1
    29aa:	f9 1f       	adc	r31, r25
    29ac:	bd 01       	movw	r22, r26
    29ae:	cf 01       	movw	r24, r30
    29b0:	11 24       	eor	r1, r1
    29b2:	08 95       	ret

000029b4 <__udivmodqi4>:
    29b4:	99 1b       	sub	r25, r25
    29b6:	79 e0       	ldi	r23, 0x09	; 9
    29b8:	04 c0       	rjmp	.+8      	; 0x29c2 <__udivmodqi4_ep>

000029ba <__udivmodqi4_loop>:
    29ba:	99 1f       	adc	r25, r25
    29bc:	96 17       	cp	r25, r22
    29be:	08 f0       	brcs	.+2      	; 0x29c2 <__udivmodqi4_ep>
    29c0:	96 1b       	sub	r25, r22

000029c2 <__udivmodqi4_ep>:
    29c2:	88 1f       	adc	r24, r24
    29c4:	7a 95       	dec	r23
    29c6:	c9 f7       	brne	.-14     	; 0x29ba <__udivmodqi4_loop>
    29c8:	80 95       	com	r24
    29ca:	08 95       	ret

000029cc <__udivmodsi4>:
    29cc:	a1 e2       	ldi	r26, 0x21	; 33
    29ce:	1a 2e       	mov	r1, r26
    29d0:	aa 1b       	sub	r26, r26
    29d2:	bb 1b       	sub	r27, r27
    29d4:	fd 01       	movw	r30, r26
    29d6:	0d c0       	rjmp	.+26     	; 0x29f2 <__udivmodsi4_ep>

000029d8 <__udivmodsi4_loop>:
    29d8:	aa 1f       	adc	r26, r26
    29da:	bb 1f       	adc	r27, r27
    29dc:	ee 1f       	adc	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	a2 17       	cp	r26, r18
    29e2:	b3 07       	cpc	r27, r19
    29e4:	e4 07       	cpc	r30, r20
    29e6:	f5 07       	cpc	r31, r21
    29e8:	20 f0       	brcs	.+8      	; 0x29f2 <__udivmodsi4_ep>
    29ea:	a2 1b       	sub	r26, r18
    29ec:	b3 0b       	sbc	r27, r19
    29ee:	e4 0b       	sbc	r30, r20
    29f0:	f5 0b       	sbc	r31, r21

000029f2 <__udivmodsi4_ep>:
    29f2:	66 1f       	adc	r22, r22
    29f4:	77 1f       	adc	r23, r23
    29f6:	88 1f       	adc	r24, r24
    29f8:	99 1f       	adc	r25, r25
    29fa:	1a 94       	dec	r1
    29fc:	69 f7       	brne	.-38     	; 0x29d8 <__udivmodsi4_loop>
    29fe:	60 95       	com	r22
    2a00:	70 95       	com	r23
    2a02:	80 95       	com	r24
    2a04:	90 95       	com	r25
    2a06:	9b 01       	movw	r18, r22
    2a08:	ac 01       	movw	r20, r24
    2a0a:	bd 01       	movw	r22, r26
    2a0c:	cf 01       	movw	r24, r30
    2a0e:	08 95       	ret

00002a10 <__divmodsi4>:
    2a10:	97 fb       	bst	r25, 7
    2a12:	09 2e       	mov	r0, r25
    2a14:	05 26       	eor	r0, r21
    2a16:	0e d0       	rcall	.+28     	; 0x2a34 <__divmodsi4_neg1>
    2a18:	57 fd       	sbrc	r21, 7
    2a1a:	04 d0       	rcall	.+8      	; 0x2a24 <__divmodsi4_neg2>
    2a1c:	d7 df       	rcall	.-82     	; 0x29cc <__udivmodsi4>
    2a1e:	0a d0       	rcall	.+20     	; 0x2a34 <__divmodsi4_neg1>
    2a20:	00 1c       	adc	r0, r0
    2a22:	38 f4       	brcc	.+14     	; 0x2a32 <__divmodsi4_exit>

00002a24 <__divmodsi4_neg2>:
    2a24:	50 95       	com	r21
    2a26:	40 95       	com	r20
    2a28:	30 95       	com	r19
    2a2a:	21 95       	neg	r18
    2a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a2e:	4f 4f       	sbci	r20, 0xFF	; 255
    2a30:	5f 4f       	sbci	r21, 0xFF	; 255

00002a32 <__divmodsi4_exit>:
    2a32:	08 95       	ret

00002a34 <__divmodsi4_neg1>:
    2a34:	f6 f7       	brtc	.-4      	; 0x2a32 <__divmodsi4_exit>
    2a36:	90 95       	com	r25
    2a38:	80 95       	com	r24
    2a3a:	70 95       	com	r23
    2a3c:	61 95       	neg	r22
    2a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a40:	8f 4f       	sbci	r24, 0xFF	; 255
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	08 95       	ret

00002a46 <__tablejump2__>:
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31

00002a4a <__tablejump__>:
    2a4a:	05 90       	lpm	r0, Z+
    2a4c:	f4 91       	lpm	r31, Z
    2a4e:	e0 2d       	mov	r30, r0
    2a50:	09 94       	ijmp

00002a52 <tolower>:
    2a52:	91 11       	cpse	r25, r1
    2a54:	08 95       	ret
    2a56:	81 54       	subi	r24, 0x41	; 65
    2a58:	8a 51       	subi	r24, 0x1A	; 26
    2a5a:	08 f4       	brcc	.+2      	; 0x2a5e <tolower+0xc>
    2a5c:	80 5e       	subi	r24, 0xE0	; 224
    2a5e:	85 5a       	subi	r24, 0xA5	; 165
    2a60:	08 95       	ret

00002a62 <memcpy>:
    2a62:	fb 01       	movw	r30, r22
    2a64:	dc 01       	movw	r26, r24
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <memcpy+0xa>
    2a68:	01 90       	ld	r0, Z+
    2a6a:	0d 92       	st	X+, r0
    2a6c:	41 50       	subi	r20, 0x01	; 1
    2a6e:	50 40       	sbci	r21, 0x00	; 0
    2a70:	d8 f7       	brcc	.-10     	; 0x2a68 <memcpy+0x6>
    2a72:	08 95       	ret

00002a74 <strcpy>:
    2a74:	fb 01       	movw	r30, r22
    2a76:	dc 01       	movw	r26, r24
    2a78:	01 90       	ld	r0, Z+
    2a7a:	0d 92       	st	X+, r0
    2a7c:	00 20       	and	r0, r0
    2a7e:	e1 f7       	brne	.-8      	; 0x2a78 <strcpy+0x4>
    2a80:	08 95       	ret

00002a82 <_exit>:
    2a82:	f8 94       	cli

00002a84 <__stop_program>:
    2a84:	ff cf       	rjmp	.-2      	; 0x2a84 <__stop_program>
