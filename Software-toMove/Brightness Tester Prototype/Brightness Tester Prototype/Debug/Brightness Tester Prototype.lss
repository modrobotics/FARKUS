
Brightness Tester Prototype.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029c  00800100  000020d6  0000216a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  0080039c  0080039c  00002406  2**0
                  ALLOC
  3 .stab         00002fa0  00000000  00000000  00002408  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000850  00000000  00000000  000062d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c6c  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000092ce  00000000  00000000  0000778c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a26  00000000  00000000  00010a5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000044c0  00000000  00000000  00012480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001148  00000000  00000000  00016940  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000022b1  00000000  00000000  00017a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005ae6  00000000  00000000  00019d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b0  00000000  00000000  0001f81f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 06 0a 	jmp	0x140c	; 0x140c <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_18>
      4c:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	a9 04       	cpc	r10, r9
      c4:	13 0e       	add	r1, r19

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	13 e0       	ldi	r17, 0x03	; 3
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e6 ed       	ldi	r30, 0xD6	; 214
      da:	f0 e2       	ldi	r31, 0x20	; 32
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	ac 39       	cpi	r26, 0x9C	; 156
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	14 e0       	ldi	r17, 0x04	; 4
      ea:	ac e9       	ldi	r26, 0x9C	; 156
      ec:	b3 e0       	ldi	r27, 0x03	; 3
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a3 38       	cpi	r26, 0x83	; 131
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 65 10 	call	0x20ca	; 0x20ca <__tablejump__>
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <main>
     112:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
CubeletsShield cubelets(false, 13);
bool initFlashlightTest(void);
bool initBrightnessTest(void);

void setup()
{
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
	Serial.begin(9600);
     11e:	81 e6       	ldi	r24, 0x61	; 97
     120:	94 e0       	ldi	r25, 0x04	; 4
     122:	40 e8       	ldi	r20, 0x80	; 128
     124:	55 e2       	ldi	r21, 0x25	; 37
     126:	60 e0       	ldi	r22, 0x00	; 0
     128:	70 e0       	ldi	r23, 0x00	; 0
     12a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN14HardwareSerial5beginEm>
	pinMode(READ_PIN, INPUT);
     12e:	8e e0       	ldi	r24, 0x0E	; 14
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	pinMode(SELECT_PIN, INPUT_PULLUP);
     136:	82 e0       	ldi	r24, 0x02	; 2
     138:	62 e0       	ldi	r22, 0x02	; 2
     13a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	pinMode(DETECT_PIN, INPUT);
     13e:	88 e0       	ldi	r24, 0x08	; 8
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	pinMode(FAIL_PIN, OUTPUT);
     146:	89 e0       	ldi	r24, 0x09	; 9
     148:	61 e0       	ldi	r22, 0x01	; 1
     14a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	pinMode(PASS_PIN, OUTPUT);
     14e:	8a e0       	ldi	r24, 0x0A	; 10
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	pinMode(LED_PIN, OUTPUT);
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	cubelets.initialize();
     15e:	cc e9       	ldi	r28, 0x9C	; 156
     160:	d3 e0       	ldi	r29, 0x03	; 3
     162:	ce 01       	movw	r24, r28
     164:	0e 94 d2 06 	call	0xda4	; 0xda4 <_ZN14CubeletsShield10initializeEv>
	cubelets.greenOffAllCubelets();
     168:	ce 01       	movw	r24, r28
     16a:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN14CubeletsShield19greenOffAllCubeletsEv>
}
     16e:	df 91       	pop	r29
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <_Z18initFlashlightTestv>:
{
	
}

bool initFlashlightTest(void)
{
     174:	2f 92       	push	r2
     176:	3f 92       	push	r3
     178:	4f 92       	push	r4
     17a:	5f 92       	push	r5
     17c:	6f 92       	push	r6
     17e:	7f 92       	push	r7
     180:	8f 92       	push	r8
     182:	9f 92       	push	r9
     184:	af 92       	push	r10
     186:	bf 92       	push	r11
     188:	cf 92       	push	r12
     18a:	df 92       	push	r13
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	2a 97       	sbiw	r28, 0x0a	; 10
     19e:	0f b6       	in	r0, 0x3f	; 63
     1a0:	f8 94       	cli
     1a2:	de bf       	out	0x3e, r29	; 62
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	cd bf       	out	0x3d, r28	; 61
		Serial.print("m1 - m2 = ");
		Serial.print(measurements[1] - measurements[2]);
		Serial.print(", m2 - m0 = ");
		Serial.print(measurements[2] - measurements[0]);
		Serial.print("\n");	
		return 0;
     1a8:	8e e7       	ldi	r24, 0x7E	; 126
     1aa:	93 e0       	ldi	r25, 0x03	; 3
     1ac:	98 87       	std	Y+8, r25	; 0x08
     1ae:	8f 83       	std	Y+7, r24	; 0x07
     1b0:	0f 2e       	mov	r0, r31
     1b2:	f4 e8       	ldi	r31, 0x84	; 132
     1b4:	4f 2e       	mov	r4, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	5f 2e       	mov	r5, r31
     1ba:	f0 2d       	mov	r31, r0
     1bc:	fe 01       	movw	r30, r28
     1be:	31 96       	adiw	r30, 0x01	; 1
     1c0:	fa 87       	std	Y+10, r31	; 0x0a
     1c2:	e9 87       	std	Y+9, r30	; 0x09
	unsigned int error = 0;	//sum of errors
	int measurements[FT_MEASUREMENTS];
	unsigned int delta = 0; //difference between min and max
	int samples[FT_SAMPLES]; //array to hold sample ft_Values
	int avg = 0;
	for(int lol = 0; lol < FT_MEASUREMENTS; lol++) //measurement loop
     1c4:	88 24       	eor	r8, r8
     1c6:	99 24       	eor	r9, r9
	{
		Serial.print("Measurement ");
     1c8:	0f 2e       	mov	r0, r31
     1ca:	f1 e6       	ldi	r31, 0x61	; 97
     1cc:	ef 2e       	mov	r14, r31
     1ce:	f4 e0       	ldi	r31, 0x04	; 4
     1d0:	ff 2e       	mov	r15, r31
     1d2:	f0 2d       	mov	r31, r0
		Serial.print(lol);
		Serial.print(", value: ");
		Serial.print(ft_Values[lol]);
		Serial.print(", ft_Target: ");
		Serial.print(ft_Target[lol]);
		Serial.print("\n");
     1d4:	0f 2e       	mov	r0, r31
     1d6:	f5 e2       	ldi	r31, 0x25	; 37
     1d8:	6f 2e       	mov	r6, r31
     1da:	f1 e0       	ldi	r31, 0x01	; 1
     1dc:	7f 2e       	mov	r7, r31
     1de:	f0 2d       	mov	r31, r0
		cubelets.setBroadcastBlockValueByFace(FACE, ft_Values[lol]);
		delay(500);
		for(int i = 0; i < FT_SAMPLES; i++) //sample loop
		{
			samples[i]=analogRead(READ_PIN)/4; //div by 4 to scale from 10-bit to 8-bit
			Serial.print("Sample: ");
     1e0:	0f 2e       	mov	r0, r31
     1e2:	f7 e2       	ldi	r31, 0x27	; 39
     1e4:	2f 2e       	mov	r2, r31
     1e6:	f1 e0       	ldi	r31, 0x01	; 1
     1e8:	3f 2e       	mov	r3, r31
     1ea:	f0 2d       	mov	r31, r0
	unsigned int delta = 0; //difference between min and max
	int samples[FT_SAMPLES]; //array to hold sample ft_Values
	int avg = 0;
	for(int lol = 0; lol < FT_MEASUREMENTS; lol++) //measurement loop
	{
		Serial.print("Measurement ");
     1ec:	c7 01       	movw	r24, r14
     1ee:	60 e0       	ldi	r22, 0x00	; 0
     1f0:	71 e0       	ldi	r23, 0x01	; 1
     1f2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(lol);
     1f6:	c7 01       	movw	r24, r14
     1f8:	b4 01       	movw	r22, r8
     1fa:	4a e0       	ldi	r20, 0x0A	; 10
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", value: ");
     202:	c7 01       	movw	r24, r14
     204:	6d e0       	ldi	r22, 0x0D	; 13
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
bool initSecondaryFlashlightTest(void)
{
	
}

bool initFlashlightTest(void)
     20c:	82 01       	movw	r16, r4
	for(int lol = 0; lol < FT_MEASUREMENTS; lol++) //measurement loop
	{
		Serial.print("Measurement ");
		Serial.print(lol);
		Serial.print(", value: ");
		Serial.print(ft_Values[lol]);
     20e:	f2 01       	movw	r30, r4
     210:	61 91       	ld	r22, Z+
     212:	71 91       	ld	r23, Z+
     214:	2f 01       	movw	r4, r30
     216:	c7 01       	movw	r24, r14
     218:	4a e0       	ldi	r20, 0x0A	; 10
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", ft_Target: ");
     220:	c7 01       	movw	r24, r14
     222:	67 e1       	ldi	r22, 0x17	; 23
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(ft_Target[lol]);
     22a:	ef 81       	ldd	r30, Y+7	; 0x07
     22c:	f8 85       	ldd	r31, Y+8	; 0x08
     22e:	61 91       	ld	r22, Z+
     230:	71 91       	ld	r23, Z+
     232:	f8 87       	std	Y+8, r31	; 0x08
     234:	ef 83       	std	Y+7, r30	; 0x07
     236:	c7 01       	movw	r24, r14
     238:	4a e0       	ldi	r20, 0x0A	; 10
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print("\n");
     240:	c7 01       	movw	r24, r14
     242:	b3 01       	movw	r22, r6
     244:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		cubelets.setBroadcastBlockValueByFace(FACE, ft_Values[lol]);
     248:	8c e9       	ldi	r24, 0x9C	; 156
     24a:	93 e0       	ldi	r25, 0x03	; 3
     24c:	61 e0       	ldi	r22, 0x01	; 1
     24e:	f8 01       	movw	r30, r16
     250:	40 81       	ld	r20, Z
     252:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
		delay(500);
     256:	64 ef       	ldi	r22, 0xF4	; 244
     258:	71 e0       	ldi	r23, 0x01	; 1
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
     262:	0f 2e       	mov	r0, r31
     264:	f3 e0       	ldi	r31, 0x03	; 3
     266:	cf 2e       	mov	r12, r31
     268:	dd 24       	eor	r13, r13
     26a:	f0 2d       	mov	r31, r0
     26c:	aa 24       	eor	r10, r10
     26e:	bb 24       	eor	r11, r11
		for(int i = 0; i < FT_SAMPLES; i++) //sample loop
		{
			samples[i]=analogRead(READ_PIN)/4; //div by 4 to scale from 10-bit to 8-bit
     270:	8e e0       	ldi	r24, 0x0E	; 14
     272:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <analogRead>
     276:	28 2f       	mov	r18, r24
     278:	39 2f       	mov	r19, r25
     27a:	33 23       	and	r19, r19
     27c:	14 f4       	brge	.+4      	; 0x282 <_Z18initFlashlightTestv+0x10e>
     27e:	2d 5f       	subi	r18, 0xFD	; 253
     280:	3f 4f       	sbci	r19, 0xFF	; 255
     282:	89 01       	movw	r16, r18
     284:	15 95       	asr	r17
     286:	07 95       	ror	r16
     288:	15 95       	asr	r17
     28a:	07 95       	ror	r16
			Serial.print("Sample: ");
     28c:	c7 01       	movw	r24, r14
     28e:	b1 01       	movw	r22, r2
     290:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
			Serial.print(samples[i]);
     294:	c7 01       	movw	r24, r14
     296:	b8 01       	movw	r22, r16
     298:	4a e0       	ldi	r20, 0x0A	; 10
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
			Serial.print("\n");
     2a0:	c7 01       	movw	r24, r14
     2a2:	b3 01       	movw	r22, r6
     2a4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
			avg += samples[i]; //summing the samples into the avg var
     2a8:	a0 0e       	add	r10, r16
     2aa:	b1 1e       	adc	r11, r17
			delay(100);
     2ac:	64 e6       	ldi	r22, 0x64	; 100
     2ae:	70 e0       	ldi	r23, 0x00	; 0
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
     2b8:	08 94       	sec
     2ba:	c1 08       	sbc	r12, r1
     2bc:	d1 08       	sbc	r13, r1
		Serial.print(", ft_Target: ");
		Serial.print(ft_Target[lol]);
		Serial.print("\n");
		cubelets.setBroadcastBlockValueByFace(FACE, ft_Values[lol]);
		delay(500);
		for(int i = 0; i < FT_SAMPLES; i++) //sample loop
     2be:	c1 14       	cp	r12, r1
     2c0:	d1 04       	cpc	r13, r1
     2c2:	b1 f6       	brne	.-84     	; 0x270 <_Z18initFlashlightTestv+0xfc>
			Serial.print(samples[i]);
			Serial.print("\n");
			avg += samples[i]; //summing the samples into the avg var
			delay(100);
		}
		avg = avg/FT_SAMPLES; //divide sum by number of samples to get mean sample value = measurement value
     2c4:	c5 01       	movw	r24, r10
     2c6:	63 e0       	ldi	r22, 0x03	; 3
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	0e 94 1a 10 	call	0x2034	; 0x2034 <__divmodhi4>
		measurements[lol] = avg;
     2ce:	e9 85       	ldd	r30, Y+9	; 0x09
     2d0:	fa 85       	ldd	r31, Y+10	; 0x0a
     2d2:	61 93       	st	Z+, r22
     2d4:	71 93       	st	Z+, r23
     2d6:	fa 87       	std	Y+10, r31	; 0x0a
     2d8:	e9 87       	std	Y+9, r30	; 0x09
		if((lol == 0) && (measurements[lol] > (235-FT_MIN_DELTA)))
     2da:	81 14       	cp	r8, r1
     2dc:	91 04       	cpc	r9, r1
     2de:	29 f5       	brne	.+74     	; 0x32a <_Z18initFlashlightTestv+0x1b6>
     2e0:	60 3b       	cpi	r22, 0xB0	; 176
     2e2:	71 05       	cpc	r23, r1
     2e4:	14 f1       	brlt	.+68     	; 0x32a <_Z18initFlashlightTestv+0x1b6>
		{
			Serial.print("Too bright!");
     2e6:	81 e6       	ldi	r24, 0x61	; 97
     2e8:	94 e0       	ldi	r25, 0x04	; 4
     2ea:	60 e3       	ldi	r22, 0x30	; 48
     2ec:	71 e0       	ldi	r23, 0x01	; 1
     2ee:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
			while(!digitalRead(DETECT_PIN))
     2f2:	14 c0       	rjmp	.+40     	; 0x31c <_Z18initFlashlightTestv+0x1a8>
			{
				digitalWrite(FAIL_PIN, HIGH);
     2f4:	89 e0       	ldi	r24, 0x09	; 9
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
				delay(100);
     2fc:	64 e6       	ldi	r22, 0x64	; 100
     2fe:	70 e0       	ldi	r23, 0x00	; 0
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
				digitalWrite(FAIL_PIN, LOW);
     308:	89 e0       	ldi	r24, 0x09	; 9
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
				delay(100);
     310:	64 e6       	ldi	r22, 0x64	; 100
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
		avg = avg/FT_SAMPLES; //divide sum by number of samples to get mean sample value = measurement value
		measurements[lol] = avg;
		if((lol == 0) && (measurements[lol] > (235-FT_MIN_DELTA)))
		{
			Serial.print("Too bright!");
			while(!digitalRead(DETECT_PIN))
     31c:	88 e0       	ldi	r24, 0x08	; 8
     31e:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     322:	00 97       	sbiw	r24, 0x00	; 0
     324:	39 f3       	breq	.-50     	; 0x2f4 <_Z18initFlashlightTestv+0x180>
				digitalWrite(FAIL_PIN, HIGH);
				delay(100);
				digitalWrite(FAIL_PIN, LOW);
				delay(100);
			}
			return 0;
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	ca c0       	rjmp	.+404    	; 0x4be <_Z18initFlashlightTestv+0x34a>
	unsigned int error = 0;	//sum of errors
	int measurements[FT_MEASUREMENTS];
	unsigned int delta = 0; //difference between min and max
	int samples[FT_SAMPLES]; //array to hold sample ft_Values
	int avg = 0;
	for(int lol = 0; lol < FT_MEASUREMENTS; lol++) //measurement loop
     32a:	08 94       	sec
     32c:	81 1c       	adc	r8, r1
     32e:	91 1c       	adc	r9, r1
     330:	f3 e0       	ldi	r31, 0x03	; 3
     332:	8f 16       	cp	r8, r31
     334:	91 04       	cpc	r9, r1
     336:	09 f0       	breq	.+2      	; 0x33a <_Z18initFlashlightTestv+0x1c6>
     338:	59 cf       	rjmp	.-334    	; 0x1ec <_Z18initFlashlightTestv+0x78>
			}
			return 0;
		}
		avg = 0; //zero out avg
	}
	cubelets.setBroadcastBlockValueByFace(FACE, 0); //zero out cubelet
     33a:	8c e9       	ldi	r24, 0x9C	; 156
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	40 e0       	ldi	r20, 0x00	; 0
     342:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
	delta = abs(measurements[1] - measurements[0]);
     346:	eb 80       	ldd	r14, Y+3	; 0x03
     348:	fc 80       	ldd	r15, Y+4	; 0x04
     34a:	a9 80       	ldd	r10, Y+1	; 0x01
     34c:	ba 80       	ldd	r11, Y+2	; 0x02
     34e:	87 01       	movw	r16, r14
     350:	0a 19       	sub	r16, r10
     352:	1b 09       	sbc	r17, r11
     354:	1a f4       	brpl	.+6      	; 0x35c <_Z18initFlashlightTestv+0x1e8>
     356:	10 95       	com	r17
     358:	01 95       	neg	r16
     35a:	1f 4f       	sbci	r17, 0xFF	; 255
	Serial.print("Max = ");
     35c:	0f 2e       	mov	r0, r31
     35e:	f1 e6       	ldi	r31, 0x61	; 97
     360:	cf 2e       	mov	r12, r31
     362:	f4 e0       	ldi	r31, 0x04	; 4
     364:	df 2e       	mov	r13, r31
     366:	f0 2d       	mov	r31, r0
     368:	c6 01       	movw	r24, r12
     36a:	6c e3       	ldi	r22, 0x3C	; 60
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[1]);
     372:	c6 01       	movw	r24, r12
     374:	b7 01       	movw	r22, r14
     376:	4a e0       	ldi	r20, 0x0A	; 10
     378:	50 e0       	ldi	r21, 0x00	; 0
     37a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print("Min = ");
     37e:	c6 01       	movw	r24, r12
     380:	63 e4       	ldi	r22, 0x43	; 67
     382:	71 e0       	ldi	r23, 0x01	; 1
     384:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[0]);
     388:	c6 01       	movw	r24, r12
     38a:	b5 01       	movw	r22, r10
     38c:	4a e0       	ldi	r20, 0x0A	; 10
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print(", Delta: ");
     394:	c6 01       	movw	r24, r12
     396:	6a e4       	ldi	r22, 0x4A	; 74
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(delta);
     39e:	c6 01       	movw	r24, r12
     3a0:	b8 01       	movw	r22, r16
     3a2:	4a e0       	ldi	r20, 0x0A	; 10
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN5Print5printEji>
	Serial.print(", Measured Median:");
     3aa:	c6 01       	movw	r24, r12
     3ac:	64 e5       	ldi	r22, 0x54	; 84
     3ae:	71 e0       	ldi	r23, 0x01	; 1
     3b0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[2]);
     3b4:	8d 80       	ldd	r8, Y+5	; 0x05
     3b6:	9e 80       	ldd	r9, Y+6	; 0x06
     3b8:	c6 01       	movw	r24, r12
     3ba:	b4 01       	movw	r22, r8
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print("\n");
     3c4:	0f 2e       	mov	r0, r31
     3c6:	f5 e2       	ldi	r31, 0x25	; 37
     3c8:	6f 2e       	mov	r6, r31
     3ca:	f1 e0       	ldi	r31, 0x01	; 1
     3cc:	7f 2e       	mov	r7, r31
     3ce:	f0 2d       	mov	r31, r0
     3d0:	c6 01       	movw	r24, r12
     3d2:	b3 01       	movw	r22, r6
     3d4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print("Error: ");
     3d8:	c6 01       	movw	r24, r12
     3da:	67 e6       	ldi	r22, 0x67	; 103
     3dc:	71 e0       	ldi	r23, 0x01	; 1
     3de:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(error);
     3e2:	c6 01       	movw	r24, r12
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	4a e0       	ldi	r20, 0x0A	; 10
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN5Print5printEji>
	Serial.print("\n");
     3f0:	c6 01       	movw	r24, r12
     3f2:	b3 01       	movw	r22, r6
     3f4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	
	if(delta < FT_MIN_DELTA)
     3f8:	0c 33       	cpi	r16, 0x3C	; 60
     3fa:	11 05       	cpc	r17, r1
     3fc:	38 f4       	brcc	.+14     	; 0x40c <_Z18initFlashlightTestv+0x298>
	{
		Serial.print("Failing, delta too small");
     3fe:	c6 01       	movw	r24, r12
     400:	6f e6       	ldi	r22, 0x6F	; 111
     402:	71 e0       	ldi	r23, 0x01	; 1
     404:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		return 0; //fail if delta is too small
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	59 c0       	rjmp	.+178    	; 0x4be <_Z18initFlashlightTestv+0x34a>
	}		
	if((measurements[1] - measurements[2] > 20) && (measurements[2] - measurements[0] > 20))
     40c:	e8 18       	sub	r14, r8
     40e:	f9 08       	sbc	r15, r9
     410:	85 e1       	ldi	r24, 0x15	; 21
     412:	e8 16       	cp	r14, r24
     414:	f1 04       	cpc	r15, r1
     416:	74 f1       	brlt	.+92     	; 0x474 <_Z18initFlashlightTestv+0x300>
     418:	84 01       	movw	r16, r8
     41a:	0a 19       	sub	r16, r10
     41c:	1b 09       	sbc	r17, r11
     41e:	05 31       	cpi	r16, 0x15	; 21
     420:	11 05       	cpc	r17, r1
     422:	44 f1       	brlt	.+80     	; 0x474 <_Z18initFlashlightTestv+0x300>
	{
		Serial.print("Passing: ");
     424:	0f 2e       	mov	r0, r31
     426:	f1 e6       	ldi	r31, 0x61	; 97
     428:	cf 2e       	mov	r12, r31
     42a:	f4 e0       	ldi	r31, 0x04	; 4
     42c:	df 2e       	mov	r13, r31
     42e:	f0 2d       	mov	r31, r0
     430:	c6 01       	movw	r24, r12
     432:	68 e8       	ldi	r22, 0x88	; 136
     434:	71 e0       	ldi	r23, 0x01	; 1
     436:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print("m1 - m2 = ");
     43a:	c6 01       	movw	r24, r12
     43c:	62 e9       	ldi	r22, 0x92	; 146
     43e:	71 e0       	ldi	r23, 0x01	; 1
     440:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[1] - measurements[2]);
     444:	c6 01       	movw	r24, r12
     446:	b7 01       	movw	r22, r14
     448:	4a e0       	ldi	r20, 0x0A	; 10
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", m2 - m0 = ");
     450:	c6 01       	movw	r24, r12
     452:	6d e9       	ldi	r22, 0x9D	; 157
     454:	71 e0       	ldi	r23, 0x01	; 1
     456:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[2] - measurements[0]);
     45a:	c6 01       	movw	r24, r12
     45c:	b8 01       	movw	r22, r16
     45e:	4a e0       	ldi	r20, 0x0A	; 10
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print("\n");	
     466:	c6 01       	movw	r24, r12
     468:	65 e2       	ldi	r22, 0x25	; 37
     46a:	71 e0       	ldi	r23, 0x01	; 1
     46c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		return 1; //pass if the middle is at least 25 away from min and max
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	25 c0       	rjmp	.+74     	; 0x4be <_Z18initFlashlightTestv+0x34a>
	}	
	else
		Serial.print("Failing: ");
     474:	01 e6       	ldi	r16, 0x61	; 97
     476:	14 e0       	ldi	r17, 0x04	; 4
     478:	c8 01       	movw	r24, r16
     47a:	6a ea       	ldi	r22, 0xAA	; 170
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print("m1 - m2 = ");
     482:	c8 01       	movw	r24, r16
     484:	62 e9       	ldi	r22, 0x92	; 146
     486:	71 e0       	ldi	r23, 0x01	; 1
     488:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[1] - measurements[2]);
     48c:	c8 01       	movw	r24, r16
     48e:	b7 01       	movw	r22, r14
     490:	4a e0       	ldi	r20, 0x0A	; 10
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", m2 - m0 = ");
     498:	c8 01       	movw	r24, r16
     49a:	6d e9       	ldi	r22, 0x9D	; 157
     49c:	71 e0       	ldi	r23, 0x01	; 1
     49e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[2] - measurements[0]);
     4a2:	b4 01       	movw	r22, r8
     4a4:	6a 19       	sub	r22, r10
     4a6:	7b 09       	sbc	r23, r11
     4a8:	c8 01       	movw	r24, r16
     4aa:	4a e0       	ldi	r20, 0x0A	; 10
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print("\n");	
     4b2:	c8 01       	movw	r24, r16
     4b4:	65 e2       	ldi	r22, 0x25	; 37
     4b6:	71 e0       	ldi	r23, 0x01	; 1
     4b8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		return 0;
     4bc:	80 e0       	ldi	r24, 0x00	; 0
}
     4be:	2a 96       	adiw	r28, 0x0a	; 10
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	1f 91       	pop	r17
     4d0:	0f 91       	pop	r16
     4d2:	ff 90       	pop	r15
     4d4:	ef 90       	pop	r14
     4d6:	df 90       	pop	r13
     4d8:	cf 90       	pop	r12
     4da:	bf 90       	pop	r11
     4dc:	af 90       	pop	r10
     4de:	9f 90       	pop	r9
     4e0:	8f 90       	pop	r8
     4e2:	7f 90       	pop	r7
     4e4:	6f 90       	pop	r6
     4e6:	5f 90       	pop	r5
     4e8:	4f 90       	pop	r4
     4ea:	3f 90       	pop	r3
     4ec:	2f 90       	pop	r2
     4ee:	08 95       	ret

000004f0 <_Z18initBrightnessTestv>:

bool initBrightnessTest(void)
{
     4f0:	2f 92       	push	r2
     4f2:	3f 92       	push	r3
     4f4:	4f 92       	push	r4
     4f6:	5f 92       	push	r5
     4f8:	6f 92       	push	r6
     4fa:	7f 92       	push	r7
     4fc:	8f 92       	push	r8
     4fe:	9f 92       	push	r9
     500:	af 92       	push	r10
     502:	bf 92       	push	r11
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	2a 97       	sbiw	r28, 0x0a	; 10
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
	unsigned int delta = 0; //difference between min and max
	int samples[BT_SAMPLES]; //array to hold sample BT_Values
	int avg = 0;
	
	//pre-test brightness check
	if(analogRead(READ_PIN) > 235-BT_MIN_DELTA)
     524:	8e e0       	ldi	r24, 0x0E	; 14
     526:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <analogRead>
     52a:	81 3a       	cpi	r24, 0xA1	; 161
     52c:	91 05       	cpc	r25, r1
     52e:	14 f1       	brlt	.+68     	; 0x574 <_Z18initBrightnessTestv+0x84>
	{
		Serial.print("Too bright!");
     530:	81 e6       	ldi	r24, 0x61	; 97
     532:	94 e0       	ldi	r25, 0x04	; 4
     534:	60 e3       	ldi	r22, 0x30	; 48
     536:	71 e0       	ldi	r23, 0x01	; 1
     538:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		while(!digitalRead(DETECT_PIN))
     53c:	14 c0       	rjmp	.+40     	; 0x566 <_Z18initBrightnessTestv+0x76>
		{
			digitalWrite(FAIL_PIN, HIGH);
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	61 e0       	ldi	r22, 0x01	; 1
     542:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
			delay(100);
     546:	64 e6       	ldi	r22, 0x64	; 100
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
			digitalWrite(FAIL_PIN, LOW);
     552:	89 e0       	ldi	r24, 0x09	; 9
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
			delay(100);
     55a:	64 e6       	ldi	r22, 0x64	; 100
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
	
	//pre-test brightness check
	if(analogRead(READ_PIN) > 235-BT_MIN_DELTA)
	{
		Serial.print("Too bright!");
		while(!digitalRead(DETECT_PIN))
     566:	88 e0       	ldi	r24, 0x08	; 8
     568:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     56c:	00 97       	sbiw	r24, 0x00	; 0
     56e:	39 f3       	breq	.-50     	; 0x53e <_Z18initBrightnessTestv+0x4e>
			digitalWrite(FAIL_PIN, HIGH);
			delay(100);
			digitalWrite(FAIL_PIN, LOW);
			delay(100);
		}
		return 0;
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	5a c1       	rjmp	.+692    	; 0x828 <_Z18initBrightnessTestv+0x338>
	
	//pre-test brightness check
	if(analogRead(READ_PIN) > 235-BT_MIN_DELTA)
	{
		Serial.print("Too bright!");
		while(!digitalRead(DETECT_PIN))
     574:	82 e7       	ldi	r24, 0x72	; 114
     576:	93 e0       	ldi	r25, 0x03	; 3
     578:	98 87       	std	Y+8, r25	; 0x08
     57a:	8f 83       	std	Y+7, r24	; 0x07
     57c:	0f 2e       	mov	r0, r31
     57e:	f8 e7       	ldi	r31, 0x78	; 120
     580:	4f 2e       	mov	r4, r31
     582:	f3 e0       	ldi	r31, 0x03	; 3
     584:	5f 2e       	mov	r5, r31
     586:	f0 2d       	mov	r31, r0
     588:	fe 01       	movw	r30, r28
     58a:	31 96       	adiw	r30, 0x01	; 1
     58c:	fa 87       	std	Y+10, r31	; 0x0a
     58e:	e9 87       	std	Y+9, r30	; 0x09
	unsigned int delta = 0; //difference between min and max
	int samples[BT_SAMPLES]; //array to hold sample BT_Values
	int avg = 0;
	
	//pre-test brightness check
	if(analogRead(READ_PIN) > 235-BT_MIN_DELTA)
     590:	66 24       	eor	r6, r6
     592:	77 24       	eor	r7, r7
		return 0;
	}
	
	for(int lol = 0; lol < BT_MEASUREMENTS; lol++) //measurement loop
	{
		Serial.print("Measurement ");
     594:	0f 2e       	mov	r0, r31
     596:	f1 e6       	ldi	r31, 0x61	; 97
     598:	ef 2e       	mov	r14, r31
     59a:	f4 e0       	ldi	r31, 0x04	; 4
     59c:	ff 2e       	mov	r15, r31
     59e:	f0 2d       	mov	r31, r0
		Serial.print(lol);
		Serial.print(", value: ");
		Serial.print(bt_Values[lol]);
		Serial.print(", bt_Target: ");
		Serial.print(bt_Target[lol]);
		Serial.print("\n");
     5a0:	0f 2e       	mov	r0, r31
     5a2:	f5 e2       	ldi	r31, 0x25	; 37
     5a4:	8f 2e       	mov	r8, r31
     5a6:	f1 e0       	ldi	r31, 0x01	; 1
     5a8:	9f 2e       	mov	r9, r31
     5aa:	f0 2d       	mov	r31, r0
		analogWrite(LED_PIN, bt_Values[lol]);
		delay(500);
		for(int i = 0; i < BT_SAMPLES; i++) //sample loop
		{
			samples[i]=cubelets.getNeighborBlockValueByFace(FACE); //div by 4 to scale from 10-bit to 8-bit
     5ac:	0f 2e       	mov	r0, r31
     5ae:	fc e9       	ldi	r31, 0x9C	; 156
     5b0:	2f 2e       	mov	r2, r31
     5b2:	f3 e0       	ldi	r31, 0x03	; 3
     5b4:	3f 2e       	mov	r3, r31
     5b6:	f0 2d       	mov	r31, r0
		return 0;
	}
	
	for(int lol = 0; lol < BT_MEASUREMENTS; lol++) //measurement loop
	{
		Serial.print("Measurement ");
     5b8:	c7 01       	movw	r24, r14
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	71 e0       	ldi	r23, 0x01	; 1
     5be:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(lol);
     5c2:	c7 01       	movw	r24, r14
     5c4:	b3 01       	movw	r22, r6
     5c6:	4a e0       	ldi	r20, 0x0A	; 10
     5c8:	50 e0       	ldi	r21, 0x00	; 0
     5ca:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", value: ");
     5ce:	c7 01       	movw	r24, r14
     5d0:	6d e0       	ldi	r22, 0x0D	; 13
     5d2:	71 e0       	ldi	r23, 0x01	; 1
     5d4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[2] - measurements[0]);
		Serial.print("\n");	
		return 0;
}

bool initBrightnessTest(void)
     5d8:	82 01       	movw	r16, r4
	for(int lol = 0; lol < BT_MEASUREMENTS; lol++) //measurement loop
	{
		Serial.print("Measurement ");
		Serial.print(lol);
		Serial.print(", value: ");
		Serial.print(bt_Values[lol]);
     5da:	f2 01       	movw	r30, r4
     5dc:	61 91       	ld	r22, Z+
     5de:	71 91       	ld	r23, Z+
     5e0:	2f 01       	movw	r4, r30
     5e2:	c7 01       	movw	r24, r14
     5e4:	4a e0       	ldi	r20, 0x0A	; 10
     5e6:	50 e0       	ldi	r21, 0x00	; 0
     5e8:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", bt_Target: ");
     5ec:	c7 01       	movw	r24, r14
     5ee:	64 eb       	ldi	r22, 0xB4	; 180
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(bt_Target[lol]);
     5f6:	ef 81       	ldd	r30, Y+7	; 0x07
     5f8:	f8 85       	ldd	r31, Y+8	; 0x08
     5fa:	61 91       	ld	r22, Z+
     5fc:	71 91       	ld	r23, Z+
     5fe:	f8 87       	std	Y+8, r31	; 0x08
     600:	ef 83       	std	Y+7, r30	; 0x07
     602:	c7 01       	movw	r24, r14
     604:	4a e0       	ldi	r20, 0x0A	; 10
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print("\n");
     60c:	c7 01       	movw	r24, r14
     60e:	b4 01       	movw	r22, r8
     610:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		analogWrite(LED_PIN, bt_Values[lol]);
     614:	f8 01       	movw	r30, r16
     616:	60 81       	ld	r22, Z
     618:	71 81       	ldd	r23, Z+1	; 0x01
     61a:	83 e0       	ldi	r24, 0x03	; 3
     61c:	0e 94 12 0b 	call	0x1624	; 0x1624 <analogWrite>
		delay(500);
     620:	64 ef       	ldi	r22, 0xF4	; 244
     622:	71 e0       	ldi	r23, 0x01	; 1
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
     62c:	0f 2e       	mov	r0, r31
     62e:	f3 e0       	ldi	r31, 0x03	; 3
     630:	cf 2e       	mov	r12, r31
     632:	dd 24       	eor	r13, r13
     634:	f0 2d       	mov	r31, r0
     636:	aa 24       	eor	r10, r10
     638:	bb 24       	eor	r11, r11
		for(int i = 0; i < BT_SAMPLES; i++) //sample loop
		{
			samples[i]=cubelets.getNeighborBlockValueByFace(FACE); //div by 4 to scale from 10-bit to 8-bit
     63a:	c1 01       	movw	r24, r2
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>
     642:	08 2f       	mov	r16, r24
     644:	10 e0       	ldi	r17, 0x00	; 0
			Serial.print("Sample: ");
     646:	c7 01       	movw	r24, r14
     648:	67 e2       	ldi	r22, 0x27	; 39
     64a:	71 e0       	ldi	r23, 0x01	; 1
     64c:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
			Serial.print(samples[i]);
     650:	c7 01       	movw	r24, r14
     652:	b8 01       	movw	r22, r16
     654:	4a e0       	ldi	r20, 0x0A	; 10
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
			Serial.print("\n");
     65c:	c7 01       	movw	r24, r14
     65e:	b4 01       	movw	r22, r8
     660:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
			avg += samples[i]; //summing the samples into the avg var
     664:	a0 0e       	add	r10, r16
     666:	b1 1e       	adc	r11, r17
			delay(100);
     668:	64 e6       	ldi	r22, 0x64	; 100
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
     674:	08 94       	sec
     676:	c1 08       	sbc	r12, r1
     678:	d1 08       	sbc	r13, r1
		Serial.print(", bt_Target: ");
		Serial.print(bt_Target[lol]);
		Serial.print("\n");
		analogWrite(LED_PIN, bt_Values[lol]);
		delay(500);
		for(int i = 0; i < BT_SAMPLES; i++) //sample loop
     67a:	c1 14       	cp	r12, r1
     67c:	d1 04       	cpc	r13, r1
     67e:	e9 f6       	brne	.-70     	; 0x63a <_Z18initBrightnessTestv+0x14a>
			Serial.print(samples[i]);
			Serial.print("\n");
			avg += samples[i]; //summing the samples into the avg var
			delay(100);
		}
		avg = avg/BT_SAMPLES; //divide sum by number of samples to get mean sample value = measurement value
     680:	c5 01       	movw	r24, r10
     682:	63 e0       	ldi	r22, 0x03	; 3
     684:	70 e0       	ldi	r23, 0x00	; 0
     686:	0e 94 1a 10 	call	0x2034	; 0x2034 <__divmodhi4>
		measurements[lol] = avg;
     68a:	e9 85       	ldd	r30, Y+9	; 0x09
     68c:	fa 85       	ldd	r31, Y+10	; 0x0a
     68e:	61 93       	st	Z+, r22
     690:	71 93       	st	Z+, r23
     692:	fa 87       	std	Y+10, r31	; 0x0a
     694:	e9 87       	std	Y+9, r30	; 0x09
			delay(100);
		}
		return 0;
	}
	
	for(int lol = 0; lol < BT_MEASUREMENTS; lol++) //measurement loop
     696:	08 94       	sec
     698:	61 1c       	adc	r6, r1
     69a:	71 1c       	adc	r7, r1
     69c:	f3 e0       	ldi	r31, 0x03	; 3
     69e:	6f 16       	cp	r6, r31
     6a0:	71 04       	cpc	r7, r1
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <_Z18initBrightnessTestv+0x1b6>
     6a4:	89 cf       	rjmp	.-238    	; 0x5b8 <_Z18initBrightnessTestv+0xc8>
			}
			return 0;
		}*/
		avg = 0; //zero out avg
	}
	analogWrite(LED_PIN, 0); //zero out cubelet
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	60 e0       	ldi	r22, 0x00	; 0
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	0e 94 12 0b 	call	0x1624	; 0x1624 <analogWrite>
	delta = abs(measurements[1] - measurements[0]);
     6b0:	eb 80       	ldd	r14, Y+3	; 0x03
     6b2:	fc 80       	ldd	r15, Y+4	; 0x04
     6b4:	a9 80       	ldd	r10, Y+1	; 0x01
     6b6:	ba 80       	ldd	r11, Y+2	; 0x02
     6b8:	87 01       	movw	r16, r14
     6ba:	0a 19       	sub	r16, r10
     6bc:	1b 09       	sbc	r17, r11
     6be:	1a f4       	brpl	.+6      	; 0x6c6 <_Z18initBrightnessTestv+0x1d6>
     6c0:	10 95       	com	r17
     6c2:	01 95       	neg	r16
     6c4:	1f 4f       	sbci	r17, 0xFF	; 255
	Serial.print("Max = ");
     6c6:	0f 2e       	mov	r0, r31
     6c8:	f1 e6       	ldi	r31, 0x61	; 97
     6ca:	cf 2e       	mov	r12, r31
     6cc:	f4 e0       	ldi	r31, 0x04	; 4
     6ce:	df 2e       	mov	r13, r31
     6d0:	f0 2d       	mov	r31, r0
     6d2:	c6 01       	movw	r24, r12
     6d4:	6c e3       	ldi	r22, 0x3C	; 60
     6d6:	71 e0       	ldi	r23, 0x01	; 1
     6d8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[1]);
     6dc:	c6 01       	movw	r24, r12
     6de:	b7 01       	movw	r22, r14
     6e0:	4a e0       	ldi	r20, 0x0A	; 10
     6e2:	50 e0       	ldi	r21, 0x00	; 0
     6e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print("Min = ");
     6e8:	c6 01       	movw	r24, r12
     6ea:	63 e4       	ldi	r22, 0x43	; 67
     6ec:	71 e0       	ldi	r23, 0x01	; 1
     6ee:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[0]);
     6f2:	c6 01       	movw	r24, r12
     6f4:	b5 01       	movw	r22, r10
     6f6:	4a e0       	ldi	r20, 0x0A	; 10
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print(", Delta: ");
     6fe:	c6 01       	movw	r24, r12
     700:	6a e4       	ldi	r22, 0x4A	; 74
     702:	71 e0       	ldi	r23, 0x01	; 1
     704:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(delta);
     708:	c6 01       	movw	r24, r12
     70a:	b8 01       	movw	r22, r16
     70c:	4a e0       	ldi	r20, 0x0A	; 10
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN5Print5printEji>
	Serial.print(", Measured Median:");
     714:	c6 01       	movw	r24, r12
     716:	64 e5       	ldi	r22, 0x54	; 84
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[2]);
     71e:	8d 80       	ldd	r8, Y+5	; 0x05
     720:	9e 80       	ldd	r9, Y+6	; 0x06
     722:	c6 01       	movw	r24, r12
     724:	b4 01       	movw	r22, r8
     726:	4a e0       	ldi	r20, 0x0A	; 10
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print("\n");
     72e:	0f 2e       	mov	r0, r31
     730:	f5 e2       	ldi	r31, 0x25	; 37
     732:	6f 2e       	mov	r6, r31
     734:	f1 e0       	ldi	r31, 0x01	; 1
     736:	7f 2e       	mov	r7, r31
     738:	f0 2d       	mov	r31, r0
     73a:	c6 01       	movw	r24, r12
     73c:	b3 01       	movw	r22, r6
     73e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print("Error: ");
     742:	c6 01       	movw	r24, r12
     744:	67 e6       	ldi	r22, 0x67	; 103
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(error);
     74c:	c6 01       	movw	r24, r12
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	4a e0       	ldi	r20, 0x0A	; 10
     754:	50 e0       	ldi	r21, 0x00	; 0
     756:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN5Print5printEji>
	Serial.print("\n");
     75a:	c6 01       	movw	r24, r12
     75c:	b3 01       	movw	r22, r6
     75e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	
	if(delta < BT_MIN_DELTA)
     762:	0b 34       	cpi	r16, 0x4B	; 75
     764:	11 05       	cpc	r17, r1
     766:	38 f4       	brcc	.+14     	; 0x776 <_Z18initBrightnessTestv+0x286>
	{
		Serial.print("Failing, delta too large");
     768:	c6 01       	movw	r24, r12
     76a:	62 ec       	ldi	r22, 0xC2	; 194
     76c:	71 e0       	ldi	r23, 0x01	; 1
     76e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		return 0; //fail if delta is too small
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	59 c0       	rjmp	.+178    	; 0x828 <_Z18initBrightnessTestv+0x338>
	}
	if((measurements[1] - measurements[2] > 20) && (measurements[2] - measurements[0] > 20))
     776:	e8 18       	sub	r14, r8
     778:	f9 08       	sbc	r15, r9
     77a:	85 e1       	ldi	r24, 0x15	; 21
     77c:	e8 16       	cp	r14, r24
     77e:	f1 04       	cpc	r15, r1
     780:	74 f1       	brlt	.+92     	; 0x7de <_Z18initBrightnessTestv+0x2ee>
     782:	84 01       	movw	r16, r8
     784:	0a 19       	sub	r16, r10
     786:	1b 09       	sbc	r17, r11
     788:	05 31       	cpi	r16, 0x15	; 21
     78a:	11 05       	cpc	r17, r1
     78c:	44 f1       	brlt	.+80     	; 0x7de <_Z18initBrightnessTestv+0x2ee>
	{
		Serial.print("Passing: ");
     78e:	0f 2e       	mov	r0, r31
     790:	f1 e6       	ldi	r31, 0x61	; 97
     792:	cf 2e       	mov	r12, r31
     794:	f4 e0       	ldi	r31, 0x04	; 4
     796:	df 2e       	mov	r13, r31
     798:	f0 2d       	mov	r31, r0
     79a:	c6 01       	movw	r24, r12
     79c:	68 e8       	ldi	r22, 0x88	; 136
     79e:	71 e0       	ldi	r23, 0x01	; 1
     7a0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print("m1 - m2 = ");
     7a4:	c6 01       	movw	r24, r12
     7a6:	62 e9       	ldi	r22, 0x92	; 146
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[1] - measurements[2]);
     7ae:	c6 01       	movw	r24, r12
     7b0:	b7 01       	movw	r22, r14
     7b2:	4a e0       	ldi	r20, 0x0A	; 10
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print(", m2 - m0 = ");
     7ba:	c6 01       	movw	r24, r12
     7bc:	6d e9       	ldi	r22, 0x9D	; 157
     7be:	71 e0       	ldi	r23, 0x01	; 1
     7c0:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		Serial.print(measurements[2] - measurements[0]);
     7c4:	c6 01       	movw	r24, r12
     7c6:	b8 01       	movw	r22, r16
     7c8:	4a e0       	ldi	r20, 0x0A	; 10
     7ca:	50 e0       	ldi	r21, 0x00	; 0
     7cc:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
		Serial.print("\n");
     7d0:	c6 01       	movw	r24, r12
     7d2:	65 e2       	ldi	r22, 0x25	; 37
     7d4:	71 e0       	ldi	r23, 0x01	; 1
     7d6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		return 1; //pass if the middle is at least 25 away from min and max
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	25 c0       	rjmp	.+74     	; 0x828 <_Z18initBrightnessTestv+0x338>
	}
	else
	Serial.print("Failing: ");
     7de:	01 e6       	ldi	r16, 0x61	; 97
     7e0:	14 e0       	ldi	r17, 0x04	; 4
     7e2:	c8 01       	movw	r24, r16
     7e4:	6a ea       	ldi	r22, 0xAA	; 170
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print("m1 - m2 = ");
     7ec:	c8 01       	movw	r24, r16
     7ee:	62 e9       	ldi	r22, 0x92	; 146
     7f0:	71 e0       	ldi	r23, 0x01	; 1
     7f2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[1] - measurements[2]);
     7f6:	c8 01       	movw	r24, r16
     7f8:	b7 01       	movw	r22, r14
     7fa:	4a e0       	ldi	r20, 0x0A	; 10
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print(", m2 - m0 = ");
     802:	c8 01       	movw	r24, r16
     804:	6d e9       	ldi	r22, 0x9D	; 157
     806:	71 e0       	ldi	r23, 0x01	; 1
     808:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	Serial.print(measurements[2] - measurements[0]);
     80c:	b4 01       	movw	r22, r8
     80e:	6a 19       	sub	r22, r10
     810:	7b 09       	sbc	r23, r11
     812:	c8 01       	movw	r24, r16
     814:	4a e0       	ldi	r20, 0x0A	; 10
     816:	50 e0       	ldi	r21, 0x00	; 0
     818:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <_ZN5Print5printEii>
	Serial.print("\n");
     81c:	c8 01       	movw	r24, r16
     81e:	65 e2       	ldi	r22, 0x25	; 37
     820:	71 e0       	ldi	r23, 0x01	; 1
     822:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
	return 0;
     826:	80 e0       	ldi	r24, 0x00	; 0
}
     828:	2a 96       	adiw	r28, 0x0a	; 10
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	f8 94       	cli
     82e:	de bf       	out	0x3e, r29	; 62
     830:	0f be       	out	0x3f, r0	; 63
     832:	cd bf       	out	0x3d, r28	; 61
     834:	df 91       	pop	r29
     836:	cf 91       	pop	r28
     838:	1f 91       	pop	r17
     83a:	0f 91       	pop	r16
     83c:	ff 90       	pop	r15
     83e:	ef 90       	pop	r14
     840:	df 90       	pop	r13
     842:	cf 90       	pop	r12
     844:	bf 90       	pop	r11
     846:	af 90       	pop	r10
     848:	9f 90       	pop	r9
     84a:	8f 90       	pop	r8
     84c:	7f 90       	pop	r7
     84e:	6f 90       	pop	r6
     850:	5f 90       	pop	r5
     852:	4f 90       	pop	r4
     854:	3f 90       	pop	r3
     856:	2f 90       	pop	r2
     858:	08 95       	ret

0000085a <loop>:
}



void loop()
{
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	digitalWrite(PASS_PIN, LOW); //clear pass pin
     85e:	8a e0       	ldi	r24, 0x0A	; 10
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
	digitalWrite(FAIL_PIN, LOW); //clear fail pin
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
	
	while(digitalRead(DETECT_PIN)); //wait for detect pin to be pulled low, indicating cubelet
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	d9 f7       	brne	.-10     	; 0x86e <loop+0x14>
	if(digitalRead(SELECT_PIN))
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	89 f1       	breq	.+98     	; 0x8e4 <loop+0x8a>
	{
		Serial.print("\n========Init Flashlight========\n");
     882:	81 e6       	ldi	r24, 0x61	; 97
     884:	94 e0       	ldi	r25, 0x04	; 4
     886:	6b ed       	ldi	r22, 0xDB	; 219
     888:	71 e0       	ldi	r23, 0x01	; 1
     88a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		cubelets.greenOnAllCubelets();
     88e:	8c e9       	ldi	r24, 0x9C	; 156
     890:	93 e0       	ldi	r25, 0x03	; 3
     892:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN14CubeletsShield18greenOnAllCubeletsEv>
		if(initFlashlightTest())
     896:	0e 94 ba 00 	call	0x174	; 0x174 <_Z18initFlashlightTestv>
     89a:	88 23       	and	r24, r24
     89c:	49 f0       	breq	.+18     	; 0x8b0 <loop+0x56>
		{
			do_pass
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	61 e0       	ldi	r22, 0x01	; 1
     8a2:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
     8a6:	89 e0       	ldi	r24, 0x09	; 9
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
     8ae:	08 c0       	rjmp	.+16     	; 0x8c0 <loop+0x66>
		}
		else
		{
			do_fail
     8b0:	8a e0       	ldi	r24, 0x0A	; 10
     8b2:	60 e0       	ldi	r22, 0x00	; 0
     8b4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
     8b8:	89 e0       	ldi	r24, 0x09	; 9
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		}
		while(!digitalRead(DETECT_PIN));
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	d9 f3       	breq	.-10     	; 0x8c0 <loop+0x66>
		digitalWrite(PASS_PIN, LOW);
     8ca:	8a e0       	ldi	r24, 0x0A	; 10
     8cc:	60 e0       	ldi	r22, 0x00	; 0
     8ce:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		digitalWrite(FAIL_PIN,LOW);
     8d2:	89 e0       	ldi	r24, 0x09	; 9
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		cubelets.greenOffAllCubelets();
     8da:	8c e9       	ldi	r24, 0x9C	; 156
     8dc:	93 e0       	ldi	r25, 0x03	; 3
     8de:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN14CubeletsShield19greenOffAllCubeletsEv>
     8e2:	34 c0       	rjmp	.+104    	; 0x94c <__stack+0x4d>
	}
	else
	{
		Serial.print("\n========Init Brightness========\n");
     8e4:	81 e6       	ldi	r24, 0x61	; 97
     8e6:	94 e0       	ldi	r25, 0x04	; 4
     8e8:	6d ef       	ldi	r22, 0xFD	; 253
     8ea:	71 e0       	ldi	r23, 0x01	; 1
     8ec:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
		cubelets.greenOnAllCubelets();
     8f0:	8c e9       	ldi	r24, 0x9C	; 156
     8f2:	93 e0       	ldi	r25, 0x03	; 3
     8f4:	0e 94 95 06 	call	0xd2a	; 0xd2a <_ZN14CubeletsShield18greenOnAllCubeletsEv>
		if(initBrightnessTest())
     8f8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <_Z18initBrightnessTestv>
     8fc:	88 23       	and	r24, r24
     8fe:	49 f0       	breq	.+18     	; 0x912 <__stack+0x13>
		{
			digitalWrite(PASS_PIN, HIGH);
     900:	8a e0       	ldi	r24, 0x0A	; 10
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
			digitalWrite(FAIL_PIN, LOW);
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
     910:	08 c0       	rjmp	.+16     	; 0x922 <__stack+0x23>
		}
		else
		{
			digitalWrite(PASS_PIN, LOW);
     912:	8a e0       	ldi	r24, 0x0A	; 10
     914:	60 e0       	ldi	r22, 0x00	; 0
     916:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
			digitalWrite(FAIL_PIN, HIGH);
     91a:	89 e0       	ldi	r24, 0x09	; 9
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		}
		while(!digitalRead(DETECT_PIN));
     922:	88 e0       	ldi	r24, 0x08	; 8
     924:	0e 94 05 0c 	call	0x180a	; 0x180a <digitalRead>
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	d9 f3       	breq	.-10     	; 0x922 <__stack+0x23>
		digitalWrite(PASS_PIN, LOW);
     92c:	8a e0       	ldi	r24, 0x0A	; 10
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		digitalWrite(FAIL_PIN,LOW);
     934:	89 e0       	ldi	r24, 0x09	; 9
     936:	60 e0       	ldi	r22, 0x00	; 0
     938:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
		cubelets.greenOffAllCubelets();
     93c:	cc e9       	ldi	r28, 0x9C	; 156
     93e:	d3 e0       	ldi	r29, 0x03	; 3
     940:	ce 01       	movw	r24, r28
     942:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN14CubeletsShield19greenOffAllCubeletsEv>
		cubelets.greenOffAllCubelets();
     946:	ce 01       	movw	r24, r28
     948:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN14CubeletsShield19greenOffAllCubeletsEv>
	}
	
}
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <_GLOBAL__sub_I_ft_Values>:
int ft_Target[FT_MEASUREMENTS] = {25,	115,	200}; //populate for target values for each measurement

int bt_Values[BT_MEASUREMENTS] = {0,	255,	1}; //pop with LED PWM values for each measurement
int bt_Target[BT_MEASUREMENTS] = {10,	130,	220}; //pop with target values for brightness block for each measurement

CubeletsShield cubelets(false, 13);
     952:	8c e9       	ldi	r24, 0x9C	; 156
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	4d e0       	ldi	r20, 0x0D	; 13
     95a:	0e 94 1a 06 	call	0xc34	; 0xc34 <_ZN14CubeletsShieldC1Ehh>
	Serial.print(measurements[1] - measurements[2]);
	Serial.print(", m2 - m0 = ");
	Serial.print(measurements[2] - measurements[0]);
	Serial.print("\n");
	return 0;
}
     95e:	08 95       	ret

00000960 <_ZN14CubeletsShield13initializeI2CEv>:

// #######################################################################
// I2C-RELATED FUNCTIONS
// ####################################################################### 

void CubeletsShield::initializeI2C(){
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
  I2c.begin();
     964:	c9 ea       	ldi	r28, 0xA9	; 169
     966:	d3 e0       	ldi	r29, 0x03	; 3
     968:	ce 01       	movw	r24, r28
     96a:	0e 94 14 07 	call	0xe28	; 0xe28 <_ZN3I2C5beginEv>
  I2c.pullup(0);     // Disable the internal pullups
     96e:	ce 01       	movw	r24, r28
     970:	60 e0       	ldi	r22, 0x00	; 0
     972:	0e 94 34 07 	call	0xe68	; 0xe68 <_ZN3I2C6pullupEh>
  I2c.setSpeed(1);   // 1=400kHz 0=
     976:	ce 01       	movw	r24, r28
     978:	61 e0       	ldi	r22, 0x01	; 1
     97a:	0e 94 2a 07 	call	0xe54	; 0xe54 <_ZN3I2C8setSpeedEh>
  I2c.timeOut(1000);  //100ms for a request to succeed
     97e:	ce 01       	movw	r24, r28
     980:	68 ee       	ldi	r22, 0xE8	; 232
     982:	73 e0       	ldi	r23, 0x03	; 3
     984:	0e 94 25 07 	call	0xe4a	; 0xe4a <_ZN3I2C7timeOutEj>
}
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <_ZN14CubeletsShield12trafficLEDOnEv>:
     else return 0;  // Return an error when we're out of retries
   }
}

void CubeletsShield::trafficLEDOn(){
  digitalWrite(ledPin, HIGH); 
     98e:	fc 01       	movw	r30, r24
     990:	83 81       	ldd	r24, Z+3	; 0x03
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
}
     998:	08 95       	ret

0000099a <_ZN14CubeletsShield13trafficLEDOffEv>:

void CubeletsShield::trafficLEDOff(){
  digitalWrite(ledPin, LOW); 
     99a:	fc 01       	movw	r30, r24
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
}
     9a4:	08 95       	ret

000009a6 <_ZN14CubeletsShield10getDataI2CEhhhh>:
     else return 1;  // Return an error when we're out of retries
   }
}

// Returns 0 after `retries` attempts, else returns # of bytes available
unsigned char CubeletsShield::getDataI2C(unsigned char addr, unsigned char command, unsigned char bytesToRead, unsigned char retries ){
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
     9b8:	16 2f       	mov	r17, r22
     9ba:	d4 2e       	mov	r13, r20
     9bc:	c2 2e       	mov	r12, r18
  trafficLEDOn();
     9be:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
     9c2:	0f 2e       	mov	r0, r31
     9c4:	f9 ea       	ldi	r31, 0xA9	; 169
     9c6:	ef 2e       	mov	r14, r31
     9c8:	f3 e0       	ldi	r31, 0x03	; 3
     9ca:	ff 2e       	mov	r15, r31
     9cc:	f0 2d       	mov	r31, r0
     9ce:	c7 01       	movw	r24, r14
     9d0:	61 2f       	mov	r22, r17
     9d2:	4d 2d       	mov	r20, r13
     9d4:	2c 2d       	mov	r18, r12
     9d6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <_ZN3I2C4readEhhh>
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	90 93 a8 03 	sts	0x03A8, r25
     9e0:	80 93 a7 03 	sts	0x03A7, r24
  trafficLEDOff();
     9e4:	ce 01       	movw	r24, r28
     9e6:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2c.available() == 1){
     9ea:	c7 01       	movw	r24, r14
     9ec:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN3I2C9availableEv>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <_ZN14CubeletsShield10getDataI2CEhhhh+0x50>
     9f4:	3f c0       	rjmp	.+126    	; 0xa74 <_ZN14CubeletsShield10getDataI2CEhhhh+0xce>
    return 1;
  }
  else{
    if(debugOverUsart){
     9f6:	8c 81       	ldd	r24, Y+4	; 0x04
     9f8:	88 23       	and	r24, r24
     9fa:	91 f1       	breq	.+100    	; 0xa60 <_ZN14CubeletsShield10getDataI2CEhhhh+0xba>
     Serial.print("Failed to get data from I2C Slave addr: 0x");
     9fc:	0f 2e       	mov	r0, r31
     9fe:	f1 e6       	ldi	r31, 0x61	; 97
     a00:	ef 2e       	mov	r14, r31
     a02:	f4 e0       	ldi	r31, 0x04	; 4
     a04:	ff 2e       	mov	r15, r31
     a06:	f0 2d       	mov	r31, r0
     a08:	c7 01       	movw	r24, r14
     a0a:	6f e1       	ldi	r22, 0x1F	; 31
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     a12:	c7 01       	movw	r24, r14
     a14:	61 2f       	mov	r22, r17
     a16:	40 e1       	ldi	r20, 0x10	; 16
     a18:	50 e0       	ldi	r21, 0x00	; 0
     a1a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     a1e:	c7 01       	movw	r24, r14
     a20:	6a e4       	ldi	r22, 0x4A	; 74
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     a28:	c7 01       	movw	r24, r14
     a2a:	6d 2d       	mov	r22, r13
     a2c:	40 e1       	ldi	r20, 0x10	; 16
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" bytes requested: ");
     a34:	c7 01       	movw	r24, r14
     a36:	67 e5       	ldi	r22, 0x57	; 87
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(bytesToRead, DEC);
     a3e:	c7 01       	movw	r24, r14
     a40:	6c 2d       	mov	r22, r12
     a42:	4a e0       	ldi	r20, 0x0A	; 10
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     a4a:	c7 01       	movw	r24, r14
     a4c:	6a e6       	ldi	r22, 0x6A	; 106
     a4e:	72 e0       	ldi	r23, 0x02	; 2
     a50:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     a54:	c7 01       	movw	r24, r14
     a56:	60 2f       	mov	r22, r16
     a58:	4a e0       	ldi	r20, 0x0A	; 10
     a5a:	50 e0       	ldi	r21, 0x00	; 0
     a5c:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     a60:	00 23       	and	r16, r16
     a62:	51 f0       	breq	.+20     	; 0xa78 <_ZN14CubeletsShield10getDataI2CEhhhh+0xd2>
       retries--;
     a64:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     a66:	ce 01       	movw	r24, r28
     a68:	61 2f       	mov	r22, r17
     a6a:	4d 2d       	mov	r20, r13
     a6c:	2c 2d       	mov	r18, r12
     a6e:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN14CubeletsShield10getDataI2CEhhhh>
     a72:	03 c0       	rjmp	.+6      	; 0xa7a <_ZN14CubeletsShield10getDataI2CEhhhh+0xd4>
  trafficLEDOn();
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
  trafficLEDOff();
  
  if(I2c.available() == 1){
    return 1;
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	01 c0       	rjmp	.+2      	; 0xa7a <_ZN14CubeletsShield10getDataI2CEhhhh+0xd4>
     if(retries >= 0 && retries >0){
       retries--;
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     }
     else return 0;  // Return an error when we're out of retries
     a78:	80 e0       	ldi	r24, 0x00	; 0
   }
}
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>:
     }
     else return 1;  // Return an error when we're out of retries
   }
}

unsigned char CubeletsShield::sendCommandWithDataI2C(unsigned char addr, unsigned char command, unsigned char data, unsigned char retries ){
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	ec 01       	movw	r28, r24
     a9e:	16 2f       	mov	r17, r22
     aa0:	f4 2e       	mov	r15, r20
     aa2:	e2 2e       	mov	r14, r18
  trafficLEDOn();
     aa4:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command, data); 
     aa8:	89 ea       	ldi	r24, 0xA9	; 169
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	61 2f       	mov	r22, r17
     aae:	4f 2d       	mov	r20, r15
     ab0:	2e 2d       	mov	r18, r14
     ab2:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN3I2C5writeEhhh>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	90 93 a8 03 	sts	0x03A8, r25
     abc:	80 93 a7 03 	sts	0x03A7, r24
  trafficLEDOff();
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2CReturnCode == 0){
     ac6:	80 91 a7 03 	lds	r24, 0x03A7
     aca:	90 91 a8 03 	lds	r25, 0x03A8
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	29 f4       	brne	.+10     	; 0xadc <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0x50>
    return I2CReturnCode;
     ad2:	80 91 a7 03 	lds	r24, 0x03A7
     ad6:	90 91 a8 03 	lds	r25, 0x03A8
     ada:	40 c0       	rjmp	.+128    	; 0xb5c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
  }
  else{
    if(debugOverUsart){
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	88 23       	and	r24, r24
     ae0:	91 f1       	breq	.+100    	; 0xb46 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xba>
     Serial.print("Failed to send I2C Command addr: 0x");
     ae2:	0f 2e       	mov	r0, r31
     ae4:	f1 e6       	ldi	r31, 0x61	; 97
     ae6:	cf 2e       	mov	r12, r31
     ae8:	f4 e0       	ldi	r31, 0x04	; 4
     aea:	df 2e       	mov	r13, r31
     aec:	f0 2d       	mov	r31, r0
     aee:	c6 01       	movw	r24, r12
     af0:	6f e7       	ldi	r22, 0x7F	; 127
     af2:	72 e0       	ldi	r23, 0x02	; 2
     af4:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     af8:	c6 01       	movw	r24, r12
     afa:	61 2f       	mov	r22, r17
     afc:	40 e1       	ldi	r20, 0x10	; 16
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     b04:	c6 01       	movw	r24, r12
     b06:	6a e4       	ldi	r22, 0x4A	; 74
     b08:	72 e0       	ldi	r23, 0x02	; 2
     b0a:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     b0e:	c6 01       	movw	r24, r12
     b10:	6f 2d       	mov	r22, r15
     b12:	40 e1       	ldi	r20, 0x10	; 16
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" data: 0x");
     b1a:	c6 01       	movw	r24, r12
     b1c:	63 ea       	ldi	r22, 0xA3	; 163
     b1e:	72 e0       	ldi	r23, 0x02	; 2
     b20:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(data, HEX);
     b24:	c6 01       	movw	r24, r12
     b26:	6e 2d       	mov	r22, r14
     b28:	40 e1       	ldi	r20, 0x10	; 16
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     b30:	c6 01       	movw	r24, r12
     b32:	6a e6       	ldi	r22, 0x6A	; 106
     b34:	72 e0       	ldi	r23, 0x02	; 2
     b36:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     b3a:	c6 01       	movw	r24, r12
     b3c:	60 2f       	mov	r22, r16
     b3e:	4a e0       	ldi	r20, 0x0A	; 10
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     b46:	00 23       	and	r16, r16
     b48:	41 f0       	breq	.+16     	; 0xb5a <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xce>
       retries--;
     b4a:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return sendCommandWithDataI2C(addr, command, data, retries);
     b4c:	ce 01       	movw	r24, r28
     b4e:	61 2f       	mov	r22, r17
     b50:	4f 2d       	mov	r20, r15
     b52:	2e 2d       	mov	r18, r14
     b54:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
     }
     else return 1;  // Return an error when we're out of retries
     b5a:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <_ZN14CubeletsShield14sendCommandI2CEhhh>:
  I2c.pullup(0);     // Disable the internal pullups
  I2c.setSpeed(1);   // 1=400kHz 0=
  I2c.timeOut(1000);  //100ms for a request to succeed
}

unsigned char CubeletsShield::sendCommandI2C(unsigned char addr, unsigned char command, unsigned char retries){
     b6e:	cf 92       	push	r12
     b70:	df 92       	push	r13
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	ec 01       	movw	r28, r24
     b7e:	16 2f       	mov	r17, r22
     b80:	04 2f       	mov	r16, r20
     b82:	f2 2e       	mov	r15, r18
  trafficLEDOn();
     b84:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command); 
     b88:	89 ea       	ldi	r24, 0xA9	; 169
     b8a:	93 e0       	ldi	r25, 0x03	; 3
     b8c:	61 2f       	mov	r22, r17
     b8e:	40 2f       	mov	r20, r16
     b90:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <_ZN3I2C5writeEhh>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	90 93 a8 03 	sts	0x03A8, r25
     b9a:	80 93 a7 03 	sts	0x03A7, r24
  trafficLEDOff();
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN14CubeletsShield13trafficLEDOffEv>
  if(I2CReturnCode == 0){
     ba4:	80 91 a7 03 	lds	r24, 0x03A7
     ba8:	90 91 a8 03 	lds	r25, 0x03A8
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	29 f4       	brne	.+10     	; 0xbba <_ZN14CubeletsShield14sendCommandI2CEhhh+0x4c>
    return I2CReturnCode;
     bb0:	80 91 a7 03 	lds	r24, 0x03A7
     bb4:	90 91 a8 03 	lds	r25, 0x03A8
     bb8:	35 c0       	rjmp	.+106    	; 0xc24 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
  }
  else{
    if(debugOverUsart){
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	88 23       	and	r24, r24
     bbe:	39 f1       	breq	.+78     	; 0xc0e <_ZN14CubeletsShield14sendCommandI2CEhhh+0xa0>
     Serial.print("Failed to send I2C Command addr: 0x");
     bc0:	0f 2e       	mov	r0, r31
     bc2:	f1 e6       	ldi	r31, 0x61	; 97
     bc4:	cf 2e       	mov	r12, r31
     bc6:	f4 e0       	ldi	r31, 0x04	; 4
     bc8:	df 2e       	mov	r13, r31
     bca:	f0 2d       	mov	r31, r0
     bcc:	c6 01       	movw	r24, r12
     bce:	6f e7       	ldi	r22, 0x7F	; 127
     bd0:	72 e0       	ldi	r23, 0x02	; 2
     bd2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     bd6:	c6 01       	movw	r24, r12
     bd8:	61 2f       	mov	r22, r17
     bda:	40 e1       	ldi	r20, 0x10	; 16
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     be2:	c6 01       	movw	r24, r12
     be4:	6a e4       	ldi	r22, 0x4A	; 74
     be6:	72 e0       	ldi	r23, 0x02	; 2
     be8:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     bec:	c6 01       	movw	r24, r12
     bee:	60 2f       	mov	r22, r16
     bf0:	40 e1       	ldi	r20, 0x10	; 16
     bf2:	50 e0       	ldi	r21, 0x00	; 0
     bf4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     bf8:	c6 01       	movw	r24, r12
     bfa:	6a e6       	ldi	r22, 0x6A	; 106
     bfc:	72 e0       	ldi	r23, 0x02	; 2
     bfe:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     c02:	c6 01       	movw	r24, r12
     c04:	6f 2d       	mov	r22, r15
     c06:	4a e0       	ldi	r20, 0x0A	; 10
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     c0e:	ff 20       	and	r15, r15
     c10:	41 f0       	breq	.+16     	; 0xc22 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb4>
       retries--;
     c12:	2f 2d       	mov	r18, r15
     c14:	21 50       	subi	r18, 0x01	; 1
       return sendCommandI2C(addr, command, retries);
     c16:	ce 01       	movw	r24, r28
     c18:	61 2f       	mov	r22, r17
     c1a:	40 2f       	mov	r20, r16
     c1c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN14CubeletsShield14sendCommandI2CEhhh>
     c20:	01 c0       	rjmp	.+2      	; 0xc24 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
     }
     else return 1;  // Return an error when we're out of retries
     c22:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	df 90       	pop	r13
     c30:	cf 90       	pop	r12
     c32:	08 95       	ret

00000c34 <_ZN14CubeletsShieldC1Ehh>:
volatile int I2CReturnCode;             // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
unsigned char cubeletI2CAddresses[6]; 
unsigned char ledPin;
boolean debugOverUsart = 0;

CubeletsShield::CubeletsShield(boolean enableDebugOverUsart, unsigned char ledPinForI2C) {
     c34:	1f 93       	push	r17
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	ec 01       	movw	r28, r24
     c3c:	16 2f       	mov	r17, r22
  	// ############################################
	// #### Working Variable Initialization #######
	// ############################################

	rec_byte_i2c = 0x00;   // Worker variable to hold I2C Received Byte
     c3e:	18 82       	st	Y, r1
	I2CReturnCode = -1;              // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
     c40:	2f ef       	ldi	r18, 0xFF	; 255
     c42:	3f ef       	ldi	r19, 0xFF	; 255
     c44:	30 93 a8 03 	sts	0x03A8, r19
     c48:	20 93 a7 03 	sts	0x03A7, r18

        // Initialize Addresses Array
        cubeletI2CAddresses[0] = ADDRESS_CUBE1;
     c4c:	82 e2       	ldi	r24, 0x22	; 34
     c4e:	80 93 a1 03 	sts	0x03A1, r24
        cubeletI2CAddresses[1] = ADDRESS_CUBE2;
     c52:	83 e2       	ldi	r24, 0x23	; 35
     c54:	80 93 a2 03 	sts	0x03A2, r24
        cubeletI2CAddresses[2] = ADDRESS_CUBE3;
     c58:	84 e2       	ldi	r24, 0x24	; 36
     c5a:	80 93 a3 03 	sts	0x03A3, r24
        cubeletI2CAddresses[3] = ADDRESS_CUBE4;
     c5e:	85 e2       	ldi	r24, 0x25	; 37
     c60:	80 93 a4 03 	sts	0x03A4, r24
        cubeletI2CAddresses[4] = ADDRESS_CUBE5;
     c64:	86 e2       	ldi	r24, 0x26	; 38
     c66:	80 93 a5 03 	sts	0x03A5, r24
        cubeletI2CAddresses[5] = ADDRESS_CUBE6;
     c6a:	87 e2       	ldi	r24, 0x27	; 39
     c6c:	80 93 a6 03 	sts	0x03A6, r24
        
        // I2C Activity indicator light
        if(ledPinForI2C > 0){
     c70:	44 23       	and	r20, r20
     c72:	41 f0       	breq	.+16     	; 0xc84 <_ZN14CubeletsShieldC1Ehh+0x50>
          ledPin = ledPinForI2C;
     c74:	4b 83       	std	Y+3, r20	; 0x03
    	  pinMode(ledPin, OUTPUT);
     c76:	84 2f       	mov	r24, r20
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
    	  trafficLEDOff();
     c7e:	ce 01       	movw	r24, r28
     c80:	0e 94 cd 04 	call	0x99a	; 0x99a <_ZN14CubeletsShield13trafficLEDOffEv>
        }

        // Debug over USART enabled?
        if(enableDebugOverUsart){
     c84:	11 23       	and	r17, r17
     c86:	51 f0       	breq	.+20     	; 0xc9c <_ZN14CubeletsShieldC1Ehh+0x68>
    
          Serial.begin(9600);
     c88:	81 e6       	ldi	r24, 0x61	; 97
     c8a:	94 e0       	ldi	r25, 0x04	; 4
     c8c:	40 e8       	ldi	r20, 0x80	; 128
     c8e:	55 e2       	ldi	r21, 0x25	; 37
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN14HardwareSerial5beginEm>
          debugOverUsart = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	8c 83       	std	Y+4, r24	; 0x04
        }
        trafficLEDOn();
     c9c:	ce 01       	movw	r24, r28
     c9e:	0e 94 c7 04 	call	0x98e	; 0x98e <_ZN14CubeletsShield12trafficLEDOnEv>
}
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	1f 91       	pop	r17
     ca8:	08 95       	ret

00000caa <_ZN14CubeletsShield19getI2CAddressByFaceEh>:
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
}

// Returns I2C Address corresponding to the faceNumber on the Arduino Shields
unsigned char CubeletsShield::getI2CAddressByFace(unsigned char faceNumber){
  return cubeletI2CAddresses[faceNumber-1];
     caa:	e6 2f       	mov	r30, r22
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	e0 56       	subi	r30, 0x60	; 96
     cb0:	fc 4f       	sbci	r31, 0xFC	; 252
}
     cb2:	80 81       	ld	r24, Z
     cb4:	08 95       	ret

00000cb6 <_ZN14CubeletsShield24startCommunicationByFaceEh>:
unsigned char CubeletsShield::stopCommunicationByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STOPCOMM), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::startCommunicationByFace(unsigned char faceNumber){
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
     cbc:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     cc0:	68 2f       	mov	r22, r24
     cc2:	ce 01       	movw	r24, r28
     cc4:	45 e2       	ldi	r20, 0x25	; 37
     cc6:	25 e0       	ldi	r18, 0x05	; 5
     cc8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <_ZN14CubeletsShield14greenOffByFaceEh>:
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOffByFace(unsigned char faceNumber){
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDOFF), char(I2CRETRYCOUNT));
     cd8:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     cdc:	68 2f       	mov	r22, r24
     cde:	ce 01       	movw	r24, r28
     ce0:	41 e2       	ldi	r20, 0x21	; 33
     ce2:	25 e0       	ldi	r18, 0x05	; 5
     ce4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	08 95       	ret

00000cee <_ZN14CubeletsShield19greenOffAllCubeletsEv>:
  for( unsigned char i = 1;i<=6;i++){
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
  for( unsigned char i = 1;i<=6;i++){
     cf6:	11 e0       	ldi	r17, 0x01	; 1
     greenOffByFace(i);
     cf8:	ce 01       	movw	r24, r28
     cfa:	61 2f       	mov	r22, r17
     cfc:	0e 94 69 06 	call	0xcd2	; 0xcd2 <_ZN14CubeletsShield14greenOffByFaceEh>
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
  for( unsigned char i = 1;i<=6;i++){
     d00:	1f 5f       	subi	r17, 0xFF	; 255
     d02:	17 30       	cpi	r17, 0x07	; 7
     d04:	c9 f7       	brne	.-14     	; 0xcf8 <_ZN14CubeletsShield19greenOffAllCubeletsEv+0xa>
     greenOffByFace(i);
  }
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	08 95       	ret

00000d0e <_ZN14CubeletsShield13greenOnByFaceEh>:
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
     d14:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     d18:	68 2f       	mov	r22, r24
     d1a:	ce 01       	movw	r24, r28
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	25 e0       	ldi	r18, 0x05	; 5
     d20:	0e 94 b7 05 	call	0xb6e	; 0xb6e <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <_ZN14CubeletsShield18greenOnAllCubeletsEv>:
  for( unsigned char i = 1;i<=6;i++){
     startCommunicationByFace(i);
  }
}

void CubeletsShield::greenOnAllCubelets(){
     d2a:	1f 93       	push	r17
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
  for( unsigned char i = 1;i<=6;i++){
     d32:	11 e0       	ldi	r17, 0x01	; 1
     greenOnByFace(i);
     d34:	ce 01       	movw	r24, r28
     d36:	61 2f       	mov	r22, r17
     d38:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN14CubeletsShield13greenOnByFaceEh>
     startCommunicationByFace(i);
  }
}

void CubeletsShield::greenOnAllCubelets(){
  for( unsigned char i = 1;i<=6;i++){
     d3c:	1f 5f       	subi	r17, 0xFF	; 255
     d3e:	17 30       	cpi	r17, 0x07	; 7
     d40:	c9 f7       	brne	.-14     	; 0xd34 <_ZN14CubeletsShield18greenOnAllCubeletsEv+0xa>
     greenOnByFace(i);
  }
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	08 95       	ret

00000d4a <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>:
    return false;
  }
}

// Returns 0 on success, error code on failure
unsigned char CubeletsShield::setBroadcastBlockValueByFace(unsigned char faceNumber, unsigned char blockValue){
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	ec 01       	movw	r28, r24
     d54:	14 2f       	mov	r17, r20
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
     d56:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     d5a:	68 2f       	mov	r22, r24
     d5c:	ce 01       	movw	r24, r28
     d5e:	42 e2       	ldi	r20, 0x22	; 34
     d60:	21 2f       	mov	r18, r17
     d62:	05 e0       	ldi	r16, 0x05	; 5
     d64:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
}
     d68:	df 91       	pop	r29
     d6a:	cf 91       	pop	r28
     d6c:	1f 91       	pop	r17
     d6e:	0f 91       	pop	r16
     d70:	08 95       	ret

00000d72 <_ZN14CubeletsShield24initializeCubeletsShieldEv>:

// #######################################################################
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
  
  for( unsigned char i = 1;i<=6;i++){
     d7a:	11 e0       	ldi	r17, 0x01	; 1
     greenOnByFace(i);
     d7c:	ce 01       	movw	r24, r28
     d7e:	61 2f       	mov	r22, r17
     d80:	0e 94 87 06 	call	0xd0e	; 0xd0e <_ZN14CubeletsShield13greenOnByFaceEh>
     setBroadcastBlockValueByFace(i, 0x00);
     d84:	ce 01       	movw	r24, r28
     d86:	61 2f       	mov	r22, r17
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	0e 94 a5 06 	call	0xd4a	; 0xd4a <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     startCommunicationByFace(i);
     d8e:	ce 01       	movw	r24, r28
     d90:	61 2f       	mov	r22, r17
     d92:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN14CubeletsShield24startCommunicationByFaceEh>
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
  
  for( unsigned char i = 1;i<=6;i++){
     d96:	1f 5f       	subi	r17, 0xFF	; 255
     d98:	17 30       	cpi	r17, 0x07	; 7
     d9a:	81 f7       	brne	.-32     	; 0xd7c <_ZN14CubeletsShield24initializeCubeletsShieldEv+0xa>
     greenOnByFace(i);
     setBroadcastBlockValueByFace(i, 0x00);
     startCommunicationByFace(i);
  }
}
     d9c:	df 91       	pop	r29
     d9e:	cf 91       	pop	r28
     da0:	1f 91       	pop	r17
     da2:	08 95       	ret

00000da4 <_ZN14CubeletsShield10initializeEv>:
          debugOverUsart = 1;
        }
        trafficLEDOn();
}

void CubeletsShield::initialize(){
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	ec 01       	movw	r28, r24
    // ############################################
    // #### Peripheral Configuration, Etc  ########
    // ############################################
	
    // Setup I2C for our needs
    initializeI2C();
     daa:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN14CubeletsShield13initializeI2CEv>

    // Wait plenty of time for the Cubelets MCUs to start, configure their SSPs
    delay(10);
     dae:	6a e0       	ldi	r22, 0x0A	; 10
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delay>
    
    // Clean Block Values, enable communication, light Debug LEDs
    initializeCubeletsShield();
     dba:	ce 01       	movw	r24, r28
     dbc:	0e 94 b9 06 	call	0xd72	; 0xd72 <_ZN14CubeletsShield24initializeCubeletsShieldEv>

    if(debugOverUsart){
     dc0:	8c 81       	ldd	r24, Y+4	; 0x04
     dc2:	88 23       	and	r24, r24
     dc4:	31 f0       	breq	.+12     	; 0xdd2 <_ZN14CubeletsShield10initializeEv+0x2e>
	  Serial.println("Cubelet-Arduino Interface Loaded.  Ready.");
     dc6:	81 e6       	ldi	r24, 0x61	; 97
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	6d ea       	ldi	r22, 0xAD	; 173
     dcc:	72 e0       	ldi	r23, 0x02	; 2
     dce:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <_ZN5Print7printlnEPKc>
    } 
}
     dd2:	df 91       	pop	r29
     dd4:	cf 91       	pop	r28
     dd6:	08 95       	ret

00000dd8 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>:
    // Didn't get anything!
    return false;
  }
}

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	cf 93       	push	r28
     de0:	df 93       	push	r29
     de2:	7c 01       	movw	r14, r24
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
     de4:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     de8:	68 2f       	mov	r22, r24
     dea:	c7 01       	movw	r24, r14
     dec:	43 e2       	ldi	r20, 0x23	; 35
     dee:	21 e0       	ldi	r18, 0x01	; 1
     df0:	05 e0       	ldi	r16, 0x05	; 5
     df2:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <_ZN14CubeletsShield10getDataI2CEhhhh>
     df6:	81 30       	cpi	r24, 0x01	; 1
     df8:	41 f0       	breq	.+16     	; 0xe0a <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x32>
    }
    return rec_byte_i2c;
  }
  else{
    // Didn't get anything!
    return false;
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x44>
unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
     dfe:	ce 01       	movw	r24, r28
     e00:	0e 94 3f 07 	call	0xe7e	; 0xe7e <_ZN3I2C7receiveEv>
     e04:	f7 01       	movw	r30, r14
     e06:	80 83       	st	Z, r24
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x36>

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
     e0a:	c9 ea       	ldi	r28, 0xA9	; 169
     e0c:	d3 e0       	ldi	r29, 0x03	; 3
     e0e:	ce 01       	movw	r24, r28
     e10:	0e 94 3c 07 	call	0xe78	; 0xe78 <_ZN3I2C9availableEv>
     e14:	88 23       	and	r24, r24
     e16:	99 f7       	brne	.-26     	; 0xdfe <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x26>
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
    }
    return rec_byte_i2c;
     e18:	f7 01       	movw	r30, r14
     e1a:	80 81       	ld	r24, Z
  }
  else{
    // Didn't get anything!
    return false;
  }
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <_ZN3I2C5beginEv>:
void I2C::begin()
{
  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
     e28:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
     e2a:	45 9a       	sbi	0x08, 5	; 8
    // as per note from atmega128 manual pg204
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif
  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     e2c:	e9 eb       	ldi	r30, 0xB9	; 185
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	8e 7f       	andi	r24, 0xFE	; 254
     e34:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     e36:	80 81       	ld	r24, Z
     e38:	8d 7f       	andi	r24, 0xFD	; 253
     e3a:	80 83       	st	Z, r24
  TWBR = ((F_CPU / 100000) - 16) / 2;
     e3c:	88 e4       	ldi	r24, 0x48	; 72
     e3e:	80 93 b8 00 	sts	0x00B8, r24
  // enable twi module and acks
  TWCR = _BV(TWEN) | _BV(TWEA); 
     e42:	84 e4       	ldi	r24, 0x44	; 68
     e44:	80 93 bc 00 	sts	0x00BC, r24
}
     e48:	08 95       	ret

00000e4a <_ZN3I2C7timeOutEj>:
  TWCR = 0;
}

void I2C::timeOut(uint16_t _timeOut)
{
  timeOutDelay = _timeOut;
     e4a:	70 93 cc 03 	sts	0x03CC, r23
     e4e:	60 93 cb 03 	sts	0x03CB, r22
}
     e52:	08 95       	ret

00000e54 <_ZN3I2C8setSpeedEh>:

void I2C::setSpeed(uint8_t _fast)
{
  if(!_fast)
     e54:	66 23       	and	r22, r22
     e56:	21 f4       	brne	.+8      	; 0xe60 <_ZN3I2C8setSpeedEh+0xc>
  {
    TWBR = ((F_CPU / 100000) - 16) / 2;
     e58:	88 e4       	ldi	r24, 0x48	; 72
     e5a:	80 93 b8 00 	sts	0x00B8, r24
     e5e:	08 95       	ret
  }
  else
  {
    TWBR = ((F_CPU / 400000) - 16) / 2;
     e60:	8c e0       	ldi	r24, 0x0C	; 12
     e62:	80 93 b8 00 	sts	0x00B8, r24
     e66:	08 95       	ret

00000e68 <_ZN3I2C6pullupEh>:
  }
}
  
void I2C::pullup(uint8_t activate)
{
  if(activate)
     e68:	66 23       	and	r22, r22
     e6a:	19 f0       	breq	.+6      	; 0xe72 <_ZN3I2C6pullupEh+0xa>
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // activate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      sbi(PORTC, 4);
     e6c:	44 9a       	sbi	0x08, 4	; 8
      sbi(PORTC, 5);
     e6e:	45 9a       	sbi	0x08, 5	; 8
     e70:	08 95       	ret
  else
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // deactivate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      cbi(PORTC, 4);
     e72:	44 98       	cbi	0x08, 4	; 8
      cbi(PORTC, 5);
     e74:	45 98       	cbi	0x08, 5	; 8
     e76:	08 95       	ret

00000e78 <_ZN3I2C9availableEv>:


uint8_t I2C::available()
{
  return(bytesAvailable);
}
     e78:	80 91 cf 03 	lds	r24, 0x03CF
     e7c:	08 95       	ret

00000e7e <_ZN3I2C7receiveEv>:

uint8_t I2C::receive()
{
  bufferIndex = totalBytes - bytesAvailable;
     e7e:	20 91 cf 03 	lds	r18, 0x03CF
     e82:	30 91 cd 03 	lds	r19, 0x03CD
     e86:	32 1b       	sub	r19, r18
     e88:	30 93 ce 03 	sts	0x03CE, r19
  if(!bytesAvailable)
     e8c:	22 23       	and	r18, r18
     e8e:	21 f4       	brne	.+8      	; 0xe98 <_ZN3I2C7receiveEv+0x1a>
  {
    bufferIndex = 0;
     e90:	10 92 ce 03 	sts	0x03CE, r1
    return(0);
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	08 95       	ret
  }
  bytesAvailable--;
     e98:	21 50       	subi	r18, 0x01	; 1
     e9a:	20 93 cf 03 	sts	0x03CF, r18
  return(data[bufferIndex]);
     e9e:	83 0f       	add	r24, r19
     ea0:	91 1d       	adc	r25, r1
     ea2:	fc 01       	movw	r30, r24
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
}
     ea6:	08 95       	ret

00000ea8 <_ZN3I2C6lockUpEv>:
  return(0);
}

void I2C::lockUp()
{
  TWCR = 0; //releases SDA and SCL lines to high impedance
     ea8:	ec eb       	ldi	r30, 0xBC	; 188
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	10 82       	st	Z, r1
  TWCR = _BV(TWEN) | _BV(TWEA); //reinitialize TWI 
     eae:	84 e4       	ldi	r24, 0x44	; 68
     eb0:	80 83       	st	Z, r24
}
     eb2:	08 95       	ret

00000eb4 <_ZN3I2C4stopEv>:
  }
  return(TWI_STATUS); 
}

uint8_t I2C::stop()
{
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
     ec6:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
     eca:	6b 01       	movw	r12, r22
     ecc:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ece:	84 e9       	ldi	r24, 0x94	; 148
     ed0:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & (1<<TWSTO)))
     ed4:	cc eb       	ldi	r28, 0xBC	; 188
     ed6:	d0 e0       	ldi	r29, 0x00	; 0
     ed8:	1a c0       	rjmp	.+52     	; 0xf0e <_ZN3I2C4stopEv+0x5a>
  {
    if(!timeOutDelay){continue;}
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	e1 f0       	breq	.+56     	; 0xf16 <_ZN3I2C4stopEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
     ede:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
     ee2:	ab 01       	movw	r20, r22
     ee4:	bc 01       	movw	r22, r24
     ee6:	4c 19       	sub	r20, r12
     ee8:	5d 09       	sbc	r21, r13
     eea:	6e 09       	sbc	r22, r14
     eec:	7f 09       	sbc	r23, r15
     eee:	80 91 cb 03 	lds	r24, 0x03CB
     ef2:	90 91 cc 03 	lds	r25, 0x03CC
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e0       	ldi	r27, 0x00	; 0
     efa:	48 17       	cp	r20, r24
     efc:	59 07       	cpc	r21, r25
     efe:	6a 07       	cpc	r22, r26
     f00:	7b 07       	cpc	r23, r27
     f02:	28 f0       	brcs	.+10     	; 0xf0e <_ZN3I2C4stopEv+0x5a>
    {
      lockUp();
     f04:	c8 01       	movw	r24, r16
     f06:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
      return(1);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <_ZN3I2C4stopEv+0x6a>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
  {
    if(!timeOutDelay){continue;}
     f0e:	80 91 cb 03 	lds	r24, 0x03CB
     f12:	90 91 cc 03 	lds	r25, 0x03CC

uint8_t I2C::stop()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
     f16:	28 81       	ld	r18, Y
     f18:	24 fd       	sbrc	r18, 4
     f1a:	df cf       	rjmp	.-66     	; 0xeda <_ZN3I2C4stopEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  return(0);
     f1c:	80 e0       	ldi	r24, 0x00	; 0
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	08 95       	ret

00000f30 <_ZN3I2C11receiveByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::receiveByte(uint8_t ack)
{
     f30:	cf 92       	push	r12
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	8c 01       	movw	r16, r24
     f42:	c6 2f       	mov	r28, r22
  unsigned long startingTime = millis();
     f44:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
     f48:	6b 01       	movw	r12, r22
     f4a:	7c 01       	movw	r14, r24
  if(ack)
     f4c:	cc 23       	and	r28, r28
     f4e:	21 f0       	breq	.+8      	; 0xf58 <_ZN3I2C11receiveByteEh+0x28>
  {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     f50:	84 ec       	ldi	r24, 0xC4	; 196
     f52:	80 93 bc 00 	sts	0x00BC, r24
     f56:	1e c0       	rjmp	.+60     	; 0xf94 <_ZN3I2C11receiveByteEh+0x64>

  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
     f58:	84 e8       	ldi	r24, 0x84	; 132
     f5a:	80 93 bc 00 	sts	0x00BC, r24
     f5e:	1a c0       	rjmp	.+52     	; 0xf94 <_ZN3I2C11receiveByteEh+0x64>
  }
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	f1 f0       	breq	.+60     	; 0xfa0 <_ZN3I2C11receiveByteEh+0x70>
    if((millis() - startingTime) >= timeOutDelay)
     f64:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
     f68:	ab 01       	movw	r20, r22
     f6a:	bc 01       	movw	r22, r24
     f6c:	4c 19       	sub	r20, r12
     f6e:	5d 09       	sbc	r21, r13
     f70:	6e 09       	sbc	r22, r14
     f72:	7f 09       	sbc	r23, r15
     f74:	80 91 cb 03 	lds	r24, 0x03CB
     f78:	90 91 cc 03 	lds	r25, 0x03CC
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	48 17       	cp	r20, r24
     f82:	59 07       	cpc	r21, r25
     f84:	6a 07       	cpc	r22, r26
     f86:	7b 07       	cpc	r23, r27
     f88:	38 f0       	brcs	.+14     	; 0xf98 <_ZN3I2C11receiveByteEh+0x68>
    {
      lockUp();
     f8a:	c8 01       	movw	r24, r16
     f8c:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
      return(1);
     f90:	c1 e0       	ldi	r28, 0x01	; 1
     f92:	18 c0       	rjmp	.+48     	; 0xfc4 <_ZN3I2C11receiveByteEh+0x94>
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
     f94:	cc eb       	ldi	r28, 0xBC	; 188
     f96:	d0 e0       	ldi	r29, 0x00	; 0
  {
    if(!timeOutDelay){continue;}
     f98:	80 91 cb 03 	lds	r24, 0x03CB
     f9c:	90 91 cc 03 	lds	r25, 0x03CC
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
     fa0:	28 81       	ld	r18, Y
     fa2:	22 23       	and	r18, r18
     fa4:	ec f6       	brge	.-70     	; 0xf60 <_ZN3I2C11receiveByteEh+0x30>
    {
      lockUp();
      return(1);
    }
  }
  if (TWI_STATUS == LOST_ARBTRTN)
     fa6:	80 91 b9 00 	lds	r24, 0x00B9
     faa:	88 7f       	andi	r24, 0xF8	; 248
     fac:	88 33       	cpi	r24, 0x38	; 56
     fae:	39 f4       	brne	.+14     	; 0xfbe <_ZN3I2C11receiveByteEh+0x8e>
  {
    uint8_t bufferedStatus = TWI_STATUS;
     fb0:	c0 91 b9 00 	lds	r28, 0x00B9
     fb4:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
     fb6:	c8 01       	movw	r24, r16
     fb8:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
     fbc:	03 c0       	rjmp	.+6      	; 0xfc4 <_ZN3I2C11receiveByteEh+0x94>
  }
  return(TWI_STATUS); 
     fbe:	c0 91 b9 00 	lds	r28, 0x00B9
     fc2:	c8 7f       	andi	r28, 0xF8	; 248
}
     fc4:	8c 2f       	mov	r24, r28
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	ff 90       	pop	r15
     fd0:	ef 90       	pop	r14
     fd2:	df 90       	pop	r13
     fd4:	cf 90       	pop	r12
     fd6:	08 95       	ret

00000fd8 <_ZN3I2C8sendByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::sendByte(uint8_t i2cData)
{
     fd8:	cf 92       	push	r12
     fda:	df 92       	push	r13
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	8c 01       	movw	r16, r24
  TWDR = i2cData;
     fea:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
     fee:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
     ff2:	6b 01       	movw	r12, r22
     ff4:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
     ff6:	84 e8       	ldi	r24, 0x84	; 132
     ff8:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
     ffc:	cc eb       	ldi	r28, 0xBC	; 188
     ffe:	d0 e0       	ldi	r29, 0x00	; 0
    1000:	1a c0       	rjmp	.+52     	; 0x1036 <_ZN3I2C8sendByteEh+0x5e>
  {
    if(!timeOutDelay){continue;}
    1002:	00 97       	sbiw	r24, 0x00	; 0
    1004:	e1 f0       	breq	.+56     	; 0x103e <_ZN3I2C8sendByteEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
    1006:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
    100a:	ab 01       	movw	r20, r22
    100c:	bc 01       	movw	r22, r24
    100e:	4c 19       	sub	r20, r12
    1010:	5d 09       	sbc	r21, r13
    1012:	6e 09       	sbc	r22, r14
    1014:	7f 09       	sbc	r23, r15
    1016:	80 91 cb 03 	lds	r24, 0x03CB
    101a:	90 91 cc 03 	lds	r25, 0x03CC
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	48 17       	cp	r20, r24
    1024:	59 07       	cpc	r21, r25
    1026:	6a 07       	cpc	r22, r26
    1028:	7b 07       	cpc	r23, r27
    102a:	28 f0       	brcs	.+10     	; 0x1036 <_ZN3I2C8sendByteEh+0x5e>
    {
      lockUp();
    102c:	c8 01       	movw	r24, r16
    102e:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
      return(1);
    1032:	c1 e0       	ldi	r28, 0x01	; 1
    1034:	1d c0       	rjmp	.+58     	; 0x1070 <_ZN3I2C8sendByteEh+0x98>
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    1036:	80 91 cb 03 	lds	r24, 0x03CB
    103a:	90 91 cc 03 	lds	r25, 0x03CC
uint8_t I2C::sendByte(uint8_t i2cData)
{
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    103e:	28 81       	ld	r18, Y
    1040:	22 23       	and	r18, r18
    1042:	fc f6       	brge	.-66     	; 0x1002 <_ZN3I2C8sendByteEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
    1044:	80 91 b9 00 	lds	r24, 0x00B9
    1048:	88 7f       	andi	r24, 0xF8	; 248
    104a:	88 32       	cpi	r24, 0x28	; 40
    104c:	81 f0       	breq	.+32     	; 0x106e <_ZN3I2C8sendByteEh+0x96>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
    104e:	e9 eb       	ldi	r30, 0xB9	; 185
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	c0 81       	ld	r28, Z
    1054:	c8 7f       	andi	r28, 0xF8	; 248
  if (TWI_STATUS == MT_DATA_NACK)
    1056:	80 81       	ld	r24, Z
    1058:	88 7f       	andi	r24, 0xF8	; 248
    105a:	80 33       	cpi	r24, 0x30	; 48
    105c:	21 f4       	brne	.+8      	; 0x1066 <_ZN3I2C8sendByteEh+0x8e>
  {
    stop();
    105e:	c8 01       	movw	r24, r16
    1060:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN3I2C4stopEv>
    return(bufferedStatus);
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <_ZN3I2C8sendByteEh+0x98>
  }
  else
  {
    lockUp();
    1066:	c8 01       	movw	r24, r16
    1068:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    106c:	01 c0       	rjmp	.+2      	; 0x1070 <_ZN3I2C8sendByteEh+0x98>
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
  {
    return(0);
    106e:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
    1070:	8c 2f       	mov	r24, r28
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	df 90       	pop	r13
    1080:	cf 90       	pop	r12
    1082:	08 95       	ret

00001084 <_ZN3I2C11sendAddressEh>:
  }
  return(TWI_STATUS);
}

uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	8c 01       	movw	r16, r24
  TWDR = i2cAddress;
    1096:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
    109a:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
    10a2:	84 e8       	ldi	r24, 0x84	; 132
    10a4:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    10a8:	cc eb       	ldi	r28, 0xBC	; 188
    10aa:	d0 e0       	ldi	r29, 0x00	; 0
    10ac:	1a c0       	rjmp	.+52     	; 0x10e2 <_ZN3I2C11sendAddressEh+0x5e>
  {
    if(!timeOutDelay){continue;}
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	e1 f0       	breq	.+56     	; 0x10ea <_ZN3I2C11sendAddressEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
    10b2:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
    10b6:	ab 01       	movw	r20, r22
    10b8:	bc 01       	movw	r22, r24
    10ba:	4c 19       	sub	r20, r12
    10bc:	5d 09       	sbc	r21, r13
    10be:	6e 09       	sbc	r22, r14
    10c0:	7f 09       	sbc	r23, r15
    10c2:	80 91 cb 03 	lds	r24, 0x03CB
    10c6:	90 91 cc 03 	lds	r25, 0x03CC
    10ca:	a0 e0       	ldi	r26, 0x00	; 0
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	48 17       	cp	r20, r24
    10d0:	59 07       	cpc	r21, r25
    10d2:	6a 07       	cpc	r22, r26
    10d4:	7b 07       	cpc	r23, r27
    10d6:	28 f0       	brcs	.+10     	; 0x10e2 <_ZN3I2C11sendAddressEh+0x5e>
    {
      lockUp();
    10d8:	c8 01       	movw	r24, r16
    10da:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
      return(1);
    10de:	c1 e0       	ldi	r28, 0x01	; 1
    10e0:	29 c0       	rjmp	.+82     	; 0x1134 <_ZN3I2C11sendAddressEh+0xb0>
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    10e2:	80 91 cb 03 	lds	r24, 0x03CB
    10e6:	90 91 cc 03 	lds	r25, 0x03CC
uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    10ea:	28 81       	ld	r18, Y
    10ec:	22 23       	and	r18, r18
    10ee:	fc f6       	brge	.-66     	; 0x10ae <_ZN3I2C11sendAddressEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
    10f0:	80 91 b9 00 	lds	r24, 0x00B9
    10f4:	88 7f       	andi	r24, 0xF8	; 248
    10f6:	88 31       	cpi	r24, 0x18	; 24
    10f8:	d1 f0       	breq	.+52     	; 0x112e <_ZN3I2C11sendAddressEh+0xaa>
    10fa:	80 91 b9 00 	lds	r24, 0x00B9
    10fe:	88 7f       	andi	r24, 0xF8	; 248
    1100:	80 34       	cpi	r24, 0x40	; 64
    1102:	b9 f0       	breq	.+46     	; 0x1132 <_ZN3I2C11sendAddressEh+0xae>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
    1104:	e9 eb       	ldi	r30, 0xB9	; 185
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	c0 81       	ld	r28, Z
    110a:	c8 7f       	andi	r28, 0xF8	; 248
  if ((TWI_STATUS == MT_SLA_NACK) || (TWI_STATUS == MR_SLA_NACK))
    110c:	80 81       	ld	r24, Z
    110e:	88 7f       	andi	r24, 0xF8	; 248
    1110:	80 32       	cpi	r24, 0x20	; 32
    1112:	29 f0       	breq	.+10     	; 0x111e <_ZN3I2C11sendAddressEh+0x9a>
    1114:	80 91 b9 00 	lds	r24, 0x00B9
    1118:	88 7f       	andi	r24, 0xF8	; 248
    111a:	88 34       	cpi	r24, 0x48	; 72
    111c:	21 f4       	brne	.+8      	; 0x1126 <_ZN3I2C11sendAddressEh+0xa2>
  {
    stop();
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN3I2C4stopEv>
    return(bufferedStatus);
    1124:	07 c0       	rjmp	.+14     	; 0x1134 <_ZN3I2C11sendAddressEh+0xb0>
  }
  else
  {
    lockUp();
    1126:	c8 01       	movw	r24, r16
    1128:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    112c:	03 c0       	rjmp	.+6      	; 0x1134 <_ZN3I2C11sendAddressEh+0xb0>
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
  {
    return(0);
    112e:	c0 e0       	ldi	r28, 0x00	; 0
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <_ZN3I2C11sendAddressEh+0xb0>
    1132:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
    1134:	8c 2f       	mov	r24, r28
    1136:	df 91       	pop	r29
    1138:	cf 91       	pop	r28
    113a:	1f 91       	pop	r17
    113c:	0f 91       	pop	r16
    113e:	ff 90       	pop	r15
    1140:	ef 90       	pop	r14
    1142:	df 90       	pop	r13
    1144:	cf 90       	pop	r12
    1146:	08 95       	ret

00001148 <_ZN3I2C5startEv>:

/////////////// Private Methods ////////////////////////////////////////


uint8_t I2C::start()
{
    1148:	cf 92       	push	r12
    114a:	df 92       	push	r13
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	0f 93       	push	r16
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
    115a:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
    115e:	6b 01       	movw	r12, r22
    1160:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1162:	84 ea       	ldi	r24, 0xA4	; 164
    1164:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    1168:	cc eb       	ldi	r28, 0xBC	; 188
    116a:	d0 e0       	ldi	r29, 0x00	; 0
    116c:	1a c0       	rjmp	.+52     	; 0x11a2 <_ZN3I2C5startEv+0x5a>
  {
    if(!timeOutDelay){continue;}
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	e1 f0       	breq	.+56     	; 0x11aa <_ZN3I2C5startEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
    1172:	0e 94 4e 0a 	call	0x149c	; 0x149c <millis>
    1176:	ab 01       	movw	r20, r22
    1178:	bc 01       	movw	r22, r24
    117a:	4c 19       	sub	r20, r12
    117c:	5d 09       	sbc	r21, r13
    117e:	6e 09       	sbc	r22, r14
    1180:	7f 09       	sbc	r23, r15
    1182:	80 91 cb 03 	lds	r24, 0x03CB
    1186:	90 91 cc 03 	lds	r25, 0x03CC
    118a:	a0 e0       	ldi	r26, 0x00	; 0
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	48 17       	cp	r20, r24
    1190:	59 07       	cpc	r21, r25
    1192:	6a 07       	cpc	r22, r26
    1194:	7b 07       	cpc	r23, r27
    1196:	28 f0       	brcs	.+10     	; 0x11a2 <_ZN3I2C5startEv+0x5a>
    {
      lockUp();
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
      return(1);
    119e:	c1 e0       	ldi	r28, 0x01	; 1
    11a0:	24 c0       	rjmp	.+72     	; 0x11ea <_ZN3I2C5startEv+0xa2>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    11a2:	80 91 cb 03 	lds	r24, 0x03CB
    11a6:	90 91 cc 03 	lds	r25, 0x03CC

uint8_t I2C::start()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    11aa:	28 81       	ld	r18, Y
    11ac:	22 23       	and	r18, r18
    11ae:	fc f6       	brge	.-66     	; 0x116e <_ZN3I2C5startEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
    11b0:	80 91 b9 00 	lds	r24, 0x00B9
    11b4:	88 7f       	andi	r24, 0xF8	; 248
    11b6:	88 30       	cpi	r24, 0x08	; 8
    11b8:	a9 f0       	breq	.+42     	; 0x11e4 <_ZN3I2C5startEv+0x9c>
    11ba:	80 91 b9 00 	lds	r24, 0x00B9
    11be:	88 7f       	andi	r24, 0xF8	; 248
    11c0:	80 31       	cpi	r24, 0x10	; 16
    11c2:	91 f0       	breq	.+36     	; 0x11e8 <_ZN3I2C5startEv+0xa0>
  {
    return(0);
  }
  if (TWI_STATUS == LOST_ARBTRTN)
    11c4:	80 91 b9 00 	lds	r24, 0x00B9
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	88 33       	cpi	r24, 0x38	; 56
    11cc:	39 f4       	brne	.+14     	; 0x11dc <_ZN3I2C5startEv+0x94>
  {
    uint8_t bufferedStatus = TWI_STATUS;
    11ce:	c0 91 b9 00 	lds	r28, 0x00B9
    11d2:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
    11d4:	c8 01       	movw	r24, r16
    11d6:	0e 94 54 07 	call	0xea8	; 0xea8 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <_ZN3I2C5startEv+0xa2>
  }
  return(TWI_STATUS);
    11dc:	c0 91 b9 00 	lds	r28, 0x00B9
    11e0:	c8 7f       	andi	r28, 0xF8	; 248
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <_ZN3I2C5startEv+0xa2>
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
  {
    return(0);
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <_ZN3I2C5startEv+0xa2>
    11e8:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t bufferedStatus = TWI_STATUS;
    lockUp();
    return(bufferedStatus);
  }
  return(TWI_STATUS);
}
    11ea:	8c 2f       	mov	r24, r28
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	08 95       	ret

000011fe <_ZN3I2C4readEhhh>:
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
{
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	0f 93       	push	r16
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	ec 01       	movw	r28, r24
    1210:	06 2f       	mov	r16, r22
    1212:	f4 2e       	mov	r15, r20
    1214:	12 2f       	mov	r17, r18
  bytesAvailable = 0;
    1216:	10 92 cf 03 	sts	0x03CF, r1
  bufferIndex = 0;
    121a:	10 92 ce 03 	sts	0x03CE, r1
  if(numberBytes == 0){numberBytes++;}
    121e:	22 23       	and	r18, r18
    1220:	09 f4       	brne	.+2      	; 0x1224 <_ZN3I2C4readEhhh+0x26>
    1222:	11 e0       	ldi	r17, 0x01	; 1
  nack = numberBytes - 1;
    1224:	81 2f       	mov	r24, r17
    1226:	81 50       	subi	r24, 0x01	; 1
    1228:	89 83       	std	Y+1, r24	; 0x01
  returnStatus = 0;
    122a:	18 82       	st	Y, r1
  returnStatus = start();
    122c:	ce 01       	movw	r24, r28
    122e:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN3I2C5startEv>
    1232:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    1234:	88 23       	and	r24, r24
    1236:	09 f0       	breq	.+2      	; 0x123a <_ZN3I2C4readEhhh+0x3c>
    1238:	6e c0       	rjmp	.+220    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
  returnStatus = sendAddress(SLA_W(address));
    123a:	00 0f       	add	r16, r16
    123c:	ce 01       	movw	r24, r28
    123e:	60 2f       	mov	r22, r16
    1240:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN3I2C11sendAddressEh>
    1244:	88 83       	st	Y, r24
  if(returnStatus)
    1246:	88 23       	and	r24, r24
    1248:	29 f0       	breq	.+10     	; 0x1254 <_ZN3I2C4readEhhh+0x56>
  {
    if(returnStatus == 1){return(2);}
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	09 f0       	breq	.+2      	; 0x1250 <_ZN3I2C4readEhhh+0x52>
    124e:	63 c0       	rjmp	.+198    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    1250:	82 e0       	ldi	r24, 0x02	; 2
    1252:	61 c0       	rjmp	.+194    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    1254:	ce 01       	movw	r24, r28
    1256:	6f 2d       	mov	r22, r15
    1258:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN3I2C8sendByteEh>
    125c:	88 83       	st	Y, r24
  if(returnStatus)
    125e:	88 23       	and	r24, r24
    1260:	29 f0       	breq	.+10     	; 0x126c <_ZN3I2C4readEhhh+0x6e>
  {
    if(returnStatus == 1){return(3);}
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	09 f0       	breq	.+2      	; 0x1268 <_ZN3I2C4readEhhh+0x6a>
    1266:	57 c0       	rjmp	.+174    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    1268:	83 e0       	ldi	r24, 0x03	; 3
    126a:	55 c0       	rjmp	.+170    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = start();
    126c:	ce 01       	movw	r24, r28
    126e:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN3I2C5startEv>
    1272:	88 83       	st	Y, r24
  if(returnStatus)
    1274:	88 23       	and	r24, r24
    1276:	29 f0       	breq	.+10     	; 0x1282 <_ZN3I2C4readEhhh+0x84>
  {
    if(returnStatus == 1){return(4);}
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	09 f0       	breq	.+2      	; 0x127e <_ZN3I2C4readEhhh+0x80>
    127c:	4c c0       	rjmp	.+152    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    127e:	84 e0       	ldi	r24, 0x04	; 4
    1280:	4a c0       	rjmp	.+148    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
    1282:	60 2f       	mov	r22, r16
    1284:	6f 5f       	subi	r22, 0xFF	; 255
    1286:	ce 01       	movw	r24, r28
    1288:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN3I2C11sendAddressEh>
    128c:	88 83       	st	Y, r24
  if(returnStatus)
    128e:	88 23       	and	r24, r24
    1290:	19 f4       	brne	.+6      	; 0x1298 <_ZN3I2C4readEhhh+0x9a>
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    1292:	11 23       	and	r17, r17
    1294:	29 f4       	brne	.+10     	; 0x12a0 <_ZN3I2C4readEhhh+0xa2>
    1296:	32 c0       	rjmp	.+100    	; 0x12fc <_ZN3I2C4readEhhh+0xfe>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	e9 f5       	brne	.+122    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    129c:	85 e0       	ldi	r24, 0x05	; 5
    129e:	3b c0       	rjmp	.+118    	; 0x1316 <_ZN3I2C4readEhhh+0x118>
uint8_t I2C::read(int address, int registerAddress, int numberBytes)
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
    12a0:	ee 24       	eor	r14, r14
    12a2:	ff 24       	eor	r15, r15
    12a4:	68 94       	set
    12a6:	e1 f8       	bld	r14, 1
    12a8:	ec 0e       	add	r14, r28
    12aa:	fd 1e       	adc	r15, r29
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    }
    data[i] = TWDR;
    12ae:	0f 2e       	mov	r0, r31
    12b0:	fb eb       	ldi	r31, 0xBB	; 187
    12b2:	cf 2e       	mov	r12, r31
    12b4:	dd 24       	eor	r13, r13
    12b6:	f0 2d       	mov	r31, r0
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	80 17       	cp	r24, r16
    12bc:	51 f4       	brne	.+20     	; 0x12d2 <_ZN3I2C4readEhhh+0xd4>
    {
      returnStatus = receiveByte(0);
    12be:	ce 01       	movw	r24, r28
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN3I2C11receiveByteEh>
    12c6:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	11 f1       	breq	.+68     	; 0x1310 <_ZN3I2C4readEhhh+0x112>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    12cc:	88 35       	cpi	r24, 0x58	; 88
    12ce:	51 f0       	breq	.+20     	; 0x12e4 <_ZN3I2C4readEhhh+0xe6>
    12d0:	22 c0       	rjmp	.+68     	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    }
    else
    {
      returnStatus = receiveByte(1);
    12d2:	ce 01       	movw	r24, r28
    12d4:	61 e0       	ldi	r22, 0x01	; 1
    12d6:	0e 94 98 07 	call	0xf30	; 0xf30 <_ZN3I2C11receiveByteEh>
    12da:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	d1 f0       	breq	.+52     	; 0x1314 <_ZN3I2C4readEhhh+0x116>
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    12e0:	80 35       	cpi	r24, 0x50	; 80
    12e2:	c9 f4       	brne	.+50     	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    }
    data[i] = TWDR;
    12e4:	f6 01       	movw	r30, r12
    12e6:	80 81       	ld	r24, Z
    12e8:	f7 01       	movw	r30, r14
    12ea:	81 93       	st	Z+, r24
    12ec:	7f 01       	movw	r14, r30
    bytesAvailable = i+1;
    12ee:	0f 5f       	subi	r16, 0xFF	; 255
    12f0:	00 93 cf 03 	sts	0x03CF, r16
    totalBytes = i+1;
    12f4:	00 93 cd 03 	sts	0x03CD, r16
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    12f8:	01 17       	cp	r16, r17
    12fa:	f1 f6       	brne	.-68     	; 0x12b8 <_ZN3I2C4readEhhh+0xba>
    }
    data[i] = TWDR;
    bytesAvailable = i+1;
    totalBytes = i+1;
  }
  returnStatus = stop();
    12fc:	ce 01       	movw	r24, r28
    12fe:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN3I2C4stopEv>
    1302:	88 83       	st	Y, r24
  if(returnStatus)
    1304:	88 23       	and	r24, r24
    1306:	39 f0       	breq	.+14     	; 0x1316 <_ZN3I2C4readEhhh+0x118>
  {
    if(returnStatus == 1){return(7);}
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	29 f4       	brne	.+10     	; 0x1316 <_ZN3I2C4readEhhh+0x118>
    130c:	87 e0       	ldi	r24, 0x07	; 7
    130e:	03 c0       	rjmp	.+6      	; 0x1316 <_ZN3I2C4readEhhh+0x118>
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    {
      returnStatus = receiveByte(0);
      if(returnStatus == 1){return(6);}
    1310:	86 e0       	ldi	r24, 0x06	; 6
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <_ZN3I2C4readEhhh+0x118>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    }
    else
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
    1314:	86 e0       	ldi	r24, 0x06	; 6
  {
    if(returnStatus == 1){return(7);}
    return(returnStatus);
  }
  return(returnStatus);
}
    1316:	df 91       	pop	r29
    1318:	cf 91       	pop	r28
    131a:	1f 91       	pop	r17
    131c:	0f 91       	pop	r16
    131e:	ff 90       	pop	r15
    1320:	ef 90       	pop	r14
    1322:	df 90       	pop	r13
    1324:	cf 90       	pop	r12
    1326:	08 95       	ret

00001328 <_ZN3I2C5writeEhhh>:
{
  return(write((uint8_t) address, (uint8_t) registerAddress));
}

uint8_t I2C::write(uint8_t address, uint8_t registerAddress, uint8_t data)
{
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	ec 01       	movw	r28, r24
    1334:	16 2f       	mov	r17, r22
    1336:	04 2f       	mov	r16, r20
    1338:	f2 2e       	mov	r15, r18
  returnStatus = 0;
    133a:	18 82       	st	Y, r1
  returnStatus = start(); 
    133c:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN3I2C5startEv>
    1340:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    1342:	88 23       	and	r24, r24
    1344:	59 f5       	brne	.+86     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
  returnStatus = sendAddress(SLA_W(address));
    1346:	61 2f       	mov	r22, r17
    1348:	66 0f       	add	r22, r22
    134a:	ce 01       	movw	r24, r28
    134c:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN3I2C11sendAddressEh>
    1350:	88 83       	st	Y, r24
  if(returnStatus)
    1352:	88 23       	and	r24, r24
    1354:	21 f0       	breq	.+8      	; 0x135e <_ZN3I2C5writeEhhh+0x36>
  {
    if(returnStatus == 1){return(2);}
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	09 f5       	brne	.+66     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	1f c0       	rjmp	.+62     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    135e:	ce 01       	movw	r24, r28
    1360:	60 2f       	mov	r22, r16
    1362:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN3I2C8sendByteEh>
    1366:	88 83       	st	Y, r24
  if(returnStatus)
    1368:	88 23       	and	r24, r24
    136a:	21 f0       	breq	.+8      	; 0x1374 <_ZN3I2C5writeEhhh+0x4c>
  {
    if(returnStatus == 1){return(3);}
    136c:	81 30       	cpi	r24, 0x01	; 1
    136e:	b1 f4       	brne	.+44     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    1370:	83 e0       	ldi	r24, 0x03	; 3
    1372:	14 c0       	rjmp	.+40     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(data);
    1374:	ce 01       	movw	r24, r28
    1376:	6f 2d       	mov	r22, r15
    1378:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN3I2C8sendByteEh>
    137c:	88 83       	st	Y, r24
  if(returnStatus)
    137e:	88 23       	and	r24, r24
    1380:	21 f0       	breq	.+8      	; 0x138a <_ZN3I2C5writeEhhh+0x62>
  {
    if(returnStatus == 1){return(3);}
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	59 f4       	brne	.+22     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    1386:	83 e0       	ldi	r24, 0x03	; 3
    1388:	09 c0       	rjmp	.+18     	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = stop();
    138a:	ce 01       	movw	r24, r28
    138c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN3I2C4stopEv>
    1390:	88 83       	st	Y, r24
  if(returnStatus)
    1392:	88 23       	and	r24, r24
    1394:	19 f0       	breq	.+6      	; 0x139c <_ZN3I2C5writeEhhh+0x74>
  {
    if(returnStatus == 1){return(7);}
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	09 f4       	brne	.+2      	; 0x139c <_ZN3I2C5writeEhhh+0x74>
    139a:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	08 95       	ret

000013a8 <_ZN3I2C5writeEhh>:


/////////////////////////////////////////////////////

uint8_t I2C::write(uint8_t address, uint8_t registerAddress)
{
    13a8:	0f 93       	push	r16
    13aa:	1f 93       	push	r17
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	ec 01       	movw	r28, r24
    13b2:	16 2f       	mov	r17, r22
    13b4:	04 2f       	mov	r16, r20
  returnStatus = 0;
    13b6:	18 82       	st	Y, r1
  returnStatus = start();
    13b8:	0e 94 a4 08 	call	0x1148	; 0x1148 <_ZN3I2C5startEv>
    13bc:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    13be:	88 23       	and	r24, r24
    13c0:	01 f5       	brne	.+64     	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
  returnStatus = sendAddress(SLA_W(address));
    13c2:	61 2f       	mov	r22, r17
    13c4:	66 0f       	add	r22, r22
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 42 08 	call	0x1084	; 0x1084 <_ZN3I2C11sendAddressEh>
    13cc:	88 83       	st	Y, r24
  if(returnStatus)
    13ce:	88 23       	and	r24, r24
    13d0:	21 f0       	breq	.+8      	; 0x13da <_ZN3I2C5writeEhh+0x32>
  {
    if(returnStatus == 1){return(2);}
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	b1 f4       	brne	.+44     	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    13da:	ce 01       	movw	r24, r28
    13dc:	60 2f       	mov	r22, r16
    13de:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <_ZN3I2C8sendByteEh>
    13e2:	88 83       	st	Y, r24
  if(returnStatus)
    13e4:	88 23       	and	r24, r24
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <_ZN3I2C5writeEhh+0x48>
  {
    if(returnStatus == 1){return(3);}
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	59 f4       	brne	.+22     	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
    13ec:	83 e0       	ldi	r24, 0x03	; 3
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = stop();
    13f0:	ce 01       	movw	r24, r28
    13f2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <_ZN3I2C4stopEv>
    13f6:	88 83       	st	Y, r24
  if(returnStatus)
    13f8:	88 23       	and	r24, r24
    13fa:	19 f0       	breq	.+6      	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
  {
    if(returnStatus == 1){return(7);}
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	09 f4       	brne	.+2      	; 0x1402 <_ZN3I2C5writeEhh+0x5a>
    1400:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    140c:	1f 92       	push	r1
    140e:	0f 92       	push	r0
    1410:	0f b6       	in	r0, 0x3f	; 63
    1412:	0f 92       	push	r0
    1414:	11 24       	eor	r1, r1
    1416:	2f 93       	push	r18
    1418:	3f 93       	push	r19
    141a:	8f 93       	push	r24
    141c:	9f 93       	push	r25
    141e:	af 93       	push	r26
    1420:	bf 93       	push	r27
    1422:	80 91 d4 03 	lds	r24, 0x03D4
    1426:	90 91 d5 03 	lds	r25, 0x03D5
    142a:	a0 91 d6 03 	lds	r26, 0x03D6
    142e:	b0 91 d7 03 	lds	r27, 0x03D7
    1432:	30 91 d8 03 	lds	r19, 0x03D8
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	a1 1d       	adc	r26, r1
    143a:	b1 1d       	adc	r27, r1
    143c:	23 2f       	mov	r18, r19
    143e:	2d 5f       	subi	r18, 0xFD	; 253
    1440:	2d 37       	cpi	r18, 0x7D	; 125
    1442:	20 f0       	brcs	.+8      	; 0x144c <__vector_16+0x40>
    1444:	2d 57       	subi	r18, 0x7D	; 125
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	a1 1d       	adc	r26, r1
    144a:	b1 1d       	adc	r27, r1
    144c:	20 93 d8 03 	sts	0x03D8, r18
    1450:	80 93 d4 03 	sts	0x03D4, r24
    1454:	90 93 d5 03 	sts	0x03D5, r25
    1458:	a0 93 d6 03 	sts	0x03D6, r26
    145c:	b0 93 d7 03 	sts	0x03D7, r27
    1460:	80 91 d0 03 	lds	r24, 0x03D0
    1464:	90 91 d1 03 	lds	r25, 0x03D1
    1468:	a0 91 d2 03 	lds	r26, 0x03D2
    146c:	b0 91 d3 03 	lds	r27, 0x03D3
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	a1 1d       	adc	r26, r1
    1474:	b1 1d       	adc	r27, r1
    1476:	80 93 d0 03 	sts	0x03D0, r24
    147a:	90 93 d1 03 	sts	0x03D1, r25
    147e:	a0 93 d2 03 	sts	0x03D2, r26
    1482:	b0 93 d3 03 	sts	0x03D3, r27
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <millis>:
    149c:	8f b7       	in	r24, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	20 91 d4 03 	lds	r18, 0x03D4
    14a4:	30 91 d5 03 	lds	r19, 0x03D5
    14a8:	40 91 d6 03 	lds	r20, 0x03D6
    14ac:	50 91 d7 03 	lds	r21, 0x03D7
    14b0:	8f bf       	out	0x3f, r24	; 63
    14b2:	b9 01       	movw	r22, r18
    14b4:	ca 01       	movw	r24, r20
    14b6:	08 95       	ret

000014b8 <delay>:
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	7f b7       	in	r23, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	80 91 d0 03 	lds	r24, 0x03D0
    14c4:	90 91 d1 03 	lds	r25, 0x03D1
    14c8:	a0 91 d2 03 	lds	r26, 0x03D2
    14cc:	b0 91 d3 03 	lds	r27, 0x03D3
    14d0:	66 b5       	in	r22, 0x26	; 38
    14d2:	a8 9b       	sbis	0x15, 0	; 21
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <delay+0x28>
    14d6:	6f 3f       	cpi	r22, 0xFF	; 255
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <delay+0x28>
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	a1 1d       	adc	r26, r1
    14de:	b1 1d       	adc	r27, r1
    14e0:	7f bf       	out	0x3f, r23	; 63
    14e2:	ba 2f       	mov	r27, r26
    14e4:	a9 2f       	mov	r26, r25
    14e6:	98 2f       	mov	r25, r24
    14e8:	88 27       	eor	r24, r24
    14ea:	86 0f       	add	r24, r22
    14ec:	91 1d       	adc	r25, r1
    14ee:	a1 1d       	adc	r26, r1
    14f0:	b1 1d       	adc	r27, r1
    14f2:	62 e0       	ldi	r22, 0x02	; 2
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	aa 1f       	adc	r26, r26
    14fa:	bb 1f       	adc	r27, r27
    14fc:	6a 95       	dec	r22
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <delay+0x3c>
    1500:	bc 01       	movw	r22, r24
    1502:	2d c0       	rjmp	.+90     	; 0x155e <delay+0xa6>
    1504:	ff b7       	in	r31, 0x3f	; 63
    1506:	f8 94       	cli
    1508:	80 91 d0 03 	lds	r24, 0x03D0
    150c:	90 91 d1 03 	lds	r25, 0x03D1
    1510:	a0 91 d2 03 	lds	r26, 0x03D2
    1514:	b0 91 d3 03 	lds	r27, 0x03D3
    1518:	e6 b5       	in	r30, 0x26	; 38
    151a:	a8 9b       	sbis	0x15, 0	; 21
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <delay+0x70>
    151e:	ef 3f       	cpi	r30, 0xFF	; 255
    1520:	19 f0       	breq	.+6      	; 0x1528 <delay+0x70>
    1522:	01 96       	adiw	r24, 0x01	; 1
    1524:	a1 1d       	adc	r26, r1
    1526:	b1 1d       	adc	r27, r1
    1528:	ff bf       	out	0x3f, r31	; 63
    152a:	ba 2f       	mov	r27, r26
    152c:	a9 2f       	mov	r26, r25
    152e:	98 2f       	mov	r25, r24
    1530:	88 27       	eor	r24, r24
    1532:	8e 0f       	add	r24, r30
    1534:	91 1d       	adc	r25, r1
    1536:	a1 1d       	adc	r26, r1
    1538:	b1 1d       	adc	r27, r1
    153a:	e2 e0       	ldi	r30, 0x02	; 2
    153c:	88 0f       	add	r24, r24
    153e:	99 1f       	adc	r25, r25
    1540:	aa 1f       	adc	r26, r26
    1542:	bb 1f       	adc	r27, r27
    1544:	ea 95       	dec	r30
    1546:	d1 f7       	brne	.-12     	; 0x153c <delay+0x84>
    1548:	86 1b       	sub	r24, r22
    154a:	97 0b       	sbc	r25, r23
    154c:	88 5e       	subi	r24, 0xE8	; 232
    154e:	93 40       	sbci	r25, 0x03	; 3
    1550:	c8 f2       	brcs	.-78     	; 0x1504 <delay+0x4c>
    1552:	21 50       	subi	r18, 0x01	; 1
    1554:	30 40       	sbci	r19, 0x00	; 0
    1556:	40 40       	sbci	r20, 0x00	; 0
    1558:	50 40       	sbci	r21, 0x00	; 0
    155a:	68 51       	subi	r22, 0x18	; 24
    155c:	7c 4f       	sbci	r23, 0xFC	; 252
    155e:	21 15       	cp	r18, r1
    1560:	31 05       	cpc	r19, r1
    1562:	41 05       	cpc	r20, r1
    1564:	51 05       	cpc	r21, r1
    1566:	71 f6       	brne	.-100    	; 0x1504 <delay+0x4c>
    1568:	08 95       	ret

0000156a <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    156a:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    156c:	84 b5       	in	r24, 0x24	; 36
    156e:	82 60       	ori	r24, 0x02	; 2
    1570:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1572:	84 b5       	in	r24, 0x24	; 36
    1574:	81 60       	ori	r24, 0x01	; 1
    1576:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1578:	85 b5       	in	r24, 0x25	; 37
    157a:	82 60       	ori	r24, 0x02	; 2
    157c:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    157e:	85 b5       	in	r24, 0x25	; 37
    1580:	81 60       	ori	r24, 0x01	; 1
    1582:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1584:	ee e6       	ldi	r30, 0x6E	; 110
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	81 60       	ori	r24, 0x01	; 1
    158c:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    158e:	e1 e8       	ldi	r30, 0x81	; 129
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1594:	80 81       	ld	r24, Z
    1596:	82 60       	ori	r24, 0x02	; 2
    1598:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    159a:	80 81       	ld	r24, Z
    159c:	81 60       	ori	r24, 0x01	; 1
    159e:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    15a0:	e0 e8       	ldi	r30, 0x80	; 128
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	81 60       	ori	r24, 0x01	; 1
    15a8:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    15aa:	e1 eb       	ldi	r30, 0xB1	; 177
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	80 81       	ld	r24, Z
    15b0:	84 60       	ori	r24, 0x04	; 4
    15b2:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    15b4:	e0 eb       	ldi	r30, 0xB0	; 176
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    15be:	ea e7       	ldi	r30, 0x7A	; 122
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	84 60       	ori	r24, 0x04	; 4
    15c6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    15c8:	80 81       	ld	r24, Z
    15ca:	82 60       	ori	r24, 0x02	; 2
    15cc:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    15ce:	80 81       	ld	r24, Z
    15d0:	81 60       	ori	r24, 0x01	; 1
    15d2:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    15d4:	80 81       	ld	r24, Z
    15d6:	80 68       	ori	r24, 0x80	; 128
    15d8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    15da:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    15de:	08 95       	ret

000015e0 <analogRead>:
	// there's something connected to AREF.
	analog_reference = mode;
}

int analogRead(uint8_t pin)
{
    15e0:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644P__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    15e2:	8e 30       	cpi	r24, 0x0E	; 14
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <analogRead+0x8>
    15e6:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    15e8:	97 70       	andi	r25, 0x07	; 7
    15ea:	80 91 8a 03 	lds	r24, 0x038A
    15ee:	82 95       	swap	r24
    15f0:	88 0f       	add	r24, r24
    15f2:	88 0f       	add	r24, r24
    15f4:	80 7c       	andi	r24, 0xC0	; 192
    15f6:	89 2b       	or	r24, r25
    15f8:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    15fc:	80 91 7a 00 	lds	r24, 0x007A
    1600:	80 64       	ori	r24, 0x40	; 64
    1602:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1606:	80 91 7a 00 	lds	r24, 0x007A
    160a:	86 fd       	sbrc	r24, 6
    160c:	fc cf       	rjmp	.-8      	; 0x1606 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    160e:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    1612:	40 91 79 00 	lds	r20, 0x0079
    1616:	94 2f       	mov	r25, r20
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	28 2b       	or	r18, r24
    161e:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    1620:	c9 01       	movw	r24, r18
    1622:	08 95       	ret

00001624 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	18 2f       	mov	r17, r24
    162c:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    162e:	61 e0       	ldi	r22, 0x01	; 1
    1630:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <pinMode>
	if (val == 0)
    1634:	20 97       	sbiw	r28, 0x00	; 0
    1636:	09 f4       	brne	.+2      	; 0x163a <analogWrite+0x16>
    1638:	4a c0       	rjmp	.+148    	; 0x16ce <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    163a:	cf 3f       	cpi	r28, 0xFF	; 255
    163c:	d1 05       	cpc	r29, r1
    163e:	09 f4       	brne	.+2      	; 0x1642 <analogWrite+0x1e>
    1640:	49 c0       	rjmp	.+146    	; 0x16d4 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    1642:	e1 2f       	mov	r30, r17
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	e2 55       	subi	r30, 0x52	; 82
    1648:	ff 4f       	sbci	r31, 0xFF	; 255
    164a:	84 91       	lpm	r24, Z
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	c1 f0       	breq	.+48     	; 0x1680 <analogWrite+0x5c>
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	28 f4       	brcc	.+10     	; 0x165e <analogWrite+0x3a>
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	51 f0       	breq	.+20     	; 0x166c <analogWrite+0x48>
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	b1 f5       	brne	.+108    	; 0x16c8 <analogWrite+0xa4>
    165c:	0c c0       	rjmp	.+24     	; 0x1676 <analogWrite+0x52>
    165e:	86 30       	cpi	r24, 0x06	; 6
    1660:	19 f1       	breq	.+70     	; 0x16a8 <analogWrite+0x84>
    1662:	87 30       	cpi	r24, 0x07	; 7
    1664:	49 f1       	breq	.+82     	; 0x16b8 <analogWrite+0x94>
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	79 f5       	brne	.+94     	; 0x16c8 <analogWrite+0xa4>
    166a:	14 c0       	rjmp	.+40     	; 0x1694 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    166c:	84 b5       	in	r24, 0x24	; 36
    166e:	80 68       	ori	r24, 0x80	; 128
    1670:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1672:	c7 bd       	out	0x27, r28	; 39
    1674:	33 c0       	rjmp	.+102    	; 0x16dc <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1676:	84 b5       	in	r24, 0x24	; 36
    1678:	80 62       	ori	r24, 0x20	; 32
    167a:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    167c:	c8 bd       	out	0x28, r28	; 40
    167e:	2e c0       	rjmp	.+92     	; 0x16dc <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    1680:	80 91 80 00 	lds	r24, 0x0080
    1684:	80 68       	ori	r24, 0x80	; 128
    1686:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    168a:	d0 93 89 00 	sts	0x0089, r29
    168e:	c0 93 88 00 	sts	0x0088, r28
    1692:	24 c0       	rjmp	.+72     	; 0x16dc <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1694:	80 91 80 00 	lds	r24, 0x0080
    1698:	80 62       	ori	r24, 0x20	; 32
    169a:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    169e:	d0 93 8b 00 	sts	0x008B, r29
    16a2:	c0 93 8a 00 	sts	0x008A, r28
    16a6:	1a c0       	rjmp	.+52     	; 0x16dc <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    16a8:	80 91 b0 00 	lds	r24, 0x00B0
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    16b2:	c0 93 b3 00 	sts	0x00B3, r28
    16b6:	12 c0       	rjmp	.+36     	; 0x16dc <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    16b8:	80 91 b0 00 	lds	r24, 0x00B0
    16bc:	80 62       	ori	r24, 0x20	; 32
    16be:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    16c2:	c0 93 b4 00 	sts	0x00B4, r28
    16c6:	0a c0       	rjmp	.+20     	; 0x16dc <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    16c8:	c0 38       	cpi	r28, 0x80	; 128
    16ca:	d1 05       	cpc	r29, r1
    16cc:	1c f4       	brge	.+6      	; 0x16d4 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    16ce:	81 2f       	mov	r24, r17
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    16d4:	81 2f       	mov	r24, r17
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	0e 94 b1 0b 	call	0x1762	; 0x1762 <digitalWrite>
				}
		}
	}
}
    16dc:	df 91       	pop	r29
    16de:	cf 91       	pop	r28
    16e0:	1f 91       	pop	r17
    16e2:	08 95       	ret

000016e4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    16e8:	48 2f       	mov	r20, r24
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	ca 01       	movw	r24, r20
    16ee:	86 56       	subi	r24, 0x66	; 102
    16f0:	9f 4f       	sbci	r25, 0xFF	; 255
    16f2:	fc 01       	movw	r30, r24
    16f4:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    16f6:	4a 57       	subi	r20, 0x7A	; 122
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	fa 01       	movw	r30, r20
    16fc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    16fe:	88 23       	and	r24, r24
    1700:	69 f1       	breq	.+90     	; 0x175c <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	fc 01       	movw	r30, r24
    170a:	e8 59       	subi	r30, 0x98	; 152
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	a5 91       	lpm	r26, Z+
    1710:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    1712:	fc 01       	movw	r30, r24
    1714:	ee 58       	subi	r30, 0x8E	; 142
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	c5 91       	lpm	r28, Z+
    171a:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    171c:	66 23       	and	r22, r22
    171e:	51 f4       	brne	.+20     	; 0x1734 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1720:	2f b7       	in	r18, 0x3f	; 63
                cli();
    1722:	f8 94       	cli
		*reg &= ~bit;
    1724:	8c 91       	ld	r24, X
    1726:	93 2f       	mov	r25, r19
    1728:	90 95       	com	r25
    172a:	89 23       	and	r24, r25
    172c:	8c 93       	st	X, r24
		*out &= ~bit;
    172e:	88 81       	ld	r24, Y
    1730:	89 23       	and	r24, r25
    1732:	0b c0       	rjmp	.+22     	; 0x174a <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1734:	62 30       	cpi	r22, 0x02	; 2
    1736:	61 f4       	brne	.+24     	; 0x1750 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1738:	2f b7       	in	r18, 0x3f	; 63
                cli();
    173a:	f8 94       	cli
		*reg &= ~bit;
    173c:	8c 91       	ld	r24, X
    173e:	93 2f       	mov	r25, r19
    1740:	90 95       	com	r25
    1742:	89 23       	and	r24, r25
    1744:	8c 93       	st	X, r24
		*out |= bit;
    1746:	88 81       	ld	r24, Y
    1748:	83 2b       	or	r24, r19
    174a:	88 83       	st	Y, r24
		SREG = oldSREG;
    174c:	2f bf       	out	0x3f, r18	; 63
    174e:	06 c0       	rjmp	.+12     	; 0x175c <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    1750:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1752:	f8 94       	cli
		*reg |= bit;
    1754:	8c 91       	ld	r24, X
    1756:	83 2b       	or	r24, r19
    1758:	8c 93       	st	X, r24
		SREG = oldSREG;
    175a:	9f bf       	out	0x3f, r25	; 63
	}
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    1762:	48 2f       	mov	r20, r24
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	ca 01       	movw	r24, r20
    1768:	82 55       	subi	r24, 0x52	; 82
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	fc 01       	movw	r30, r24
    176e:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1770:	ca 01       	movw	r24, r20
    1772:	86 56       	subi	r24, 0x66	; 102
    1774:	9f 4f       	sbci	r25, 0xFF	; 255
    1776:	fc 01       	movw	r30, r24
    1778:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    177a:	4a 57       	subi	r20, 0x7A	; 122
    177c:	5f 4f       	sbci	r21, 0xFF	; 255
    177e:	fa 01       	movw	r30, r20
    1780:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1782:	33 23       	and	r19, r19
    1784:	09 f4       	brne	.+2      	; 0x1788 <digitalWrite+0x26>
    1786:	40 c0       	rjmp	.+128    	; 0x1808 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1788:	22 23       	and	r18, r18
    178a:	51 f1       	breq	.+84     	; 0x17e0 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    178c:	23 30       	cpi	r18, 0x03	; 3
    178e:	71 f0       	breq	.+28     	; 0x17ac <digitalWrite+0x4a>
    1790:	24 30       	cpi	r18, 0x04	; 4
    1792:	28 f4       	brcc	.+10     	; 0x179e <digitalWrite+0x3c>
    1794:	21 30       	cpi	r18, 0x01	; 1
    1796:	a1 f0       	breq	.+40     	; 0x17c0 <digitalWrite+0x5e>
    1798:	22 30       	cpi	r18, 0x02	; 2
    179a:	11 f5       	brne	.+68     	; 0x17e0 <digitalWrite+0x7e>
    179c:	14 c0       	rjmp	.+40     	; 0x17c6 <digitalWrite+0x64>
    179e:	26 30       	cpi	r18, 0x06	; 6
    17a0:	b1 f0       	breq	.+44     	; 0x17ce <digitalWrite+0x6c>
    17a2:	27 30       	cpi	r18, 0x07	; 7
    17a4:	c1 f0       	breq	.+48     	; 0x17d6 <digitalWrite+0x74>
    17a6:	24 30       	cpi	r18, 0x04	; 4
    17a8:	d9 f4       	brne	.+54     	; 0x17e0 <digitalWrite+0x7e>
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    17ac:	80 91 80 00 	lds	r24, 0x0080
    17b0:	8f 77       	andi	r24, 0x7F	; 127
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    17b4:	80 91 80 00 	lds	r24, 0x0080
    17b8:	8f 7d       	andi	r24, 0xDF	; 223
    17ba:	80 93 80 00 	sts	0x0080, r24
    17be:	10 c0       	rjmp	.+32     	; 0x17e0 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    17c0:	84 b5       	in	r24, 0x24	; 36
    17c2:	8f 77       	andi	r24, 0x7F	; 127
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    17c6:	84 b5       	in	r24, 0x24	; 36
    17c8:	8f 7d       	andi	r24, 0xDF	; 223
    17ca:	84 bd       	out	0x24, r24	; 36
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    17ce:	80 91 b0 00 	lds	r24, 0x00B0
    17d2:	8f 77       	andi	r24, 0x7F	; 127
    17d4:	03 c0       	rjmp	.+6      	; 0x17dc <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    17d6:	80 91 b0 00 	lds	r24, 0x00B0
    17da:	8f 7d       	andi	r24, 0xDF	; 223
    17dc:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    17e0:	e3 2f       	mov	r30, r19
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	ee 0f       	add	r30, r30
    17e6:	ff 1f       	adc	r31, r31
    17e8:	ee 58       	subi	r30, 0x8E	; 142
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	a5 91       	lpm	r26, Z+
    17ee:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    17f0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    17f2:	f8 94       	cli

	if (val == LOW) {
    17f4:	66 23       	and	r22, r22
    17f6:	21 f4       	brne	.+8      	; 0x1800 <digitalWrite+0x9e>
		*out &= ~bit;
    17f8:	8c 91       	ld	r24, X
    17fa:	90 95       	com	r25
    17fc:	89 23       	and	r24, r25
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <digitalWrite+0xa2>
	} else {
		*out |= bit;
    1800:	8c 91       	ld	r24, X
    1802:	89 2b       	or	r24, r25
    1804:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1806:	2f bf       	out	0x3f, r18	; 63
    1808:	08 95       	ret

0000180a <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    180a:	68 2f       	mov	r22, r24
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	cb 01       	movw	r24, r22
    1810:	82 55       	subi	r24, 0x52	; 82
    1812:	9f 4f       	sbci	r25, 0xFF	; 255
    1814:	fc 01       	movw	r30, r24
    1816:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1818:	cb 01       	movw	r24, r22
    181a:	86 56       	subi	r24, 0x66	; 102
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	fc 01       	movw	r30, r24
    1820:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    1822:	6a 57       	subi	r22, 0x7A	; 122
    1824:	7f 4f       	sbci	r23, 0xFF	; 255
    1826:	fb 01       	movw	r30, r22
    1828:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
    182a:	99 23       	and	r25, r25
    182c:	19 f4       	brne	.+6      	; 0x1834 <digitalRead+0x2a>
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c c0       	rjmp	.+120    	; 0x18ac <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1834:	22 23       	and	r18, r18
    1836:	51 f1       	breq	.+84     	; 0x188c <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1838:	23 30       	cpi	r18, 0x03	; 3
    183a:	71 f0       	breq	.+28     	; 0x1858 <digitalRead+0x4e>
    183c:	24 30       	cpi	r18, 0x04	; 4
    183e:	28 f4       	brcc	.+10     	; 0x184a <digitalRead+0x40>
    1840:	21 30       	cpi	r18, 0x01	; 1
    1842:	a1 f0       	breq	.+40     	; 0x186c <digitalRead+0x62>
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	11 f5       	brne	.+68     	; 0x188c <digitalRead+0x82>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <digitalRead+0x68>
    184a:	26 30       	cpi	r18, 0x06	; 6
    184c:	b1 f0       	breq	.+44     	; 0x187a <digitalRead+0x70>
    184e:	27 30       	cpi	r18, 0x07	; 7
    1850:	c1 f0       	breq	.+48     	; 0x1882 <digitalRead+0x78>
    1852:	24 30       	cpi	r18, 0x04	; 4
    1854:	d9 f4       	brne	.+54     	; 0x188c <digitalRead+0x82>
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1858:	80 91 80 00 	lds	r24, 0x0080
    185c:	8f 77       	andi	r24, 0x7F	; 127
    185e:	03 c0       	rjmp	.+6      	; 0x1866 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1860:	80 91 80 00 	lds	r24, 0x0080
    1864:	8f 7d       	andi	r24, 0xDF	; 223
    1866:	80 93 80 00 	sts	0x0080, r24
    186a:	10 c0       	rjmp	.+32     	; 0x188c <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    186c:	84 b5       	in	r24, 0x24	; 36
    186e:	8f 77       	andi	r24, 0x7F	; 127
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1872:	84 b5       	in	r24, 0x24	; 36
    1874:	8f 7d       	andi	r24, 0xDF	; 223
    1876:	84 bd       	out	0x24, r24	; 36
    1878:	09 c0       	rjmp	.+18     	; 0x188c <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    187a:	80 91 b0 00 	lds	r24, 0x00B0
    187e:	8f 77       	andi	r24, 0x7F	; 127
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1882:	80 91 b0 00 	lds	r24, 0x00B0
    1886:	8f 7d       	andi	r24, 0xDF	; 223
    1888:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    188c:	89 2f       	mov	r24, r25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	88 0f       	add	r24, r24
    1892:	99 1f       	adc	r25, r25
    1894:	84 58       	subi	r24, 0x84	; 132
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	fc 01       	movw	r30, r24
    189a:	a5 91       	lpm	r26, Z+
    189c:	b4 91       	lpm	r27, Z
    189e:	8c 91       	ld	r24, X
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	84 23       	and	r24, r20
    18a6:	11 f0       	breq	.+4      	; 0x18ac <digitalRead+0xa2>
    18a8:	21 e0       	ldi	r18, 0x01	; 1
    18aa:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    18ac:	c9 01       	movw	r24, r18
    18ae:	08 95       	ret

000018b0 <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    18b0:	08 95       	ret

000018b2 <__vector_18>:
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	2f 93       	push	r18
    18be:	3f 93       	push	r19
    18c0:	4f 93       	push	r20
    18c2:	8f 93       	push	r24
    18c4:	9f 93       	push	r25
    18c6:	ef 93       	push	r30
    18c8:	ff 93       	push	r31
    18ca:	80 91 c0 00 	lds	r24, 0x00C0
    18ce:	82 fd       	sbrc	r24, 2
    18d0:	1d c0       	rjmp	.+58     	; 0x190c <__vector_18+0x5a>
    18d2:	40 91 c6 00 	lds	r20, 0x00C6
    18d6:	20 91 19 04 	lds	r18, 0x0419
    18da:	30 91 1a 04 	lds	r19, 0x041A
    18de:	2f 5f       	subi	r18, 0xFF	; 255
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	2f 73       	andi	r18, 0x3F	; 63
    18e4:	30 70       	andi	r19, 0x00	; 0
    18e6:	80 91 1b 04 	lds	r24, 0x041B
    18ea:	90 91 1c 04 	lds	r25, 0x041C
    18ee:	28 17       	cp	r18, r24
    18f0:	39 07       	cpc	r19, r25
    18f2:	71 f0       	breq	.+28     	; 0x1910 <__vector_18+0x5e>
    18f4:	e0 91 19 04 	lds	r30, 0x0419
    18f8:	f0 91 1a 04 	lds	r31, 0x041A
    18fc:	e7 52       	subi	r30, 0x27	; 39
    18fe:	fc 4f       	sbci	r31, 0xFC	; 252
    1900:	40 83       	st	Z, r20
    1902:	30 93 1a 04 	sts	0x041A, r19
    1906:	20 93 19 04 	sts	0x0419, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <__vector_18+0x5e>
    190c:	80 91 c6 00 	lds	r24, 0x00C6
    1910:	ff 91       	pop	r31
    1912:	ef 91       	pop	r30
    1914:	9f 91       	pop	r25
    1916:	8f 91       	pop	r24
    1918:	4f 91       	pop	r20
    191a:	3f 91       	pop	r19
    191c:	2f 91       	pop	r18
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <_Z14serialEventRunv>:
    1928:	e0 91 6d 04 	lds	r30, 0x046D
    192c:	f0 91 6e 04 	lds	r31, 0x046E
    1930:	e0 5c       	subi	r30, 0xC0	; 192
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	81 91       	ld	r24, Z+
    1936:	91 91       	ld	r25, Z+
    1938:	20 81       	ld	r18, Z
    193a:	31 81       	ldd	r19, Z+1	; 0x01
    193c:	82 1b       	sub	r24, r18
    193e:	93 0b       	sbc	r25, r19
    1940:	8f 73       	andi	r24, 0x3F	; 63
    1942:	90 70       	andi	r25, 0x00	; 0
    1944:	89 2b       	or	r24, r25
    1946:	11 f0       	breq	.+4      	; 0x194c <_Z14serialEventRunv+0x24>
    1948:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <_Z11serialEventv>
    194c:	08 95       	ret

0000194e <__vector_19>:
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	8f 93       	push	r24
    195e:	9f 93       	push	r25
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	20 91 5d 04 	lds	r18, 0x045D
    1968:	30 91 5e 04 	lds	r19, 0x045E
    196c:	80 91 5f 04 	lds	r24, 0x045F
    1970:	90 91 60 04 	lds	r25, 0x0460
    1974:	28 17       	cp	r18, r24
    1976:	39 07       	cpc	r19, r25
    1978:	31 f4       	brne	.+12     	; 0x1986 <__vector_19+0x38>
    197a:	80 91 c1 00 	lds	r24, 0x00C1
    197e:	8f 7d       	andi	r24, 0xDF	; 223
    1980:	80 93 c1 00 	sts	0x00C1, r24
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <__vector_19+0x60>
    1986:	e0 91 5f 04 	lds	r30, 0x045F
    198a:	f0 91 60 04 	lds	r31, 0x0460
    198e:	e3 5e       	subi	r30, 0xE3	; 227
    1990:	fb 4f       	sbci	r31, 0xFB	; 251
    1992:	20 81       	ld	r18, Z
    1994:	80 91 5f 04 	lds	r24, 0x045F
    1998:	90 91 60 04 	lds	r25, 0x0460
    199c:	01 96       	adiw	r24, 0x01	; 1
    199e:	8f 73       	andi	r24, 0x3F	; 63
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	90 93 60 04 	sts	0x0460, r25
    19a6:	80 93 5f 04 	sts	0x045F, r24
    19aa:	20 93 c6 00 	sts	0x00C6, r18
    19ae:	ff 91       	pop	r31
    19b0:	ef 91       	pop	r30
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	3f 91       	pop	r19
    19b8:	2f 91       	pop	r18
    19ba:	0f 90       	pop	r0
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	0f 90       	pop	r0
    19c0:	1f 90       	pop	r1
    19c2:	18 95       	reti

000019c4 <_ZN14HardwareSerial5beginEm>:
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	df 92       	push	r13
    19ca:	ef 92       	push	r14
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	ec 01       	movw	r28, r24
    19d8:	7a 01       	movw	r14, r20
    19da:	8b 01       	movw	r16, r22
    19dc:	dd 24       	eor	r13, r13
    19de:	40 30       	cpi	r20, 0x00	; 0
    19e0:	81 ee       	ldi	r24, 0xE1	; 225
    19e2:	58 07       	cpc	r21, r24
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	68 07       	cpc	r22, r24
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	78 07       	cpc	r23, r24
    19ec:	11 f0       	breq	.+4      	; 0x19f2 <_ZN14HardwareSerial5beginEm+0x2e>
    19ee:	dd 24       	eor	r13, r13
    19f0:	d3 94       	inc	r13
    19f2:	91 e0       	ldi	r25, 0x01	; 1
    19f4:	a9 2e       	mov	r10, r25
    19f6:	b1 2c       	mov	r11, r1
    19f8:	ec 89       	ldd	r30, Y+20	; 0x14
    19fa:	fd 89       	ldd	r31, Y+21	; 0x15
    19fc:	dd 20       	and	r13, r13
    19fe:	69 f0       	breq	.+26     	; 0x1a1a <_ZN14HardwareSerial5beginEm+0x56>
    1a00:	c5 01       	movw	r24, r10
    1a02:	08 a0       	lds	r16, 0x88
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <_ZN14HardwareSerial5beginEm+0x46>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <_ZN14HardwareSerial5beginEm+0x42>
    1a0e:	80 83       	st	Z, r24
    1a10:	60 e0       	ldi	r22, 0x00	; 0
    1a12:	79 e0       	ldi	r23, 0x09	; 9
    1a14:	8d e3       	ldi	r24, 0x3D	; 61
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	05 c0       	rjmp	.+10     	; 0x1a24 <_ZN14HardwareSerial5beginEm+0x60>
    1a1a:	10 82       	st	Z, r1
    1a1c:	60 e8       	ldi	r22, 0x80	; 128
    1a1e:	74 e8       	ldi	r23, 0x84	; 132
    1a20:	8e e1       	ldi	r24, 0x1E	; 30
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	a8 01       	movw	r20, r16
    1a26:	97 01       	movw	r18, r14
    1a28:	0e 94 2d 10 	call	0x205a	; 0x205a <__udivmodsi4>
    1a2c:	21 50       	subi	r18, 0x01	; 1
    1a2e:	30 40       	sbci	r19, 0x00	; 0
    1a30:	40 40       	sbci	r20, 0x00	; 0
    1a32:	50 40       	sbci	r21, 0x00	; 0
    1a34:	56 95       	lsr	r21
    1a36:	47 95       	ror	r20
    1a38:	37 95       	ror	r19
    1a3a:	27 95       	ror	r18
    1a3c:	80 e1       	ldi	r24, 0x10	; 16
    1a3e:	20 30       	cpi	r18, 0x00	; 0
    1a40:	38 07       	cpc	r19, r24
    1a42:	20 f0       	brcs	.+8      	; 0x1a4c <_ZN14HardwareSerial5beginEm+0x88>
    1a44:	dd 20       	and	r13, r13
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <_ZN14HardwareSerial5beginEm+0x88>
    1a48:	dd 24       	eor	r13, r13
    1a4a:	d6 cf       	rjmp	.-84     	; 0x19f8 <_ZN14HardwareSerial5beginEm+0x34>
    1a4c:	e8 89       	ldd	r30, Y+16	; 0x10
    1a4e:	f9 89       	ldd	r31, Y+17	; 0x11
    1a50:	30 83       	st	Z, r19
    1a52:	ea 89       	ldd	r30, Y+18	; 0x12
    1a54:	fb 89       	ldd	r31, Y+19	; 0x13
    1a56:	20 83       	st	Z, r18
    1a58:	19 a2       	lds	r17, 0x99
    1a5a:	ee 89       	ldd	r30, Y+22	; 0x16
    1a5c:	ff 89       	ldd	r31, Y+23	; 0x17
    1a5e:	40 81       	ld	r20, Z
    1a60:	21 e0       	ldi	r18, 0x01	; 1
    1a62:	30 e0       	ldi	r19, 0x00	; 0
    1a64:	c9 01       	movw	r24, r18
    1a66:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <_ZN14HardwareSerial5beginEm+0xaa>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <_ZN14HardwareSerial5beginEm+0xa6>
    1a72:	48 2b       	or	r20, r24
    1a74:	40 83       	st	Z, r20
    1a76:	ee 89       	ldd	r30, Y+22	; 0x16
    1a78:	ff 89       	ldd	r31, Y+23	; 0x17
    1a7a:	40 81       	ld	r20, Z
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <_ZN14HardwareSerial5beginEm+0xc2>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <_ZN14HardwareSerial5beginEm+0xbe>
    1a8a:	48 2b       	or	r20, r24
    1a8c:	40 83       	st	Z, r20
    1a8e:	ee 89       	ldd	r30, Y+22	; 0x16
    1a90:	ff 89       	ldd	r31, Y+23	; 0x17
    1a92:	40 81       	ld	r20, Z
    1a94:	c9 01       	movw	r24, r18
    1a96:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1a98:	02 c0       	rjmp	.+4      	; 0x1a9e <_ZN14HardwareSerial5beginEm+0xda>
    1a9a:	88 0f       	add	r24, r24
    1a9c:	99 1f       	adc	r25, r25
    1a9e:	0a 94       	dec	r0
    1aa0:	e2 f7       	brpl	.-8      	; 0x1a9a <_ZN14HardwareSerial5beginEm+0xd6>
    1aa2:	48 2b       	or	r20, r24
    1aa4:	40 83       	st	Z, r20
    1aa6:	ee 89       	ldd	r30, Y+22	; 0x16
    1aa8:	ff 89       	ldd	r31, Y+23	; 0x17
    1aaa:	80 81       	ld	r24, Z
    1aac:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <_ZN14HardwareSerial5beginEm+0xf0>
    1ab0:	22 0f       	add	r18, r18
    1ab2:	33 1f       	adc	r19, r19
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <_ZN14HardwareSerial5beginEm+0xec>
    1ab8:	20 95       	com	r18
    1aba:	28 23       	and	r18, r24
    1abc:	20 83       	st	Z, r18
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	bf 90       	pop	r11
    1ace:	af 90       	pop	r10
    1ad0:	08 95       	ret

00001ad2 <_ZN14HardwareSerial9availableEv>:
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	1c 96       	adiw	r26, 0x0c	; 12
    1ad6:	ed 91       	ld	r30, X+
    1ad8:	fc 91       	ld	r31, X
    1ada:	1d 97       	sbiw	r26, 0x0d	; 13
    1adc:	e0 5c       	subi	r30, 0xC0	; 192
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	21 91       	ld	r18, Z+
    1ae2:	31 91       	ld	r19, Z+
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	28 1b       	sub	r18, r24
    1aea:	39 0b       	sbc	r19, r25
    1aec:	2f 73       	andi	r18, 0x3F	; 63
    1aee:	30 70       	andi	r19, 0x00	; 0
    1af0:	c9 01       	movw	r24, r18
    1af2:	08 95       	ret

00001af4 <_ZN14HardwareSerial4peekEv>:
    1af4:	dc 01       	movw	r26, r24
    1af6:	1c 96       	adiw	r26, 0x0c	; 12
    1af8:	ed 91       	ld	r30, X+
    1afa:	fc 91       	ld	r31, X
    1afc:	1d 97       	sbiw	r26, 0x0d	; 13
    1afe:	e0 5c       	subi	r30, 0xC0	; 192
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	20 81       	ld	r18, Z
    1b04:	31 81       	ldd	r19, Z+1	; 0x01
    1b06:	e0 54       	subi	r30, 0x40	; 64
    1b08:	f0 40       	sbci	r31, 0x00	; 0
    1b0a:	df 01       	movw	r26, r30
    1b0c:	ae 5b       	subi	r26, 0xBE	; 190
    1b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b10:	8d 91       	ld	r24, X+
    1b12:	9c 91       	ld	r25, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	28 17       	cp	r18, r24
    1b18:	39 07       	cpc	r19, r25
    1b1a:	19 f4       	brne	.+6      	; 0x1b22 <_ZN14HardwareSerial4peekEv+0x2e>
    1b1c:	2f ef       	ldi	r18, 0xFF	; 255
    1b1e:	3f ef       	ldi	r19, 0xFF	; 255
    1b20:	07 c0       	rjmp	.+14     	; 0x1b30 <_ZN14HardwareSerial4peekEv+0x3c>
    1b22:	8d 91       	ld	r24, X+
    1b24:	9c 91       	ld	r25, X
    1b26:	e8 0f       	add	r30, r24
    1b28:	f9 1f       	adc	r31, r25
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	c9 01       	movw	r24, r18
    1b32:	08 95       	ret

00001b34 <_ZN14HardwareSerial4readEv>:
    1b34:	dc 01       	movw	r26, r24
    1b36:	1c 96       	adiw	r26, 0x0c	; 12
    1b38:	ed 91       	ld	r30, X+
    1b3a:	fc 91       	ld	r31, X
    1b3c:	1d 97       	sbiw	r26, 0x0d	; 13
    1b3e:	e0 5c       	subi	r30, 0xC0	; 192
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	e0 54       	subi	r30, 0x40	; 64
    1b48:	f0 40       	sbci	r31, 0x00	; 0
    1b4a:	df 01       	movw	r26, r30
    1b4c:	ae 5b       	subi	r26, 0xBE	; 190
    1b4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b50:	8d 91       	ld	r24, X+
    1b52:	9c 91       	ld	r25, X
    1b54:	11 97       	sbiw	r26, 0x01	; 1
    1b56:	28 17       	cp	r18, r24
    1b58:	39 07       	cpc	r19, r25
    1b5a:	19 f4       	brne	.+6      	; 0x1b62 <_ZN14HardwareSerial4readEv+0x2e>
    1b5c:	2f ef       	ldi	r18, 0xFF	; 255
    1b5e:	3f ef       	ldi	r19, 0xFF	; 255
    1b60:	10 c0       	rjmp	.+32     	; 0x1b82 <_ZN14HardwareSerial4readEv+0x4e>
    1b62:	8d 91       	ld	r24, X+
    1b64:	9c 91       	ld	r25, X
    1b66:	11 97       	sbiw	r26, 0x01	; 1
    1b68:	e8 0f       	add	r30, r24
    1b6a:	f9 1f       	adc	r31, r25
    1b6c:	20 81       	ld	r18, Z
    1b6e:	8d 91       	ld	r24, X+
    1b70:	9c 91       	ld	r25, X
    1b72:	11 97       	sbiw	r26, 0x01	; 1
    1b74:	01 96       	adiw	r24, 0x01	; 1
    1b76:	8f 73       	andi	r24, 0x3F	; 63
    1b78:	90 70       	andi	r25, 0x00	; 0
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	9c 93       	st	X, r25
    1b7e:	8e 93       	st	-X, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	c9 01       	movw	r24, r18
    1b84:	08 95       	ret

00001b86 <_ZN14HardwareSerial5flushEv>:
    1b86:	dc 01       	movw	r26, r24
    1b88:	91 96       	adiw	r26, 0x21	; 33
    1b8a:	8c 91       	ld	r24, X
    1b8c:	91 97       	sbiw	r26, 0x21	; 33
    1b8e:	88 23       	and	r24, r24
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <_ZN14HardwareSerial5flushEv+0x1a>
    1b92:	54 96       	adiw	r26, 0x14	; 20
    1b94:	ed 91       	ld	r30, X+
    1b96:	fc 91       	ld	r31, X
    1b98:	55 97       	sbiw	r26, 0x15	; 21
    1b9a:	80 81       	ld	r24, Z
    1b9c:	86 ff       	sbrs	r24, 6
    1b9e:	f9 cf       	rjmp	.-14     	; 0x1b92 <_ZN14HardwareSerial5flushEv+0xc>
    1ba0:	91 96       	adiw	r26, 0x21	; 33
    1ba2:	1c 92       	st	X, r1
    1ba4:	08 95       	ret

00001ba6 <_ZN14HardwareSerial5writeEh>:
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	ec 01       	movw	r28, r24
    1bac:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bae:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bb0:	e0 5c       	subi	r30, 0xC0	; 192
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	20 81       	ld	r18, Z
    1bb6:	31 81       	ldd	r19, Z+1	; 0x01
    1bb8:	e0 54       	subi	r30, 0x40	; 64
    1bba:	f0 40       	sbci	r31, 0x00	; 0
    1bbc:	2f 5f       	subi	r18, 0xFF	; 255
    1bbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc0:	2f 73       	andi	r18, 0x3F	; 63
    1bc2:	30 70       	andi	r19, 0x00	; 0
    1bc4:	df 01       	movw	r26, r30
    1bc6:	ae 5b       	subi	r26, 0xBE	; 190
    1bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	d1 f3       	breq	.-12     	; 0x1bca <_ZN14HardwareSerial5writeEh+0x24>
    1bd6:	e0 5c       	subi	r30, 0xC0	; 192
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	e0 54       	subi	r30, 0x40	; 64
    1be0:	f0 40       	sbci	r31, 0x00	; 0
    1be2:	e8 0f       	add	r30, r24
    1be4:	f9 1f       	adc	r31, r25
    1be6:	60 83       	st	Z, r22
    1be8:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bea:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bec:	e0 5c       	subi	r30, 0xC0	; 192
    1bee:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf0:	31 83       	std	Z+1, r19	; 0x01
    1bf2:	20 83       	st	Z, r18
    1bf4:	ee 89       	ldd	r30, Y+22	; 0x16
    1bf6:	ff 89       	ldd	r31, Y+23	; 0x17
    1bf8:	20 81       	ld	r18, Z
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <_ZN14HardwareSerial5writeEh+0x60>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <_ZN14HardwareSerial5writeEh+0x5c>
    1c0a:	28 2b       	or	r18, r24
    1c0c:	20 83       	st	Z, r18
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	89 a3       	lds	r24, 0x59
    1c12:	ec 89       	ldd	r30, Y+20	; 0x14
    1c14:	fd 89       	ldd	r31, Y+21	; 0x15
    1c16:	80 81       	ld	r24, Z
    1c18:	80 64       	ori	r24, 0x40	; 64
    1c1a:	80 83       	st	Z, r24
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	08 95       	ret

00001c26 <_GLOBAL__I_rx_buffer>:
    1c26:	10 92 64 04 	sts	0x0464, r1
    1c2a:	10 92 63 04 	sts	0x0463, r1
    1c2e:	88 ee       	ldi	r24, 0xE8	; 232
    1c30:	93 e0       	ldi	r25, 0x03	; 3
    1c32:	a0 e0       	ldi	r26, 0x00	; 0
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	80 93 65 04 	sts	0x0465, r24
    1c3a:	90 93 66 04 	sts	0x0466, r25
    1c3e:	a0 93 67 04 	sts	0x0467, r26
    1c42:	b0 93 68 04 	sts	0x0468, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1c46:	8f e8       	ldi	r24, 0x8F	; 143
    1c48:	93 e0       	ldi	r25, 0x03	; 3
    1c4a:	90 93 62 04 	sts	0x0462, r25
    1c4e:	80 93 61 04 	sts	0x0461, r24
{
  _rx_buffer = rx_buffer;
    1c52:	89 ed       	ldi	r24, 0xD9	; 217
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	90 93 6e 04 	sts	0x046E, r25
    1c5a:	80 93 6d 04 	sts	0x046D, r24
  _tx_buffer = tx_buffer;
    1c5e:	8d e1       	ldi	r24, 0x1D	; 29
    1c60:	94 e0       	ldi	r25, 0x04	; 4
    1c62:	90 93 70 04 	sts	0x0470, r25
    1c66:	80 93 6f 04 	sts	0x046F, r24
  _ubrrh = ubrrh;
    1c6a:	85 ec       	ldi	r24, 0xC5	; 197
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	90 93 72 04 	sts	0x0472, r25
    1c72:	80 93 71 04 	sts	0x0471, r24
  _ubrrl = ubrrl;
    1c76:	84 ec       	ldi	r24, 0xC4	; 196
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	90 93 74 04 	sts	0x0474, r25
    1c7e:	80 93 73 04 	sts	0x0473, r24
  _ucsra = ucsra;
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	90 93 76 04 	sts	0x0476, r25
    1c8a:	80 93 75 04 	sts	0x0475, r24
  _ucsrb = ucsrb;
    1c8e:	81 ec       	ldi	r24, 0xC1	; 193
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	90 93 78 04 	sts	0x0478, r25
    1c96:	80 93 77 04 	sts	0x0477, r24
  _ucsrc = ucsrc;
    1c9a:	82 ec       	ldi	r24, 0xC2	; 194
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	90 93 7a 04 	sts	0x047A, r25
    1ca2:	80 93 79 04 	sts	0x0479, r24
  _udr = udr;
    1ca6:	86 ec       	ldi	r24, 0xC6	; 198
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	90 93 7c 04 	sts	0x047C, r25
    1cae:	80 93 7b 04 	sts	0x047B, r24
  _rxen = rxen;
    1cb2:	84 e0       	ldi	r24, 0x04	; 4
    1cb4:	80 93 7d 04 	sts	0x047D, r24
  _txen = txen;
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	80 93 7e 04 	sts	0x047E, r24
  _rxcie = rxcie;
    1cbe:	87 e0       	ldi	r24, 0x07	; 7
    1cc0:	80 93 7f 04 	sts	0x047F, r24
  _udrie = udrie;
    1cc4:	85 e0       	ldi	r24, 0x05	; 5
    1cc6:	80 93 80 04 	sts	0x0480, r24
  _u2x = u2x;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	80 93 81 04 	sts	0x0481, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1cd0:	08 95       	ret

00001cd2 <main>:
#include <Arduino.h>

int main(void)
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
{
	init();
    1cd6:	0e 94 b5 0a 	call	0x156a	; 0x156a <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1cda:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1cde:	c4 e9       	ldi	r28, 0x94	; 148
    1ce0:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1ce2:	0e 94 2d 04 	call	0x85a	; 0x85a <loop>
		if (serialEventRun) serialEventRun();
    1ce6:	20 97       	sbiw	r28, 0x00	; 0
    1ce8:	e1 f3       	breq	.-8      	; 0x1ce2 <main+0x10>
    1cea:	0e 94 94 0c 	call	0x1928	; 0x1928 <_Z14serialEventRunv>
    1cee:	f9 cf       	rjmp	.-14     	; 0x1ce2 <main+0x10>

00001cf0 <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	7c 01       	movw	r14, r24
    1d02:	6b 01       	movw	r12, r22
    1d04:	8a 01       	movw	r16, r20
    1d06:	c0 e0       	ldi	r28, 0x00	; 0
    1d08:	d0 e0       	ldi	r29, 0x00	; 0
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <_ZN5Print5writeEPKhj+0x3a>
    1d0c:	d6 01       	movw	r26, r12
    1d0e:	6d 91       	ld	r22, X+
    1d10:	6d 01       	movw	r12, r26
    1d12:	d7 01       	movw	r26, r14
    1d14:	ed 91       	ld	r30, X+
    1d16:	fc 91       	ld	r31, X
    1d18:	01 90       	ld	r0, Z+
    1d1a:	f0 81       	ld	r31, Z
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	c7 01       	movw	r24, r14
    1d20:	09 95       	icall
    1d22:	c8 0f       	add	r28, r24
    1d24:	d9 1f       	adc	r29, r25
    1d26:	01 50       	subi	r16, 0x01	; 1
    1d28:	10 40       	sbci	r17, 0x00	; 0
    1d2a:	01 15       	cp	r16, r1
    1d2c:	11 05       	cpc	r17, r1
    1d2e:	71 f7       	brne	.-36     	; 0x1d0c <_ZN5Print5writeEPKhj+0x1c>
    1d30:	ce 01       	movw	r24, r28
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	1f 91       	pop	r17
    1d38:	0f 91       	pop	r16
    1d3a:	ff 90       	pop	r15
    1d3c:	ef 90       	pop	r14
    1d3e:	df 90       	pop	r13
    1d40:	cf 90       	pop	r12
    1d42:	08 95       	ret

00001d44 <_ZN5Print7printlnEv>:
    1d44:	ef 92       	push	r14
    1d46:	ff 92       	push	r15
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	8c 01       	movw	r16, r24
    1d4e:	dc 01       	movw	r26, r24
    1d50:	ed 91       	ld	r30, X+
    1d52:	fc 91       	ld	r31, X
    1d54:	01 90       	ld	r0, Z+
    1d56:	f0 81       	ld	r31, Z
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	6d e0       	ldi	r22, 0x0D	; 13
    1d5c:	09 95       	icall
    1d5e:	7c 01       	movw	r14, r24
    1d60:	d8 01       	movw	r26, r16
    1d62:	ed 91       	ld	r30, X+
    1d64:	fc 91       	ld	r31, X
    1d66:	01 90       	ld	r0, Z+
    1d68:	f0 81       	ld	r31, Z
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	6a e0       	ldi	r22, 0x0A	; 10
    1d70:	09 95       	icall
    1d72:	9c 01       	movw	r18, r24
    1d74:	2e 0d       	add	r18, r14
    1d76:	3f 1d       	adc	r19, r15
    1d78:	c9 01       	movw	r24, r18
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	08 95       	ret

00001d84 <_ZN5Print5writeEPKc>:
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	ec 01       	movw	r28, r24
    1d8a:	61 15       	cp	r22, r1
    1d8c:	71 05       	cpc	r23, r1
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <_ZN5Print5writeEPKc+0x12>
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <_ZN5Print5writeEPKc+0x30>
    1d96:	db 01       	movw	r26, r22
    1d98:	0d 90       	ld	r0, X+
    1d9a:	00 20       	and	r0, r0
    1d9c:	e9 f7       	brne	.-6      	; 0x1d98 <_ZN5Print5writeEPKc+0x14>
    1d9e:	11 97       	sbiw	r26, 0x01	; 1
    1da0:	a6 1b       	sub	r26, r22
    1da2:	b7 0b       	sbc	r27, r23
    1da4:	e8 81       	ld	r30, Y
    1da6:	f9 81       	ldd	r31, Y+1	; 0x01
    1da8:	02 80       	ldd	r0, Z+2	; 0x02
    1daa:	f3 81       	ldd	r31, Z+3	; 0x03
    1dac:	e0 2d       	mov	r30, r0
    1dae:	ad 01       	movw	r20, r26
    1db0:	09 95       	icall
    1db2:	9c 01       	movw	r18, r24
    1db4:	c9 01       	movw	r24, r18
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	08 95       	ret

00001dbc <_ZN5Print11printNumberEmh>:
    1dbc:	4f 92       	push	r4
    1dbe:	5f 92       	push	r5
    1dc0:	7f 92       	push	r7
    1dc2:	8f 92       	push	r8
    1dc4:	9f 92       	push	r9
    1dc6:	af 92       	push	r10
    1dc8:	bf 92       	push	r11
    1dca:	cf 92       	push	r12
    1dcc:	df 92       	push	r13
    1dce:	ef 92       	push	r14
    1dd0:	ff 92       	push	r15
    1dd2:	0f 93       	push	r16
    1dd4:	1f 93       	push	r17
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	a1 97       	sbiw	r28, 0x21	; 33
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	2c 01       	movw	r4, r24
    1dec:	74 2e       	mov	r7, r20
    1dee:	cb 01       	movw	r24, r22
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <_ZN5Print11printNumberEmh+0x3a>
    1df4:	2a e0       	ldi	r18, 0x0A	; 10
    1df6:	19 a2       	lds	r17, 0x99
    1df8:	31 e2       	ldi	r19, 0x21	; 33
    1dfa:	c3 2e       	mov	r12, r19
    1dfc:	d1 2c       	mov	r13, r1
    1dfe:	cc 0e       	add	r12, r28
    1e00:	dd 1e       	adc	r13, r29
    1e02:	82 2e       	mov	r8, r18
    1e04:	99 24       	eor	r9, r9
    1e06:	aa 24       	eor	r10, r10
    1e08:	bb 24       	eor	r11, r11
    1e0a:	67 2d       	mov	r22, r7
    1e0c:	75 2f       	mov	r23, r21
    1e0e:	a5 01       	movw	r20, r10
    1e10:	94 01       	movw	r18, r8
    1e12:	0e 94 2d 10 	call	0x205a	; 0x205a <__udivmodsi4>
    1e16:	79 01       	movw	r14, r18
    1e18:	8a 01       	movw	r16, r20
    1e1a:	c8 01       	movw	r24, r16
    1e1c:	b7 01       	movw	r22, r14
    1e1e:	a5 01       	movw	r20, r10
    1e20:	94 01       	movw	r18, r8
    1e22:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <__mulsi3>
    1e26:	47 2d       	mov	r20, r7
    1e28:	46 1b       	sub	r20, r22
    1e2a:	08 94       	sec
    1e2c:	c1 08       	sbc	r12, r1
    1e2e:	d1 08       	sbc	r13, r1
    1e30:	4a 30       	cpi	r20, 0x0A	; 10
    1e32:	14 f4       	brge	.+4      	; 0x1e38 <_ZN5Print11printNumberEmh+0x7c>
    1e34:	40 5d       	subi	r20, 0xD0	; 208
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <_ZN5Print11printNumberEmh+0x7e>
    1e38:	49 5c       	subi	r20, 0xC9	; 201
    1e3a:	f6 01       	movw	r30, r12
    1e3c:	40 83       	st	Z, r20
    1e3e:	e1 14       	cp	r14, r1
    1e40:	f1 04       	cpc	r15, r1
    1e42:	01 05       	cpc	r16, r1
    1e44:	11 05       	cpc	r17, r1
    1e46:	21 f0       	breq	.+8      	; 0x1e50 <_ZN5Print11printNumberEmh+0x94>
    1e48:	7e 2c       	mov	r7, r14
    1e4a:	5f 2d       	mov	r21, r15
    1e4c:	c8 01       	movw	r24, r16
    1e4e:	dd cf       	rjmp	.-70     	; 0x1e0a <_ZN5Print11printNumberEmh+0x4e>
    1e50:	c2 01       	movw	r24, r4
    1e52:	b6 01       	movw	r22, r12
    1e54:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN5Print5writeEPKc>
    1e58:	a1 96       	adiw	r28, 0x21	; 33
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	cf 91       	pop	r28
    1e66:	df 91       	pop	r29
    1e68:	1f 91       	pop	r17
    1e6a:	0f 91       	pop	r16
    1e6c:	ff 90       	pop	r15
    1e6e:	ef 90       	pop	r14
    1e70:	df 90       	pop	r13
    1e72:	cf 90       	pop	r12
    1e74:	bf 90       	pop	r11
    1e76:	af 90       	pop	r10
    1e78:	9f 90       	pop	r9
    1e7a:	8f 90       	pop	r8
    1e7c:	7f 90       	pop	r7
    1e7e:	5f 90       	pop	r5
    1e80:	4f 90       	pop	r4
    1e82:	08 95       	ret

00001e84 <_ZN5Print5printEmi>:
    1e84:	dc 01       	movw	r26, r24
    1e86:	21 15       	cp	r18, r1
    1e88:	31 05       	cpc	r19, r1
    1e8a:	41 f4       	brne	.+16     	; 0x1e9c <_ZN5Print5printEmi+0x18>
    1e8c:	ed 91       	ld	r30, X+
    1e8e:	fc 91       	ld	r31, X
    1e90:	01 90       	ld	r0, Z+
    1e92:	f0 81       	ld	r31, Z
    1e94:	e0 2d       	mov	r30, r0
    1e96:	64 2f       	mov	r22, r20
    1e98:	09 95       	icall
    1e9a:	08 95       	ret
    1e9c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN5Print11printNumberEmh>
    1ea0:	08 95       	ret

00001ea2 <_ZN5Print5printEji>:
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	9a 01       	movw	r18, r20
    1eac:	7b 01       	movw	r14, r22
    1eae:	00 e0       	ldi	r16, 0x00	; 0
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	b8 01       	movw	r22, r16
    1eb4:	a7 01       	movw	r20, r14
    1eb6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
    1eba:	1f 91       	pop	r17
    1ebc:	0f 91       	pop	r16
    1ebe:	ff 90       	pop	r15
    1ec0:	ef 90       	pop	r14
    1ec2:	08 95       	ret

00001ec4 <_ZN5Print5printEhi>:
    1ec4:	ef 92       	push	r14
    1ec6:	ff 92       	push	r15
    1ec8:	0f 93       	push	r16
    1eca:	1f 93       	push	r17
    1ecc:	9a 01       	movw	r18, r20
    1ece:	e6 2e       	mov	r14, r22
    1ed0:	ff 24       	eor	r15, r15
    1ed2:	00 e0       	ldi	r16, 0x00	; 0
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	b8 01       	movw	r22, r16
    1ed8:	a7 01       	movw	r20, r14
    1eda:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	08 95       	ret

00001ee8 <_ZN5Print7printlnEhi>:
    1ee8:	cf 92       	push	r12
    1eea:	df 92       	push	r13
    1eec:	ef 92       	push	r14
    1eee:	ff 92       	push	r15
    1ef0:	0f 93       	push	r16
    1ef2:	1f 93       	push	r17
    1ef4:	6c 01       	movw	r12, r24
    1ef6:	e6 2e       	mov	r14, r22
    1ef8:	9a 01       	movw	r18, r20
    1efa:	ff 24       	eor	r15, r15
    1efc:	00 e0       	ldi	r16, 0x00	; 0
    1efe:	10 e0       	ldi	r17, 0x00	; 0
    1f00:	b8 01       	movw	r22, r16
    1f02:	a7 01       	movw	r20, r14
    1f04:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <_ZN5Print5printEmi>
    1f08:	8c 01       	movw	r16, r24
    1f0a:	c6 01       	movw	r24, r12
    1f0c:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN5Print7printlnEv>
    1f10:	08 0f       	add	r16, r24
    1f12:	19 1f       	adc	r17, r25
    1f14:	c8 01       	movw	r24, r16
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret

00001f24 <_ZN5Print5printEli>:
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	ec 01       	movw	r28, r24
    1f36:	6a 01       	movw	r12, r20
    1f38:	7b 01       	movw	r14, r22
    1f3a:	21 15       	cp	r18, r1
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	41 f4       	brne	.+16     	; 0x1f50 <_ZN5Print5printEli+0x2c>
    1f40:	e8 81       	ld	r30, Y
    1f42:	f9 81       	ldd	r31, Y+1	; 0x01
    1f44:	01 90       	ld	r0, Z+
    1f46:	f0 81       	ld	r31, Z
    1f48:	e0 2d       	mov	r30, r0
    1f4a:	64 2f       	mov	r22, r20
    1f4c:	09 95       	icall
    1f4e:	1f c0       	rjmp	.+62     	; 0x1f8e <_ZN5Print5printEli+0x6a>
    1f50:	2a 30       	cpi	r18, 0x0A	; 10
    1f52:	31 05       	cpc	r19, r1
    1f54:	d1 f4       	brne	.+52     	; 0x1f8a <_ZN5Print5printEli+0x66>
    1f56:	77 ff       	sbrs	r23, 7
    1f58:	17 c0       	rjmp	.+46     	; 0x1f88 <_ZN5Print5printEli+0x64>
    1f5a:	e8 81       	ld	r30, Y
    1f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1f5e:	01 90       	ld	r0, Z+
    1f60:	f0 81       	ld	r31, Z
    1f62:	e0 2d       	mov	r30, r0
    1f64:	6d e2       	ldi	r22, 0x2D	; 45
    1f66:	09 95       	icall
    1f68:	8c 01       	movw	r16, r24
    1f6a:	44 27       	eor	r20, r20
    1f6c:	55 27       	eor	r21, r21
    1f6e:	ba 01       	movw	r22, r20
    1f70:	4c 19       	sub	r20, r12
    1f72:	5d 09       	sbc	r21, r13
    1f74:	6e 09       	sbc	r22, r14
    1f76:	7f 09       	sbc	r23, r15
    1f78:	ce 01       	movw	r24, r28
    1f7a:	2a e0       	ldi	r18, 0x0A	; 10
    1f7c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN5Print11printNumberEmh>
    1f80:	98 01       	movw	r18, r16
    1f82:	28 0f       	add	r18, r24
    1f84:	39 1f       	adc	r19, r25
    1f86:	04 c0       	rjmp	.+8      	; 0x1f90 <_ZN5Print5printEli+0x6c>
    1f88:	2a e0       	ldi	r18, 0x0A	; 10
    1f8a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_ZN5Print11printNumberEmh>
    1f8e:	9c 01       	movw	r18, r24
    1f90:	c9 01       	movw	r24, r18
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	08 95       	ret

00001fa4 <_ZN5Print5printEii>:
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	7b 01       	movw	r14, r22
    1fae:	9a 01       	movw	r18, r20
    1fb0:	00 27       	eor	r16, r16
    1fb2:	f7 fc       	sbrc	r15, 7
    1fb4:	00 95       	com	r16
    1fb6:	10 2f       	mov	r17, r16
    1fb8:	b8 01       	movw	r22, r16
    1fba:	a7 01       	movw	r20, r14
    1fbc:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <_ZN5Print5printEli>
    1fc0:	1f 91       	pop	r17
    1fc2:	0f 91       	pop	r16
    1fc4:	ff 90       	pop	r15
    1fc6:	ef 90       	pop	r14
    1fc8:	08 95       	ret

00001fca <_ZN5Print5printEPKc>:
    1fca:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN5Print5writeEPKc>
    1fce:	08 95       	ret

00001fd0 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1fda:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <_ZN5Print5writeEPKc>
    1fde:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <_ZN5Print7printlnEv>
    1fe6:	08 0f       	add	r16, r24
    1fe8:	19 1f       	adc	r17, r25
  return n;
}
    1fea:	c8 01       	movw	r24, r16
    1fec:	1f 91       	pop	r17
    1fee:	0f 91       	pop	r16
    1ff0:	ff 90       	pop	r15
    1ff2:	ef 90       	pop	r14
    1ff4:	08 95       	ret

00001ff6 <__mulsi3>:
    1ff6:	62 9f       	mul	r22, r18
    1ff8:	d0 01       	movw	r26, r0
    1ffa:	73 9f       	mul	r23, r19
    1ffc:	f0 01       	movw	r30, r0
    1ffe:	82 9f       	mul	r24, r18
    2000:	e0 0d       	add	r30, r0
    2002:	f1 1d       	adc	r31, r1
    2004:	64 9f       	mul	r22, r20
    2006:	e0 0d       	add	r30, r0
    2008:	f1 1d       	adc	r31, r1
    200a:	92 9f       	mul	r25, r18
    200c:	f0 0d       	add	r31, r0
    200e:	83 9f       	mul	r24, r19
    2010:	f0 0d       	add	r31, r0
    2012:	74 9f       	mul	r23, r20
    2014:	f0 0d       	add	r31, r0
    2016:	65 9f       	mul	r22, r21
    2018:	f0 0d       	add	r31, r0
    201a:	99 27       	eor	r25, r25
    201c:	72 9f       	mul	r23, r18
    201e:	b0 0d       	add	r27, r0
    2020:	e1 1d       	adc	r30, r1
    2022:	f9 1f       	adc	r31, r25
    2024:	63 9f       	mul	r22, r19
    2026:	b0 0d       	add	r27, r0
    2028:	e1 1d       	adc	r30, r1
    202a:	f9 1f       	adc	r31, r25
    202c:	bd 01       	movw	r22, r26
    202e:	cf 01       	movw	r24, r30
    2030:	11 24       	eor	r1, r1
    2032:	08 95       	ret

00002034 <__divmodhi4>:
    2034:	97 fb       	bst	r25, 7
    2036:	09 2e       	mov	r0, r25
    2038:	07 26       	eor	r0, r23
    203a:	0a d0       	rcall	.+20     	; 0x2050 <__divmodhi4_neg1>
    203c:	77 fd       	sbrc	r23, 7
    203e:	04 d0       	rcall	.+8      	; 0x2048 <__divmodhi4_neg2>
    2040:	2e d0       	rcall	.+92     	; 0x209e <__udivmodhi4>
    2042:	06 d0       	rcall	.+12     	; 0x2050 <__divmodhi4_neg1>
    2044:	00 20       	and	r0, r0
    2046:	1a f4       	brpl	.+6      	; 0x204e <__divmodhi4_exit>

00002048 <__divmodhi4_neg2>:
    2048:	70 95       	com	r23
    204a:	61 95       	neg	r22
    204c:	7f 4f       	sbci	r23, 0xFF	; 255

0000204e <__divmodhi4_exit>:
    204e:	08 95       	ret

00002050 <__divmodhi4_neg1>:
    2050:	f6 f7       	brtc	.-4      	; 0x204e <__divmodhi4_exit>
    2052:	90 95       	com	r25
    2054:	81 95       	neg	r24
    2056:	9f 4f       	sbci	r25, 0xFF	; 255
    2058:	08 95       	ret

0000205a <__udivmodsi4>:
    205a:	a1 e2       	ldi	r26, 0x21	; 33
    205c:	1a 2e       	mov	r1, r26
    205e:	aa 1b       	sub	r26, r26
    2060:	bb 1b       	sub	r27, r27
    2062:	fd 01       	movw	r30, r26
    2064:	0d c0       	rjmp	.+26     	; 0x2080 <__udivmodsi4_ep>

00002066 <__udivmodsi4_loop>:
    2066:	aa 1f       	adc	r26, r26
    2068:	bb 1f       	adc	r27, r27
    206a:	ee 1f       	adc	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	a2 17       	cp	r26, r18
    2070:	b3 07       	cpc	r27, r19
    2072:	e4 07       	cpc	r30, r20
    2074:	f5 07       	cpc	r31, r21
    2076:	20 f0       	brcs	.+8      	; 0x2080 <__udivmodsi4_ep>
    2078:	a2 1b       	sub	r26, r18
    207a:	b3 0b       	sbc	r27, r19
    207c:	e4 0b       	sbc	r30, r20
    207e:	f5 0b       	sbc	r31, r21

00002080 <__udivmodsi4_ep>:
    2080:	66 1f       	adc	r22, r22
    2082:	77 1f       	adc	r23, r23
    2084:	88 1f       	adc	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	1a 94       	dec	r1
    208a:	69 f7       	brne	.-38     	; 0x2066 <__udivmodsi4_loop>
    208c:	60 95       	com	r22
    208e:	70 95       	com	r23
    2090:	80 95       	com	r24
    2092:	90 95       	com	r25
    2094:	9b 01       	movw	r18, r22
    2096:	ac 01       	movw	r20, r24
    2098:	bd 01       	movw	r22, r26
    209a:	cf 01       	movw	r24, r30
    209c:	08 95       	ret

0000209e <__udivmodhi4>:
    209e:	aa 1b       	sub	r26, r26
    20a0:	bb 1b       	sub	r27, r27
    20a2:	51 e1       	ldi	r21, 0x11	; 17
    20a4:	07 c0       	rjmp	.+14     	; 0x20b4 <__udivmodhi4_ep>

000020a6 <__udivmodhi4_loop>:
    20a6:	aa 1f       	adc	r26, r26
    20a8:	bb 1f       	adc	r27, r27
    20aa:	a6 17       	cp	r26, r22
    20ac:	b7 07       	cpc	r27, r23
    20ae:	10 f0       	brcs	.+4      	; 0x20b4 <__udivmodhi4_ep>
    20b0:	a6 1b       	sub	r26, r22
    20b2:	b7 0b       	sbc	r27, r23

000020b4 <__udivmodhi4_ep>:
    20b4:	88 1f       	adc	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	5a 95       	dec	r21
    20ba:	a9 f7       	brne	.-22     	; 0x20a6 <__udivmodhi4_loop>
    20bc:	80 95       	com	r24
    20be:	90 95       	com	r25
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	08 95       	ret

000020c6 <__tablejump2__>:
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31

000020ca <__tablejump__>:
    20ca:	05 90       	lpm	r0, Z+
    20cc:	f4 91       	lpm	r31, Z
    20ce:	e0 2d       	mov	r30, r0
    20d0:	09 94       	ijmp

000020d2 <_exit>:
    20d2:	f8 94       	cli

000020d4 <__stop_program>:
    20d4:	ff cf       	rjmp	.-2      	; 0x20d4 <__stop_program>
