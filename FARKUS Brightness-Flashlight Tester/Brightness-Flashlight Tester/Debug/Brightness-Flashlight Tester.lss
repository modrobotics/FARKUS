
Brightness-Flashlight Tester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00002790  00002824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  008002d2  008002d2  000029f6  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  000029f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f25  00000000  00000000  00005a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000820  00000000  00000000  00006948  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c6c  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009e2c  00000000  00000000  00007dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001a90  00000000  00000000  00011c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000043e6  00000000  00000000  00013690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000109c  00000000  00000000  00017a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023cb  00000000  00000000  00018b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005874  00000000  00000000  0001aedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000758  00000000  00000000  00020753  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 96 0c 	jmp	0x192c	; 0x192c <__vector_18>
      4c:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	f6 04       	cpc	r15, r6
      c4:	50 0e       	add	r5, r16

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	e0 e9       	ldi	r30, 0x90	; 144
      da:	f7 e2       	ldi	r31, 0x27	; 39
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	a2 3d       	cpi	r26, 0xD2	; 210
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	13 e0       	ldi	r17, 0x03	; 3
      ea:	a2 ed       	ldi	r26, 0xD2	; 210
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	ab 3e       	cpi	r26, 0xEB	; 235
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 aa 13 	call	0x2754	; 0x2754 <__tablejump__>
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <main>
     112:	0c 94 c6 13 	jmp	0x278c	; 0x278c <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <setup>:
int actionResponse(String inString);
enum result {UNKNOWN, FAIL, PASS}; //test result possibilities. (UNKNOWN = 0, FAIL = 1, PASS = 2)
result testResult = UNKNOWN; //default to unknown, which should be read as fail

void setup()
{
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
	Serial.begin(9600);
     122:	c7 ec       	ldi	r28, 0xC7	; 199
     124:	d3 e0       	ldi	r29, 0x03	; 3
     126:	ce 01       	movw	r24, r28
     128:	40 e8       	ldi	r20, 0x80	; 128
     12a:	55 e2       	ldi	r21, 0x25	; 37
     12c:	60 e0       	ldi	r22, 0x00	; 0
     12e:	70 e0       	ldi	r23, 0x00	; 0
     130:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN14HardwareSerial5beginEm>
	Serial.println(ID);
     134:	ce 01       	movw	r24, r28
     136:	60 e0       	ldi	r22, 0x00	; 0
     138:	71 e0       	ldi	r23, 0x01	; 1
     13a:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
	pinMode(READ_PIN, INPUT);
     13e:	8e e0       	ldi	r24, 0x0E	; 14
     140:	60 e0       	ldi	r22, 0x00	; 0
     142:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	pinMode(SELECT_PIN, INPUT_PULLUP);
     146:	82 e0       	ldi	r24, 0x02	; 2
     148:	62 e0       	ldi	r22, 0x02	; 2
     14a:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	pinMode(START_PIN, INPUT);
     14e:	88 e0       	ldi	r24, 0x08	; 8
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	pinMode(RED_PIN, OUTPUT);
     156:	89 e0       	ldi	r24, 0x09	; 9
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	pinMode(GREEN_PIN, OUTPUT);
     15e:	8a e0       	ldi	r24, 0x0A	; 10
     160:	61 e0       	ldi	r22, 0x01	; 1
     162:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	pinMode(LED_PIN, OUTPUT);
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	61 e0       	ldi	r22, 0x01	; 1
     16a:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	cubelets.initialize();
     16e:	00 e0       	ldi	r16, 0x00	; 0
     170:	13 e0       	ldi	r17, 0x03	; 3
     172:	c8 01       	movw	r24, r16
     174:	0e 94 0f 07 	call	0xe1e	; 0xe1e <_ZN14CubeletsShield10initializeEv>
	cubelets.greenOffAllCubelets();
     178:	c8 01       	movw	r24, r16
     17a:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN14CubeletsShield19greenOffAllCubeletsEv>
	stateVar = IDLE; //set initial next state to IDLE.
     17e:	10 92 06 03 	sts	0x0306, r1
	Serial.println("RDY");
     182:	ce 01       	movw	r24, r28
     184:	66 e0       	ldi	r22, 0x06	; 6
     186:	71 e0       	ldi	r23, 0x01	; 1
     188:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
}
     18c:	df 91       	pop	r29
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <_Z14actionResponse6String>:
	}
	
}

int actionResponse(String inString) //act on serial commands and generate response
{
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	1f 93       	push	r17
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	e1 97       	sbiw	r28, 0x31	; 49
     1a6:	0f b6       	in	r0, 0x3f	; 63
     1a8:	f8 94       	cli
     1aa:	de bf       	out	0x3e, r29	; 62
     1ac:	0f be       	out	0x3f, r0	; 63
     1ae:	cd bf       	out	0x3d, r28	; 61
     1b0:	7c 01       	movw	r14, r24
	//lots of ifs since can't switch Strings
	if(inString.equalsIgnoreCase("I"))
     1b2:	ce 01       	movw	r24, r28
     1b4:	8b 96       	adiw	r24, 0x2b	; 43
     1b6:	6a e0       	ldi	r22, 0x0A	; 10
     1b8:	71 e0       	ldi	r23, 0x01	; 1
     1ba:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     1be:	c7 01       	movw	r24, r14
     1c0:	be 01       	movw	r22, r28
     1c2:	65 5d       	subi	r22, 0xD5	; 213
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     1ca:	18 2f       	mov	r17, r24
     1cc:	ce 01       	movw	r24, r28
     1ce:	8b 96       	adiw	r24, 0x2b	; 43
     1d0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     1d4:	11 23       	and	r17, r17
     1d6:	39 f0       	breq	.+14     	; 0x1e6 <_Z14actionResponse6String+0x50>
	{
		Serial.println(ID); //send ID to host
     1d8:	87 ec       	ldi	r24, 0xC7	; 199
     1da:	93 e0       	ldi	r25, 0x03	; 3
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	71 e0       	ldi	r23, 0x01	; 1
     1e0:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
		return 0;
     1e4:	f9 c0       	rjmp	.+498    	; 0x3d8 <_Z14actionResponse6String+0x242>
	}
	
	if(inString.equalsIgnoreCase("C0")) //configuration
     1e6:	ce 01       	movw	r24, r28
     1e8:	84 96       	adiw	r24, 0x24	; 36
     1ea:	6c e0       	ldi	r22, 0x0C	; 12
     1ec:	71 e0       	ldi	r23, 0x01	; 1
     1ee:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     1f2:	c7 01       	movw	r24, r14
     1f4:	be 01       	movw	r22, r28
     1f6:	6c 5d       	subi	r22, 0xDC	; 220
     1f8:	7f 4f       	sbci	r23, 0xFF	; 255
     1fa:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     1fe:	18 2f       	mov	r17, r24
     200:	ce 01       	movw	r24, r28
     202:	84 96       	adiw	r24, 0x24	; 36
     204:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     208:	11 23       	and	r17, r17
     20a:	a1 f0       	breq	.+40     	; 0x234 <_Z14actionResponse6String+0x9e>
	{
		if(stateVar == WORKING) //can't change configuration while working
     20c:	80 91 06 03 	lds	r24, 0x0306
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	39 f4       	brne	.+14     	; 0x222 <_Z14actionResponse6String+0x8c>
		{
			Serial.println("WORKING");
     214:	87 ec       	ldi	r24, 0xC7	; 199
     216:	93 e0       	ldi	r25, 0x03	; 3
     218:	6f e0       	ldi	r22, 0x0F	; 15
     21a:	71 e0       	ldi	r23, 0x01	; 1
     21c:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			return 0;
     220:	db c0       	rjmp	.+438    	; 0x3d8 <_Z14actionResponse6String+0x242>
		}
		else
		{
			Serial.println("C0");
     222:	87 ec       	ldi	r24, 0xC7	; 199
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	6c e0       	ldi	r22, 0x0C	; 12
     228:	71 e0       	ldi	r23, 0x01	; 1
     22a:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			configVar = FLASHLIGHT;
     22e:	10 92 05 03 	sts	0x0305, r1
			return 0;
     232:	d2 c0       	rjmp	.+420    	; 0x3d8 <_Z14actionResponse6String+0x242>
		}

	}
	
	if(inString.equalsIgnoreCase("C1")) //configuration
     234:	ce 01       	movw	r24, r28
     236:	4d 96       	adiw	r24, 0x1d	; 29
     238:	67 e1       	ldi	r22, 0x17	; 23
     23a:	71 e0       	ldi	r23, 0x01	; 1
     23c:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     240:	c7 01       	movw	r24, r14
     242:	be 01       	movw	r22, r28
     244:	63 5e       	subi	r22, 0xE3	; 227
     246:	7f 4f       	sbci	r23, 0xFF	; 255
     248:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     24c:	18 2f       	mov	r17, r24
     24e:	ce 01       	movw	r24, r28
     250:	4d 96       	adiw	r24, 0x1d	; 29
     252:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     256:	11 23       	and	r17, r17
     258:	a9 f0       	breq	.+42     	; 0x284 <_Z14actionResponse6String+0xee>
	{
		if(stateVar == WORKING) //can't change configuration while working
     25a:	80 91 06 03 	lds	r24, 0x0306
     25e:	81 30       	cpi	r24, 0x01	; 1
     260:	39 f4       	brne	.+14     	; 0x270 <_Z14actionResponse6String+0xda>
		{
			Serial.println("WORKING");
     262:	87 ec       	ldi	r24, 0xC7	; 199
     264:	93 e0       	ldi	r25, 0x03	; 3
     266:	6f e0       	ldi	r22, 0x0F	; 15
     268:	71 e0       	ldi	r23, 0x01	; 1
     26a:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			return 0;
     26e:	b4 c0       	rjmp	.+360    	; 0x3d8 <_Z14actionResponse6String+0x242>
		}
		else
		{
			Serial.println("C1");
     270:	87 ec       	ldi	r24, 0xC7	; 199
     272:	93 e0       	ldi	r25, 0x03	; 3
     274:	67 e1       	ldi	r22, 0x17	; 23
     276:	71 e0       	ldi	r23, 0x01	; 1
     278:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			configVar = BRIGHTNESS;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	80 93 05 03 	sts	0x0305, r24
			return 0;
     282:	aa c0       	rjmp	.+340    	; 0x3d8 <_Z14actionResponse6String+0x242>
		}			
	}
	
	if(inString.equalsIgnoreCase("GO")) //init test command
     284:	ce 01       	movw	r24, r28
     286:	46 96       	adiw	r24, 0x16	; 22
     288:	6a e1       	ldi	r22, 0x1A	; 26
     28a:	71 e0       	ldi	r23, 0x01	; 1
     28c:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     290:	c7 01       	movw	r24, r14
     292:	be 01       	movw	r22, r28
     294:	6a 5e       	subi	r22, 0xEA	; 234
     296:	7f 4f       	sbci	r23, 0xFF	; 255
     298:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     29c:	18 2f       	mov	r17, r24
     29e:	ce 01       	movw	r24, r28
     2a0:	46 96       	adiw	r24, 0x16	; 22
     2a2:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     2a6:	11 23       	and	r17, r17
     2a8:	a9 f0       	breq	.+42     	; 0x2d4 <_Z14actionResponse6String+0x13e>
	{
		if(stateVar == WORKING)
     2aa:	80 91 06 03 	lds	r24, 0x0306
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	39 f4       	brne	.+14     	; 0x2c0 <_Z14actionResponse6String+0x12a>
		{
			Serial.println("WORKING");
     2b2:	87 ec       	ldi	r24, 0xC7	; 199
     2b4:	93 e0       	ldi	r25, 0x03	; 3
     2b6:	6f e0       	ldi	r22, 0x0F	; 15
     2b8:	71 e0       	ldi	r23, 0x01	; 1
     2ba:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			return 0;
     2be:	8c c0       	rjmp	.+280    	; 0x3d8 <_Z14actionResponse6String+0x242>
		}
		Serial.println("GO");
     2c0:	87 ec       	ldi	r24, 0xC7	; 199
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	6a e1       	ldi	r22, 0x1A	; 26
     2c6:	71 e0       	ldi	r23, 0x01	; 1
     2c8:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
		stateVar = WORKING; //set next state to working
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	80 93 06 03 	sts	0x0306, r24
		//digitalWrite(GREEN_PIN, HIGH);
		return 0;
     2d2:	82 c0       	rjmp	.+260    	; 0x3d8 <_Z14actionResponse6String+0x242>
	} 
	
	if(inString.equalsIgnoreCase("ESTOP"))
     2d4:	ce 01       	movw	r24, r28
     2d6:	0f 96       	adiw	r24, 0x0f	; 15
     2d8:	6d e1       	ldi	r22, 0x1D	; 29
     2da:	71 e0       	ldi	r23, 0x01	; 1
     2dc:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     2e0:	c7 01       	movw	r24, r14
     2e2:	be 01       	movw	r22, r28
     2e4:	61 5f       	subi	r22, 0xF1	; 241
     2e6:	7f 4f       	sbci	r23, 0xFF	; 255
     2e8:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     2ec:	18 2f       	mov	r17, r24
     2ee:	ce 01       	movw	r24, r28
     2f0:	0f 96       	adiw	r24, 0x0f	; 15
     2f2:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     2f6:	11 23       	and	r17, r17
     2f8:	51 f0       	breq	.+20     	; 0x30e <_Z14actionResponse6String+0x178>
	{
		Serial.println("ESTOP");
     2fa:	87 ec       	ldi	r24, 0xC7	; 199
     2fc:	93 e0       	ldi	r25, 0x03	; 3
     2fe:	6d e1       	ldi	r22, 0x1D	; 29
     300:	71 e0       	ldi	r23, 0x01	; 1
     302:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
		stateVar = ESTOP; //set next state to estop
     306:	83 e0       	ldi	r24, 0x03	; 3
     308:	80 93 06 03 	sts	0x0306, r24
		return 0;
     30c:	65 c0       	rjmp	.+202    	; 0x3d8 <_Z14actionResponse6String+0x242>
	}
	
	if(inString.equalsIgnoreCase("RESULT"))
     30e:	ce 01       	movw	r24, r28
     310:	08 96       	adiw	r24, 0x08	; 8
     312:	63 e2       	ldi	r22, 0x23	; 35
     314:	71 e0       	ldi	r23, 0x01	; 1
     316:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     31a:	c7 01       	movw	r24, r14
     31c:	be 01       	movw	r22, r28
     31e:	68 5f       	subi	r22, 0xF8	; 248
     320:	7f 4f       	sbci	r23, 0xFF	; 255
     322:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     326:	18 2f       	mov	r17, r24
     328:	ce 01       	movw	r24, r28
     32a:	08 96       	adiw	r24, 0x08	; 8
     32c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     330:	11 23       	and	r17, r17
     332:	d1 f0       	breq	.+52     	; 0x368 <_Z14actionResponse6String+0x1d2>
	{
		if(testResult == FAIL)
     334:	80 91 ff 02 	lds	r24, 0x02FF
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	39 f4       	brne	.+14     	; 0x34a <_Z14actionResponse6String+0x1b4>
		{
			Serial.println("FAIL");
     33c:	87 ec       	ldi	r24, 0xC7	; 199
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	6a e2       	ldi	r22, 0x2A	; 42
     342:	71 e0       	ldi	r23, 0x01	; 1
     344:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
     348:	0f c0       	rjmp	.+30     	; 0x368 <_Z14actionResponse6String+0x1d2>
		}
		else if(testResult == PASS)
     34a:	82 30       	cpi	r24, 0x02	; 2
     34c:	39 f4       	brne	.+14     	; 0x35c <_Z14actionResponse6String+0x1c6>
		{
			Serial.println("PASS");
     34e:	87 ec       	ldi	r24, 0xC7	; 199
     350:	93 e0       	ldi	r25, 0x03	; 3
     352:	6f e2       	ldi	r22, 0x2F	; 47
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
     35a:	06 c0       	rjmp	.+12     	; 0x368 <_Z14actionResponse6String+0x1d2>
		}
		else
		{
			Serial.println("UNKNOWN");
     35c:	87 ec       	ldi	r24, 0xC7	; 199
     35e:	93 e0       	ldi	r25, 0x03	; 3
     360:	64 e3       	ldi	r22, 0x34	; 52
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
		}
	}
	
	if(inString.equalsIgnoreCase("STATE")) //status query
     368:	ce 01       	movw	r24, r28
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	6c e3       	ldi	r22, 0x3C	; 60
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
     374:	c7 01       	movw	r24, r14
     376:	be 01       	movw	r22, r28
     378:	6f 5f       	subi	r22, 0xFF	; 255
     37a:	7f 4f       	sbci	r23, 0xFF	; 255
     37c:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZNK6String16equalsIgnoreCaseERKS_>
     380:	18 2f       	mov	r17, r24
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
     38a:	11 23       	and	r17, r17
     38c:	21 f1       	breq	.+72     	; 0x3d6 <_Z14actionResponse6String+0x240>
	{
		Serial.println("State, Config, subState:");
     38e:	0f 2e       	mov	r0, r31
     390:	f7 ec       	ldi	r31, 0xC7	; 199
     392:	ef 2e       	mov	r14, r31
     394:	f3 e0       	ldi	r31, 0x03	; 3
     396:	ff 2e       	mov	r15, r31
     398:	f0 2d       	mov	r31, r0
     39a:	c7 01       	movw	r24, r14
     39c:	62 e4       	ldi	r22, 0x42	; 66
     39e:	71 e0       	ldi	r23, 0x01	; 1
     3a0:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
		Serial.println(stateVar);
     3a4:	60 91 06 03 	lds	r22, 0x0306
     3a8:	c7 01       	movw	r24, r14
     3aa:	70 e0       	ldi	r23, 0x00	; 0
     3ac:	4a e0       	ldi	r20, 0x0A	; 10
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEii>
		Serial.println(configVar);
     3b4:	60 91 05 03 	lds	r22, 0x0305
     3b8:	c7 01       	movw	r24, r14
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	4a e0       	ldi	r20, 0x0A	; 10
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEii>
		Serial.println(subStateVar);
     3c4:	60 91 b0 02 	lds	r22, 0x02B0
     3c8:	c7 01       	movw	r24, r14
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	4a e0       	ldi	r20, 0x0A	; 10
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <_ZN5Print7printlnEii>
		return 0;
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <_Z14actionResponse6String+0x242>
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <_Z14actionResponse6String+0x246>
	}	
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	e1 96       	adiw	r28, 0x31	; 49
     3de:	0f b6       	in	r0, 0x3f	; 63
     3e0:	f8 94       	cli
     3e2:	de bf       	out	0x3e, r29	; 62
     3e4:	0f be       	out	0x3f, r0	; 63
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	ff 90       	pop	r15
     3f0:	ef 90       	pop	r14
     3f2:	08 95       	ret

000003f4 <loop>:
bool subWaitSentinel = true; //sentinel to see if waiting is occuring...
enum LoopType {MEASURE, SAMPLE, ANALYZE};
LoopType CurrentLoop = MEASURE; //enter measurement loop first

void loop() //get to state machine.
{
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	2e 97       	sbiw	r28, 0x0e	; 14
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
	//serial check
	String inString;
     40c:	ce 01       	movw	r24, r28
     40e:	08 96       	adiw	r24, 0x08	; 8
     410:	6b e5       	ldi	r22, 0x5B	; 91
     412:	71 e0       	ldi	r23, 0x01	; 1
     414:	0e 94 18 11 	call	0x2230	; 0x2230 <_ZN6StringC1EPKc>
	char inChar;
	while(Serial.available())
     418:	07 ec       	ldi	r16, 0xC7	; 199
     41a:	13 e0       	ldi	r17, 0x03	; 3
     41c:	0e c0       	rjmp	.+28     	; 0x43a <loop+0x46>
	{
		delay(2);
     41e:	62 e0       	ldi	r22, 0x02	; 2
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 99 0a 	call	0x1532	; 0x1532 <delay>
		inChar = Serial.read();
     42a:	c8 01       	movw	r24, r16
     42c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_ZN14HardwareSerial4readEv>
     430:	68 2f       	mov	r22, r24
		inString.concat(inChar);
     432:	ce 01       	movw	r24, r28
     434:	08 96       	adiw	r24, 0x08	; 8
     436:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <_ZN6String6concatEc>
void loop() //get to state machine.
{
	//serial check
	String inString;
	char inChar;
	while(Serial.available())
     43a:	c8 01       	movw	r24, r16
     43c:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <_ZN14HardwareSerial9availableEv>
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	69 f7       	brne	.-38     	; 0x41e <loop+0x2a>
	{
		delay(2);
		inChar = Serial.read();
		inString.concat(inChar);
	}
	actionResponse(inString);
     444:	ce 01       	movw	r24, r28
     446:	01 96       	adiw	r24, 0x01	; 1
     448:	be 01       	movw	r22, r28
     44a:	68 5f       	subi	r22, 0xF8	; 248
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	0e 94 49 11 	call	0x2292	; 0x2292 <_ZN6StringC1ERKS_>
     452:	ce 01       	movw	r24, r28
     454:	01 96       	adiw	r24, 0x01	; 1
     456:	0e 94 cb 00 	call	0x196	; 0x196 <_Z14actionResponse6String>
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
	
	//button check
	if(!digitalRead(START_PIN))
     462:	88 e0       	ldi	r24, 0x08	; 8
     464:	0e 94 42 0c 	call	0x1884	; 0x1884 <digitalRead>
     468:	00 97       	sbiw	r24, 0x00	; 0
     46a:	71 f4       	brne	.+28     	; 0x488 <loop+0x94>
	{
		if(stateVar == IDLE)
     46c:	80 91 06 03 	lds	r24, 0x0306
     470:	88 23       	and	r24, r24
     472:	51 f4       	brne	.+20     	; 0x488 <loop+0x94>
		{
			Serial.println("GO");
     474:	87 ec       	ldi	r24, 0xC7	; 199
     476:	93 e0       	ldi	r25, 0x03	; 3
     478:	6a e1       	ldi	r22, 0x1A	; 26
     47a:	71 e0       	ldi	r23, 0x01	; 1
     47c:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
			stateVar = WORKING; //set next state to working
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 06 03 	sts	0x0306, r24
     486:	2c c0       	rjmp	.+88     	; 0x4e0 <loop+0xec>
		}
	}
	
	switch(stateVar)
     488:	80 91 06 03 	lds	r24, 0x0306
     48c:	88 23       	and	r24, r24
     48e:	21 f0       	breq	.+8      	; 0x498 <loop+0xa4>
     490:	81 30       	cpi	r24, 0x01	; 1
     492:	09 f0       	breq	.+2      	; 0x496 <loop+0xa2>
     494:	9c c2       	rjmp	.+1336   	; 0x9ce <__stack+0xcf>
     496:	24 c0       	rjmp	.+72     	; 0x4e0 <loop+0xec>
	{
		case IDLE:
		{
			if(testResult == UNKNOWN) //test results not available
     498:	80 91 ff 02 	lds	r24, 0x02FF
     49c:	88 23       	and	r24, r24
     49e:	49 f4       	brne	.+18     	; 0x4b2 <loop+0xbe>
			{
				digitalWrite(RED_PIN, LOW);
     4a0:	89 e0       	ldi	r24, 0x09	; 9
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
				digitalWrite(GREEN_PIN, LOW); //both status lights off
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	60 e0       	ldi	r22, 0x00	; 0
     4ac:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
     4b0:	8e c2       	rjmp	.+1308   	; 0x9ce <__stack+0xcf>
			}
			else if (testResult == FAIL)
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	49 f4       	brne	.+18     	; 0x4c8 <loop+0xd4>
			{
				digitalWrite(RED_PIN, HIGH);
     4b6:	89 e0       	ldi	r24, 0x09	; 9
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
				digitalWrite(GREEN_PIN, LOW);				
     4be:	8a e0       	ldi	r24, 0x0A	; 10
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
     4c6:	83 c2       	rjmp	.+1286   	; 0x9ce <__stack+0xcf>
			}
			else if (testResult == PASS)
     4c8:	82 30       	cpi	r24, 0x02	; 2
     4ca:	09 f0       	breq	.+2      	; 0x4ce <loop+0xda>
     4cc:	80 c2       	rjmp	.+1280   	; 0x9ce <__stack+0xcf>
			{
				digitalWrite(RED_PIN, LOW);
     4ce:	89 e0       	ldi	r24, 0x09	; 9
     4d0:	60 e0       	ldi	r22, 0x00	; 0
     4d2:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
				digitalWrite(GREEN_PIN, HIGH);
     4d6:	8a e0       	ldi	r24, 0x0A	; 10
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
     4de:	77 c2       	rjmp	.+1262   	; 0x9ce <__stack+0xcf>
			}
		} break;
		case WORKING:
		{
			digitalWrite(RED_PIN, LOW);
     4e0:	89 e0       	ldi	r24, 0x09	; 9
     4e2:	60 e0       	ldi	r22, 0x00	; 0
     4e4:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
			digitalWrite(GREEN_PIN, LOW);
     4e8:	8a e0       	ldi	r24, 0x0A	; 10
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
			//if there were a yellow pin, it could go high here...
			
			testResult = UNKNOWN; //set test result to unknown since starting new test...
     4f0:	10 92 ff 02 	sts	0x02FF, r1
			
			switch(configVar) //selects which test will be run based on configVar which is set by serial.
     4f4:	80 91 05 03 	lds	r24, 0x0305
     4f8:	88 23       	and	r24, r24
     4fa:	21 f0       	breq	.+8      	; 0x504 <loop+0x110>
     4fc:	81 30       	cpi	r24, 0x01	; 1
     4fe:	09 f0       	breq	.+2      	; 0x502 <loop+0x10e>
     500:	66 c2       	rjmp	.+1228   	; 0x9ce <__stack+0xcf>
     502:	36 c1       	rjmp	.+620    	; 0x770 <loop+0x37c>
			{
				case FLASHLIGHT:
				{
					switch(subStateVar)
     504:	80 91 b0 02 	lds	r24, 0x02B0
     508:	88 23       	and	r24, r24
     50a:	21 f0       	breq	.+8      	; 0x514 <loop+0x120>
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	09 f0       	breq	.+2      	; 0x512 <loop+0x11e>
     510:	5e c2       	rjmp	.+1212   	; 0x9ce <__stack+0xcf>
     512:	36 c0       	rjmp	.+108    	; 0x580 <loop+0x18c>
					{
						case WAIT:
						{
							if(subWaitSentinel) //checks if waiting has just started or is continuing
     514:	80 91 af 02 	lds	r24, 0x02AF
     518:	88 23       	and	r24, r24
     51a:	71 f0       	breq	.+28     	; 0x538 <loop+0x144>
							{
								subWaitStart = millis(); //set holding variable to current time
     51c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	80 93 d7 02 	sts	0x02D7, r24
     528:	90 93 d8 02 	sts	0x02D8, r25
     52c:	a0 93 d9 02 	sts	0x02D9, r26
     530:	b0 93 da 02 	sts	0x02DA, r27
								subWaitSentinel = false; //set sentinel to false so next loop will not reset holding var
     534:	10 92 af 02 	sts	0x02AF, r1
							//Serial.print("=");
							//Serial.print(millis()-subWaitStart);
							//Serial.print(" against ");
							//Serial.println(subWaitTime);
							
							if((millis() - subWaitStart) >= subWaitTime) //if wait time has passed
     538:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     53c:	ab 01       	movw	r20, r22
     53e:	bc 01       	movw	r22, r24
     540:	80 91 d7 02 	lds	r24, 0x02D7
     544:	90 91 d8 02 	lds	r25, 0x02D8
     548:	a0 91 d9 02 	lds	r26, 0x02D9
     54c:	b0 91 da 02 	lds	r27, 0x02DA
     550:	48 1b       	sub	r20, r24
     552:	59 0b       	sbc	r21, r25
     554:	6a 0b       	sbc	r22, r26
     556:	7b 0b       	sbc	r23, r27
     558:	80 91 d3 02 	lds	r24, 0x02D3
     55c:	90 91 d4 02 	lds	r25, 0x02D4
     560:	a0 91 d5 02 	lds	r26, 0x02D5
     564:	b0 91 d6 02 	lds	r27, 0x02D6
     568:	48 17       	cp	r20, r24
     56a:	59 07       	cpc	r21, r25
     56c:	6a 07       	cpc	r22, r26
     56e:	7b 07       	cpc	r23, r27
     570:	08 f4       	brcc	.+2      	; 0x574 <loop+0x180>
     572:	2d c2       	rjmp	.+1114   	; 0x9ce <__stack+0xcf>
							{
								//Serial.println("ACT");
								subStateVar = ACT; //switch back to ACT loop
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	80 93 b0 02 	sts	0x02B0, r24
								subWaitSentinel = true; //set sentinel to true so next invocation of wait loop will update holding variable
     57a:	80 93 af 02 	sts	0x02AF, r24
     57e:	27 c2       	rjmp	.+1102   	; 0x9ce <__stack+0xcf>
							}
						} break;
						case ACT:
						{
							switch(CurrentLoop)
     580:	80 91 d2 02 	lds	r24, 0x02D2
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	31 f1       	breq	.+76     	; 0x5d4 <loop+0x1e0>
     588:	81 30       	cpi	r24, 0x01	; 1
     58a:	20 f0       	brcs	.+8      	; 0x594 <loop+0x1a0>
     58c:	82 30       	cpi	r24, 0x02	; 2
     58e:	09 f0       	breq	.+2      	; 0x592 <loop+0x19e>
     590:	1e c2       	rjmp	.+1084   	; 0x9ce <__stack+0xcf>
     592:	99 c0       	rjmp	.+306    	; 0x6c6 <loop+0x2d2>
							{
								case MEASURE:
								{
									//Serial.print("Setting ");
									//Serial.println(ft_Values[ft_measurement_counter]);
									cubelets.setBroadcastBlockValueByFace(FACE, ft_Values[ft_measurement_counter]);
     594:	e0 91 f7 02 	lds	r30, 0x02F7
     598:	f0 91 f8 02 	lds	r31, 0x02F8
     59c:	ee 0f       	add	r30, r30
     59e:	ff 1f       	adc	r31, r31
     5a0:	e9 54       	subi	r30, 0x49	; 73
     5a2:	fd 4f       	sbci	r31, 0xFD	; 253
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	93 e0       	ldi	r25, 0x03	; 3
     5a8:	61 e0       	ldi	r22, 0x01	; 1
     5aa:	40 81       	ld	r20, Z
     5ac:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
									//digitalWrite(RED_PIN, HIGH); derp
									CurrentLoop = SAMPLE;
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 d2 02 	sts	0x02D2, r24
									subWaitTime = 500; //set wait time to 500ms. waiting for block to respond.
     5b6:	84 ef       	ldi	r24, 0xF4	; 244
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	a0 e0       	ldi	r26, 0x00	; 0
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	80 93 d3 02 	sts	0x02D3, r24
     5c2:	90 93 d4 02 	sts	0x02D4, r25
     5c6:	a0 93 d5 02 	sts	0x02D5, r26
     5ca:	b0 93 d6 02 	sts	0x02D6, r27
									//Serial.println("MEASURE_WAIT");
									subStateVar = WAIT; //set next state to wait
     5ce:	10 92 b0 02 	sts	0x02B0, r1
								} break;
     5d2:	fd c1       	rjmp	.+1018   	; 0x9ce <__stack+0xcf>
								case SAMPLE:
								{
									ft_samples[ft_sample_counter] = analogRead(READ_PIN)/4; //div 4 for 10-bit to 8-bit
     5d4:	00 91 ef 02 	lds	r16, 0x02EF
     5d8:	10 91 f0 02 	lds	r17, 0x02F0
     5dc:	8e e0       	ldi	r24, 0x0E	; 14
     5de:	0e 94 2d 0b 	call	0x165a	; 0x165a <analogRead>
     5e2:	f8 01       	movw	r30, r16
     5e4:	ee 0f       	add	r30, r30
     5e6:	ff 1f       	adc	r31, r31
     5e8:	ef 50       	subi	r30, 0x0F	; 15
     5ea:	fd 4f       	sbci	r31, 0xFD	; 253
     5ec:	28 2f       	mov	r18, r24
     5ee:	39 2f       	mov	r19, r25
     5f0:	33 23       	and	r19, r19
     5f2:	14 f4       	brge	.+4      	; 0x5f8 <loop+0x204>
     5f4:	2d 5f       	subi	r18, 0xFD	; 253
     5f6:	3f 4f       	sbci	r19, 0xFF	; 255
     5f8:	35 95       	asr	r19
     5fa:	27 95       	ror	r18
     5fc:	35 95       	asr	r19
     5fe:	27 95       	ror	r18
     600:	31 83       	std	Z+1, r19	; 0x01
     602:	20 83       	st	Z, r18
									sum += ft_samples[ft_sample_counter]; //summing samples
     604:	20 91 ef 02 	lds	r18, 0x02EF
     608:	30 91 f0 02 	lds	r19, 0x02F0
     60c:	f9 01       	movw	r30, r18
     60e:	ee 0f       	add	r30, r30
     610:	ff 1f       	adc	r31, r31
     612:	ef 50       	subi	r30, 0x0F	; 15
     614:	fd 4f       	sbci	r31, 0xFD	; 253
     616:	80 81       	ld	r24, Z
     618:	91 81       	ldd	r25, Z+1	; 0x01
     61a:	40 91 db 02 	lds	r20, 0x02DB
     61e:	50 91 dc 02 	lds	r21, 0x02DC
     622:	84 0f       	add	r24, r20
     624:	95 1f       	adc	r25, r21
     626:	90 93 dc 02 	sts	0x02DC, r25
     62a:	80 93 db 02 	sts	0x02DB, r24
									//CurrentLoop = MEASURE;
									ft_sample_counter++;
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	3f 4f       	sbci	r19, 0xFF	; 255
     632:	30 93 f0 02 	sts	0x02F0, r19
     636:	20 93 ef 02 	sts	0x02EF, r18
									subWaitTime = 100;
     63a:	44 e6       	ldi	r20, 0x64	; 100
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	40 93 d3 02 	sts	0x02D3, r20
     646:	50 93 d4 02 	sts	0x02D4, r21
     64a:	60 93 d5 02 	sts	0x02D5, r22
     64e:	70 93 d6 02 	sts	0x02D6, r23
									//Serial.println("SAMPLE_WAIT");
									subStateVar = WAIT;
     652:	10 92 b0 02 	sts	0x02B0, r1
									if(ft_sample_counter >= FT_SAMPLES) //when all samples are taken
     656:	23 30       	cpi	r18, 0x03	; 3
     658:	31 05       	cpc	r19, r1
     65a:	08 f4       	brcc	.+2      	; 0x65e <loop+0x26a>
     65c:	b8 c1       	rjmp	.+880    	; 0x9ce <__stack+0xcf>
									{
										CurrentLoop = MEASURE; //switch back to measure loop
     65e:	10 92 d2 02 	sts	0x02D2, r1
										ft_sample_counter = 0; //reset sample counter
     662:	10 92 f0 02 	sts	0x02F0, r1
     666:	10 92 ef 02 	sts	0x02EF, r1
										ft_measurements[ft_measurement_counter] = sum / FT_SAMPLES; //set measurement to avg of samples
     66a:	20 91 f7 02 	lds	r18, 0x02F7
     66e:	30 91 f8 02 	lds	r19, 0x02F8
     672:	f9 01       	movw	r30, r18
     674:	ee 0f       	add	r30, r30
     676:	ff 1f       	adc	r31, r31
     678:	e7 50       	subi	r30, 0x07	; 7
     67a:	fd 4f       	sbci	r31, 0xFD	; 253
     67c:	63 e0       	ldi	r22, 0x03	; 3
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodhi4>
     684:	71 83       	std	Z+1, r23	; 0x01
     686:	60 83       	st	Z, r22
										//Serial.print("Measurement ");
										//Serial.println(ft_measurements[ft_measurement_counter]);
										sum = 0; //zero out sum for next set of samples
     688:	10 92 dc 02 	sts	0x02DC, r1
     68c:	10 92 db 02 	sts	0x02DB, r1
										
										if(ft_measurement_counter >= FT_MEASUREMENTS) //when all measurements and samples are taken
     690:	23 30       	cpi	r18, 0x03	; 3
     692:	31 05       	cpc	r19, r1
     694:	88 f0       	brcs	.+34     	; 0x6b8 <loop+0x2c4>
										{
											CurrentLoop = ANALYZE; //switch to analyze loop
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	80 93 d2 02 	sts	0x02D2, r24
											subStateVar = ACT; //switch to ACT so analysis happens
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	80 93 b0 02 	sts	0x02B0, r24
											ft_measurement_counter = 0; //reset measurement counter
     6a2:	10 92 f8 02 	sts	0x02F8, r1
     6a6:	10 92 f7 02 	sts	0x02F7, r1
											cubelets.setBroadcastBlockValueByFace(FACE, 0); //set target to 0 before going to analyze
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	93 e0       	ldi	r25, 0x03	; 3
     6ae:	61 e0       	ldi	r22, 0x01	; 1
     6b0:	40 e0       	ldi	r20, 0x00	; 0
     6b2:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     6b6:	8b c1       	rjmp	.+790    	; 0x9ce <__stack+0xcf>
										}
										
										else
										{
											ft_measurement_counter++; //increment measurement counter after doing e'r'thing else and only if not all samples have been taken.
     6b8:	2f 5f       	subi	r18, 0xFF	; 255
     6ba:	3f 4f       	sbci	r19, 0xFF	; 255
     6bc:	30 93 f8 02 	sts	0x02F8, r19
     6c0:	20 93 f7 02 	sts	0x02F7, r18
     6c4:	84 c1       	rjmp	.+776    	; 0x9ce <__stack+0xcf>
									}
								} break;
								case ANALYZE:
								{
									//Serial.println("ANALYZE");
									delta = abs(ft_measurements[1] - ft_measurements[0]);
     6c6:	20 91 fb 02 	lds	r18, 0x02FB
     6ca:	30 91 fc 02 	lds	r19, 0x02FC
     6ce:	80 91 f9 02 	lds	r24, 0x02F9
     6d2:	90 91 fa 02 	lds	r25, 0x02FA
     6d6:	28 17       	cp	r18, r24
     6d8:	39 07       	cpc	r19, r25
     6da:	59 f0       	breq	.+22     	; 0x6f2 <loop+0x2fe>
     6dc:	a9 01       	movw	r20, r18
     6de:	48 1b       	sub	r20, r24
     6e0:	59 0b       	sbc	r21, r25
     6e2:	50 93 de 02 	sts	0x02DE, r21
     6e6:	40 93 dd 02 	sts	0x02DD, r20
									if(delta < FT_MIN_DELTA)
     6ea:	4c 33       	cpi	r20, 0x3C	; 60
     6ec:	51 05       	cpc	r21, r1
     6ee:	78 f4       	brcc	.+30     	; 0x70e <loop+0x31a>
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <loop+0x306>
									}
								} break;
								case ANALYZE:
								{
									//Serial.println("ANALYZE");
									delta = abs(ft_measurements[1] - ft_measurements[0]);
     6f2:	10 92 de 02 	sts	0x02DE, r1
     6f6:	10 92 dd 02 	sts	0x02DD, r1
									if(delta < FT_MIN_DELTA)
									{
										//TODO: set up fail stuff (delta too small)
										testResult = FAIL;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	80 93 ff 02 	sts	0x02FF, r24
										Serial.println("FAIL");
     700:	87 ec       	ldi	r24, 0xC7	; 199
     702:	93 e0       	ldi	r25, 0x03	; 3
     704:	6a e2       	ldi	r22, 0x2A	; 42
     706:	71 e0       	ldi	r23, 0x01	; 1
     708:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
     70c:	21 c0       	rjmp	.+66     	; 0x750 <loop+0x35c>
										stateVar = IDLE;
									}
									else if((ft_measurements[1] - ft_measurements[2] > 20) && (ft_measurements[2] - ft_measurements[0] > 20))
     70e:	40 91 fd 02 	lds	r20, 0x02FD
     712:	50 91 fe 02 	lds	r21, 0x02FE
     716:	24 1b       	sub	r18, r20
     718:	35 0b       	sbc	r19, r21
     71a:	25 31       	cpi	r18, 0x15	; 21
     71c:	31 05       	cpc	r19, r1
     71e:	78 f0       	brcs	.+30     	; 0x73e <loop+0x34a>
     720:	48 1b       	sub	r20, r24
     722:	59 0b       	sbc	r21, r25
     724:	45 31       	cpi	r20, 0x15	; 21
     726:	51 05       	cpc	r21, r1
     728:	50 f0       	brcs	.+20     	; 0x73e <loop+0x34a>
									{
										//TODO: set up pass stuff
										testResult = PASS;
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	80 93 ff 02 	sts	0x02FF, r24
										Serial.println("PASS");
     730:	87 ec       	ldi	r24, 0xC7	; 199
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	6f e2       	ldi	r22, 0x2F	; 47
     736:	71 e0       	ldi	r23, 0x01	; 1
     738:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
										stateVar = IDLE;
     73c:	09 c0       	rjmp	.+18     	; 0x750 <loop+0x35c>
									}
									else
									{
										testResult = FAIL;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 ff 02 	sts	0x02FF, r24
										Serial.println("FAIL");
     744:	87 ec       	ldi	r24, 0xC7	; 199
     746:	93 e0       	ldi	r25, 0x03	; 3
     748:	6a e2       	ldi	r22, 0x2A	; 42
     74a:	71 e0       	ldi	r23, 0x01	; 1
     74c:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
// 									Serial.println(ft_measurements[1]);
// 									Serial.print("Measurement 2: ");
// 									Serial.println(ft_measurements[2]);
// 									Serial.println("Measurements done. Switching to idle...");
									//reset WORKING control variables...
									CurrentLoop = MEASURE;
     750:	10 92 d2 02 	sts	0x02D2, r1
									subWaitTime = 0;
     754:	10 92 d3 02 	sts	0x02D3, r1
     758:	10 92 d4 02 	sts	0x02D4, r1
     75c:	10 92 d5 02 	sts	0x02D5, r1
     760:	10 92 d6 02 	sts	0x02D6, r1
									subStateVar = ACT;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	80 93 b0 02 	sts	0x02B0, r24
									stateVar = IDLE; //set state to IDLE, since tasks are finished. now waiting for GO.
     76a:	10 92 06 03 	sts	0x0306, r1
									//TODO: fill in data analysis tasks
								} break;
     76e:	2f c1       	rjmp	.+606    	; 0x9ce <__stack+0xcf>
					}
					
				} break;
				case BRIGHTNESS:
				{
					switch(subStateVar)
     770:	80 91 b0 02 	lds	r24, 0x02B0
     774:	88 23       	and	r24, r24
     776:	21 f0       	breq	.+8      	; 0x780 <loop+0x38c>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	09 f0       	breq	.+2      	; 0x77e <loop+0x38a>
     77c:	28 c1       	rjmp	.+592    	; 0x9ce <__stack+0xcf>
     77e:	36 c0       	rjmp	.+108    	; 0x7ec <loop+0x3f8>
					{
						case WAIT:
						{
							if(subWaitSentinel) //checks if waiting has just started or is continuing
     780:	80 91 af 02 	lds	r24, 0x02AF
     784:	88 23       	and	r24, r24
     786:	71 f0       	breq	.+28     	; 0x7a4 <loop+0x3b0>
							{
								subWaitStart = millis(); //set holding variable to current time
     788:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     78c:	dc 01       	movw	r26, r24
     78e:	cb 01       	movw	r24, r22
     790:	80 93 d7 02 	sts	0x02D7, r24
     794:	90 93 d8 02 	sts	0x02D8, r25
     798:	a0 93 d9 02 	sts	0x02D9, r26
     79c:	b0 93 da 02 	sts	0x02DA, r27
								subWaitSentinel = false; //set sentinel to false so next loop will not reset holding var
     7a0:	10 92 af 02 	sts	0x02AF, r1
							//Serial.print("=");
							//Serial.print(millis()-subWaitStart);
							//Serial.print(" against ");
							//Serial.println(subWaitTime);
							
							if((millis() - subWaitStart) >= subWaitTime) //if wait time has passed
     7a4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     7a8:	ab 01       	movw	r20, r22
     7aa:	bc 01       	movw	r22, r24
     7ac:	80 91 d7 02 	lds	r24, 0x02D7
     7b0:	90 91 d8 02 	lds	r25, 0x02D8
     7b4:	a0 91 d9 02 	lds	r26, 0x02D9
     7b8:	b0 91 da 02 	lds	r27, 0x02DA
     7bc:	48 1b       	sub	r20, r24
     7be:	59 0b       	sbc	r21, r25
     7c0:	6a 0b       	sbc	r22, r26
     7c2:	7b 0b       	sbc	r23, r27
     7c4:	80 91 d3 02 	lds	r24, 0x02D3
     7c8:	90 91 d4 02 	lds	r25, 0x02D4
     7cc:	a0 91 d5 02 	lds	r26, 0x02D5
     7d0:	b0 91 d6 02 	lds	r27, 0x02D6
     7d4:	48 17       	cp	r20, r24
     7d6:	59 07       	cpc	r21, r25
     7d8:	6a 07       	cpc	r22, r26
     7da:	7b 07       	cpc	r23, r27
     7dc:	08 f4       	brcc	.+2      	; 0x7e0 <loop+0x3ec>
     7de:	f7 c0       	rjmp	.+494    	; 0x9ce <__stack+0xcf>
							{
								//Serial.println("ACT");
								subStateVar = ACT; //switch back to ACT loop
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	80 93 b0 02 	sts	0x02B0, r24
								subWaitSentinel = true; //set sentinel to true so next invocation of wait loop will update holding variable
     7e6:	80 93 af 02 	sts	0x02AF, r24
     7ea:	f1 c0       	rjmp	.+482    	; 0x9ce <__stack+0xcf>
							}
						} break;
						case ACT:
						{
							switch(CurrentLoop)
     7ec:	80 91 d2 02 	lds	r24, 0x02D2
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	29 f1       	breq	.+74     	; 0x83e <loop+0x44a>
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	20 f0       	brcs	.+8      	; 0x800 <loop+0x40c>
     7f8:	82 30       	cpi	r24, 0x02	; 2
     7fa:	09 f0       	breq	.+2      	; 0x7fe <loop+0x40a>
     7fc:	e8 c0       	rjmp	.+464    	; 0x9ce <__stack+0xcf>
     7fe:	93 c0       	rjmp	.+294    	; 0x926 <__stack+0x27>
							{
								case MEASURE:
								{
									//Serial.print("Setting ");
									//Serial.println(bt_Values[bt_measurement_counter]);
									analogWrite(LED_PIN, bt_Values[bt_measurement_counter]);
     800:	e0 91 e7 02 	lds	r30, 0x02E7
     804:	f0 91 e8 02 	lds	r31, 0x02E8
     808:	ee 0f       	add	r30, r30
     80a:	ff 1f       	adc	r31, r31
     80c:	ef 54       	subi	r30, 0x4F	; 79
     80e:	fd 4f       	sbci	r31, 0xFD	; 253
     810:	60 81       	ld	r22, Z
     812:	71 81       	ldd	r23, Z+1	; 0x01
     814:	83 e0       	ldi	r24, 0x03	; 3
     816:	0e 94 4f 0b 	call	0x169e	; 0x169e <analogWrite>
									//digitalWrite(RED_PIN, HIGH); derp
									CurrentLoop = SAMPLE;
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	80 93 d2 02 	sts	0x02D2, r24
									subWaitTime = 500; //set wait time to 500ms. waiting for block to respond.
     820:	84 ef       	ldi	r24, 0xF4	; 244
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	a0 e0       	ldi	r26, 0x00	; 0
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	80 93 d3 02 	sts	0x02D3, r24
     82c:	90 93 d4 02 	sts	0x02D4, r25
     830:	a0 93 d5 02 	sts	0x02D5, r26
     834:	b0 93 d6 02 	sts	0x02D6, r27
									//Serial.println("MEASURE_WAIT");
									subStateVar = WAIT; //set next state to wait
     838:	10 92 b0 02 	sts	0x02B0, r1
								} break;
     83c:	c8 c0       	rjmp	.+400    	; 0x9ce <__stack+0xcf>
								case SAMPLE:
								{
									bt_samples[bt_sample_counter] = cubelets.getNeighborBlockValueByFace(FACE);
     83e:	00 91 df 02 	lds	r16, 0x02DF
     842:	10 91 e0 02 	lds	r17, 0x02E0
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	61 e0       	ldi	r22, 0x01	; 1
     84c:	0e 94 29 07 	call	0xe52	; 0xe52 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>
     850:	21 ee       	ldi	r18, 0xE1	; 225
     852:	32 e0       	ldi	r19, 0x02	; 2
     854:	f8 01       	movw	r30, r16
     856:	ee 0f       	add	r30, r30
     858:	ff 1f       	adc	r31, r31
     85a:	e2 0f       	add	r30, r18
     85c:	f3 1f       	adc	r31, r19
     85e:	80 83       	st	Z, r24
     860:	11 82       	std	Z+1, r1	; 0x01
									sum += bt_samples[bt_sample_counter]; //summing samples
     862:	40 91 df 02 	lds	r20, 0x02DF
     866:	50 91 e0 02 	lds	r21, 0x02E0
     86a:	ca 01       	movw	r24, r20
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	28 0f       	add	r18, r24
     872:	39 1f       	adc	r19, r25
     874:	f9 01       	movw	r30, r18
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	20 91 db 02 	lds	r18, 0x02DB
     87e:	30 91 dc 02 	lds	r19, 0x02DC
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	90 93 dc 02 	sts	0x02DC, r25
     88a:	80 93 db 02 	sts	0x02DB, r24
									//CurrentLoop = MEASURE;
									bt_sample_counter++;
     88e:	4f 5f       	subi	r20, 0xFF	; 255
     890:	5f 4f       	sbci	r21, 0xFF	; 255
     892:	50 93 e0 02 	sts	0x02E0, r21
     896:	40 93 df 02 	sts	0x02DF, r20
									subWaitTime = 100;
     89a:	04 e6       	ldi	r16, 0x64	; 100
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	00 93 d3 02 	sts	0x02D3, r16
     8a6:	10 93 d4 02 	sts	0x02D4, r17
     8aa:	20 93 d5 02 	sts	0x02D5, r18
     8ae:	30 93 d6 02 	sts	0x02D6, r19
									//Serial.println("SAMPLE_WAIT");
									subStateVar = WAIT;
     8b2:	10 92 b0 02 	sts	0x02B0, r1
									if(bt_sample_counter >= BT_SAMPLES) //when all samples are taken
     8b6:	43 30       	cpi	r20, 0x03	; 3
     8b8:	51 05       	cpc	r21, r1
     8ba:	08 f4       	brcc	.+2      	; 0x8be <loop+0x4ca>
     8bc:	88 c0       	rjmp	.+272    	; 0x9ce <__stack+0xcf>
									{
										CurrentLoop = MEASURE; //switch back to measure loop
     8be:	10 92 d2 02 	sts	0x02D2, r1
										bt_sample_counter = 0; //reset sample counter
     8c2:	10 92 e0 02 	sts	0x02E0, r1
     8c6:	10 92 df 02 	sts	0x02DF, r1
										bt_measurements[bt_measurement_counter] = sum / BT_SAMPLES; //set measurement to avg of samples
     8ca:	20 91 e7 02 	lds	r18, 0x02E7
     8ce:	30 91 e8 02 	lds	r19, 0x02E8
     8d2:	f9 01       	movw	r30, r18
     8d4:	ee 0f       	add	r30, r30
     8d6:	ff 1f       	adc	r31, r31
     8d8:	e7 51       	subi	r30, 0x17	; 23
     8da:	fd 4f       	sbci	r31, 0xFD	; 253
     8dc:	63 e0       	ldi	r22, 0x03	; 3
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	0e 94 72 13 	call	0x26e4	; 0x26e4 <__udivmodhi4>
     8e4:	71 83       	std	Z+1, r23	; 0x01
     8e6:	60 83       	st	Z, r22
										//Serial.print("Measurement ");
										//Serial.println(bt_measurements[bt_measurement_counter]);
										sum = 0; //zero out sum for next set of samples
     8e8:	10 92 dc 02 	sts	0x02DC, r1
     8ec:	10 92 db 02 	sts	0x02DB, r1
										
										if(bt_measurement_counter >= BT_MEASUREMENTS) //when all measurements and samples are taken
     8f0:	23 30       	cpi	r18, 0x03	; 3
     8f2:	31 05       	cpc	r19, r1
     8f4:	88 f0       	brcs	.+34     	; 0x918 <__stack+0x19>
										{
											CurrentLoop = ANALYZE; //switch to analyze loop
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	80 93 d2 02 	sts	0x02D2, r24
											subStateVar = ACT; //switch to ACT so analysis happens
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	80 93 b0 02 	sts	0x02B0, r24
											bt_measurement_counter = 0; //reset measurement counter
     902:	10 92 e8 02 	sts	0x02E8, r1
     906:	10 92 e7 02 	sts	0x02E7, r1
											cubelets.setBroadcastBlockValueByFace(FACE, 0); //set target to 0 before going to analyze
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	93 e0       	ldi	r25, 0x03	; 3
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	40 e0       	ldi	r20, 0x00	; 0
     912:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     916:	5b c0       	rjmp	.+182    	; 0x9ce <__stack+0xcf>
										}
										
										else
										{
											bt_measurement_counter++; //increment measurement counter after doing e'r'thing else and only if not all samples have been taken.
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	3f 4f       	sbci	r19, 0xFF	; 255
     91c:	30 93 e8 02 	sts	0x02E8, r19
     920:	20 93 e7 02 	sts	0x02E7, r18
     924:	54 c0       	rjmp	.+168    	; 0x9ce <__stack+0xcf>
									}
								} break;
								case ANALYZE:
								{
									//Serial.println("ANALYZE");
									delta = abs(bt_measurements[1] - bt_measurements[0]);
     926:	20 91 eb 02 	lds	r18, 0x02EB
     92a:	30 91 ec 02 	lds	r19, 0x02EC
     92e:	80 91 e9 02 	lds	r24, 0x02E9
     932:	90 91 ea 02 	lds	r25, 0x02EA
     936:	28 17       	cp	r18, r24
     938:	39 07       	cpc	r19, r25
     93a:	59 f0       	breq	.+22     	; 0x952 <__stack+0x53>
     93c:	a9 01       	movw	r20, r18
     93e:	48 1b       	sub	r20, r24
     940:	59 0b       	sbc	r21, r25
     942:	50 93 de 02 	sts	0x02DE, r21
     946:	40 93 dd 02 	sts	0x02DD, r20
									if(delta < BT_MIN_DELTA)
     94a:	4b 34       	cpi	r20, 0x4B	; 75
     94c:	51 05       	cpc	r21, r1
     94e:	78 f4       	brcc	.+30     	; 0x96e <__stack+0x6f>
     950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
									}
								} break;
								case ANALYZE:
								{
									//Serial.println("ANALYZE");
									delta = abs(bt_measurements[1] - bt_measurements[0]);
     952:	10 92 de 02 	sts	0x02DE, r1
     956:	10 92 dd 02 	sts	0x02DD, r1
									if(delta < BT_MIN_DELTA)
									{
										//TODO: set up fail stuff (delta too small)
										testResult = FAIL;
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 ff 02 	sts	0x02FF, r24
										Serial.println("FAIL");
     960:	87 ec       	ldi	r24, 0xC7	; 199
     962:	93 e0       	ldi	r25, 0x03	; 3
     964:	6a e2       	ldi	r22, 0x2A	; 42
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
     96c:	21 c0       	rjmp	.+66     	; 0x9b0 <__stack+0xb1>
										stateVar = IDLE;
									}
									else if((bt_measurements[1] - bt_measurements[2] > 20) && (bt_measurements[2] - bt_measurements[0] > 20))
     96e:	40 91 ed 02 	lds	r20, 0x02ED
     972:	50 91 ee 02 	lds	r21, 0x02EE
     976:	24 1b       	sub	r18, r20
     978:	35 0b       	sbc	r19, r21
     97a:	25 31       	cpi	r18, 0x15	; 21
     97c:	31 05       	cpc	r19, r1
     97e:	78 f0       	brcs	.+30     	; 0x99e <__stack+0x9f>
     980:	48 1b       	sub	r20, r24
     982:	59 0b       	sbc	r21, r25
     984:	45 31       	cpi	r20, 0x15	; 21
     986:	51 05       	cpc	r21, r1
     988:	50 f0       	brcs	.+20     	; 0x99e <__stack+0x9f>
									{
										//TODO: set up pass stuff
										testResult = PASS;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	80 93 ff 02 	sts	0x02FF, r24
										Serial.println("PASS");
     990:	87 ec       	ldi	r24, 0xC7	; 199
     992:	93 e0       	ldi	r25, 0x03	; 3
     994:	6f e2       	ldi	r22, 0x2F	; 47
     996:	71 e0       	ldi	r23, 0x01	; 1
     998:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
										stateVar = IDLE;
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__stack+0xb1>
									}
									else
									{
										Serial.println("FAIL");
     99e:	87 ec       	ldi	r24, 0xC7	; 199
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	6a e2       	ldi	r22, 0x2A	; 42
     9a4:	71 e0       	ldi	r23, 0x01	; 1
     9a6:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
										testResult = FAIL;
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	80 93 ff 02 	sts	0x02FF, r24
// 									Serial.println(bt_measurements[1]);
// 									Serial.print("Measurement 2: ");
// 									Serial.println(bt_measurements[2]);
// 									Serial.println("Measurements done. Switching to idle...");
									//reset WORKING control variables...
									CurrentLoop = MEASURE;
     9b0:	10 92 d2 02 	sts	0x02D2, r1
									subWaitTime = 0;
     9b4:	10 92 d3 02 	sts	0x02D3, r1
     9b8:	10 92 d4 02 	sts	0x02D4, r1
     9bc:	10 92 d5 02 	sts	0x02D5, r1
     9c0:	10 92 d6 02 	sts	0x02D6, r1
									subStateVar = ACT;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 b0 02 	sts	0x02B0, r24
									stateVar = IDLE; //set state to IDLE, since tasks are finished. now waiting for GO.
     9ca:	10 92 06 03 	sts	0x0306, r1
LoopType CurrentLoop = MEASURE; //enter measurement loop first

void loop() //get to state machine.
{
	//serial check
	String inString;
     9ce:	ce 01       	movw	r24, r28
     9d0:	08 96       	adiw	r24, 0x08	; 8
     9d2:	0e 94 54 11 	call	0x22a8	; 0x22a8 <_ZN6StringD1Ev>
// 			digitalWrite(RED_PIN, HIGH);
// 			if(
		} break;
	}
	
}
     9d6:	2e 96       	adiw	r28, 0x0e	; 14
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <_GLOBAL__sub_I_ft_Values>:
enum SubState {WAIT, ACT};

enum Config {FLASHLIGHT, BRIGHTNESS, NONE};
Config configVar;

CubeletsShield cubelets(false, 13);
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	93 e0       	ldi	r25, 0x03	; 3
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	4d e0       	ldi	r20, 0x0D	; 13
     9f4:	0e 94 67 06 	call	0xcce	; 0xcce <_ZN14CubeletsShieldC1Ehh>
		Serial.println(stateVar);
		Serial.println(configVar);
		Serial.println(subStateVar);
		return 0;
	}	
     9f8:	08 95       	ret

000009fa <_ZN14CubeletsShield13initializeI2CEv>:

// #######################################################################
// I2C-RELATED FUNCTIONS
// ####################################################################### 

void CubeletsShield::initializeI2C(){
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
  I2c.begin();
     9fe:	cf e0       	ldi	r28, 0x0F	; 15
     a00:	d3 e0       	ldi	r29, 0x03	; 3
     a02:	ce 01       	movw	r24, r28
     a04:	0e 94 51 07 	call	0xea2	; 0xea2 <_ZN3I2C5beginEv>
  I2c.pullup(0);     // Disable the internal pullups
     a08:	ce 01       	movw	r24, r28
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN3I2C6pullupEh>
  I2c.setSpeed(1);   // 1=400kHz 0=
     a10:	ce 01       	movw	r24, r28
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	0e 94 67 07 	call	0xece	; 0xece <_ZN3I2C8setSpeedEh>
  I2c.timeOut(1000);  //100ms for a request to succeed
     a18:	ce 01       	movw	r24, r28
     a1a:	68 ee       	ldi	r22, 0xE8	; 232
     a1c:	73 e0       	ldi	r23, 0x03	; 3
     a1e:	0e 94 62 07 	call	0xec4	; 0xec4 <_ZN3I2C7timeOutEj>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <_ZN14CubeletsShield12trafficLEDOnEv>:
     else return 0;  // Return an error when we're out of retries
   }
}

void CubeletsShield::trafficLEDOn(){
  digitalWrite(ledPin, HIGH); 
     a28:	fc 01       	movw	r30, r24
     a2a:	83 81       	ldd	r24, Z+3	; 0x03
     a2c:	61 e0       	ldi	r22, 0x01	; 1
     a2e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
}
     a32:	08 95       	ret

00000a34 <_ZN14CubeletsShield13trafficLEDOffEv>:

void CubeletsShield::trafficLEDOff(){
  digitalWrite(ledPin, LOW); 
     a34:	fc 01       	movw	r30, r24
     a36:	83 81       	ldd	r24, Z+3	; 0x03
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
}
     a3e:	08 95       	ret

00000a40 <_ZN14CubeletsShield10getDataI2CEhhhh>:
     else return 1;  // Return an error when we're out of retries
   }
}

// Returns 0 after `retries` attempts, else returns # of bytes available
unsigned char CubeletsShield::getDataI2C(unsigned char addr, unsigned char command, unsigned char bytesToRead, unsigned char retries ){
     a40:	cf 92       	push	r12
     a42:	df 92       	push	r13
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ec 01       	movw	r28, r24
     a52:	16 2f       	mov	r17, r22
     a54:	d4 2e       	mov	r13, r20
     a56:	c2 2e       	mov	r12, r18
  trafficLEDOn();
     a58:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
     a5c:	0f 2e       	mov	r0, r31
     a5e:	ff e0       	ldi	r31, 0x0F	; 15
     a60:	ef 2e       	mov	r14, r31
     a62:	f3 e0       	ldi	r31, 0x03	; 3
     a64:	ff 2e       	mov	r15, r31
     a66:	f0 2d       	mov	r31, r0
     a68:	c7 01       	movw	r24, r14
     a6a:	61 2f       	mov	r22, r17
     a6c:	4d 2d       	mov	r20, r13
     a6e:	2c 2d       	mov	r18, r12
     a70:	0e 94 3c 09 	call	0x1278	; 0x1278 <_ZN3I2C4readEhhh>
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	90 93 0e 03 	sts	0x030E, r25
     a7a:	80 93 0d 03 	sts	0x030D, r24
  trafficLEDOff();
     a7e:	ce 01       	movw	r24, r28
     a80:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2c.available() == 1){
     a84:	c7 01       	movw	r24, r14
     a86:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN3I2C9availableEv>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	09 f4       	brne	.+2      	; 0xa90 <_ZN14CubeletsShield10getDataI2CEhhhh+0x50>
     a8e:	3f c0       	rjmp	.+126    	; 0xb0e <_ZN14CubeletsShield10getDataI2CEhhhh+0xce>
    return 1;
  }
  else{
    if(debugOverUsart){
     a90:	8c 81       	ldd	r24, Y+4	; 0x04
     a92:	88 23       	and	r24, r24
     a94:	91 f1       	breq	.+100    	; 0xafa <_ZN14CubeletsShield10getDataI2CEhhhh+0xba>
     Serial.print("Failed to get data from I2C Slave addr: 0x");
     a96:	0f 2e       	mov	r0, r31
     a98:	f7 ec       	ldi	r31, 0xC7	; 199
     a9a:	ef 2e       	mov	r14, r31
     a9c:	f3 e0       	ldi	r31, 0x03	; 3
     a9e:	ff 2e       	mov	r15, r31
     aa0:	f0 2d       	mov	r31, r0
     aa2:	c7 01       	movw	r24, r14
     aa4:	6c e5       	ldi	r22, 0x5C	; 92
     aa6:	71 e0       	ldi	r23, 0x01	; 1
     aa8:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     aac:	c7 01       	movw	r24, r14
     aae:	61 2f       	mov	r22, r17
     ab0:	40 e1       	ldi	r20, 0x10	; 16
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     ab8:	c7 01       	movw	r24, r14
     aba:	67 e8       	ldi	r22, 0x87	; 135
     abc:	71 e0       	ldi	r23, 0x01	; 1
     abe:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     ac2:	c7 01       	movw	r24, r14
     ac4:	6d 2d       	mov	r22, r13
     ac6:	40 e1       	ldi	r20, 0x10	; 16
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" bytes requested: ");
     ace:	c7 01       	movw	r24, r14
     ad0:	64 e9       	ldi	r22, 0x94	; 148
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(bytesToRead, DEC);
     ad8:	c7 01       	movw	r24, r14
     ada:	6c 2d       	mov	r22, r12
     adc:	4a e0       	ldi	r20, 0x0A	; 10
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     ae4:	c7 01       	movw	r24, r14
     ae6:	67 ea       	ldi	r22, 0xA7	; 167
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     aee:	c7 01       	movw	r24, r14
     af0:	60 2f       	mov	r22, r16
     af2:	4a e0       	ldi	r20, 0x0A	; 10
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     afa:	00 23       	and	r16, r16
     afc:	51 f0       	breq	.+20     	; 0xb12 <_ZN14CubeletsShield10getDataI2CEhhhh+0xd2>
       retries--;
     afe:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     b00:	ce 01       	movw	r24, r28
     b02:	61 2f       	mov	r22, r17
     b04:	4d 2d       	mov	r20, r13
     b06:	2c 2d       	mov	r18, r12
     b08:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN14CubeletsShield10getDataI2CEhhhh>
     b0c:	03 c0       	rjmp	.+6      	; 0xb14 <_ZN14CubeletsShield10getDataI2CEhhhh+0xd4>
  trafficLEDOn();
  I2CReturnCode = I2c.read(addr, command, bytesToRead); 
  trafficLEDOff();
  
  if(I2c.available() == 1){
    return 1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	01 c0       	rjmp	.+2      	; 0xb14 <_ZN14CubeletsShield10getDataI2CEhhhh+0xd4>
     if(retries >= 0 && retries >0){
       retries--;
       //delay(2);
       return getDataI2C(addr, command, bytesToRead, retries);
     }
     else return 0;  // Return an error when we're out of retries
     b12:	80 e0       	ldi	r24, 0x00	; 0
   }
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	1f 91       	pop	r17
     b1a:	0f 91       	pop	r16
     b1c:	ff 90       	pop	r15
     b1e:	ef 90       	pop	r14
     b20:	df 90       	pop	r13
     b22:	cf 90       	pop	r12
     b24:	08 95       	ret

00000b26 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>:
     }
     else return 1;  // Return an error when we're out of retries
   }
}

unsigned char CubeletsShield::sendCommandWithDataI2C(unsigned char addr, unsigned char command, unsigned char data, unsigned char retries ){
     b26:	cf 92       	push	r12
     b28:	df 92       	push	r13
     b2a:	ef 92       	push	r14
     b2c:	ff 92       	push	r15
     b2e:	0f 93       	push	r16
     b30:	1f 93       	push	r17
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	ec 01       	movw	r28, r24
     b38:	16 2f       	mov	r17, r22
     b3a:	f4 2e       	mov	r15, r20
     b3c:	e2 2e       	mov	r14, r18
  trafficLEDOn();
     b3e:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command, data); 
     b42:	8f e0       	ldi	r24, 0x0F	; 15
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	61 2f       	mov	r22, r17
     b48:	4f 2d       	mov	r20, r15
     b4a:	2e 2d       	mov	r18, r14
     b4c:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <_ZN3I2C5writeEhhh>
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	90 93 0e 03 	sts	0x030E, r25
     b56:	80 93 0d 03 	sts	0x030D, r24
  trafficLEDOff();
     b5a:	ce 01       	movw	r24, r28
     b5c:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14CubeletsShield13trafficLEDOffEv>
  
  if(I2CReturnCode == 0){
     b60:	80 91 0d 03 	lds	r24, 0x030D
     b64:	90 91 0e 03 	lds	r25, 0x030E
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	29 f4       	brne	.+10     	; 0xb76 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0x50>
    return I2CReturnCode;
     b6c:	80 91 0d 03 	lds	r24, 0x030D
     b70:	90 91 0e 03 	lds	r25, 0x030E
     b74:	40 c0       	rjmp	.+128    	; 0xbf6 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
  }
  else{
    if(debugOverUsart){
     b76:	8c 81       	ldd	r24, Y+4	; 0x04
     b78:	88 23       	and	r24, r24
     b7a:	91 f1       	breq	.+100    	; 0xbe0 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xba>
     Serial.print("Failed to send I2C Command addr: 0x");
     b7c:	0f 2e       	mov	r0, r31
     b7e:	f7 ec       	ldi	r31, 0xC7	; 199
     b80:	cf 2e       	mov	r12, r31
     b82:	f3 e0       	ldi	r31, 0x03	; 3
     b84:	df 2e       	mov	r13, r31
     b86:	f0 2d       	mov	r31, r0
     b88:	c6 01       	movw	r24, r12
     b8a:	6c eb       	ldi	r22, 0xBC	; 188
     b8c:	71 e0       	ldi	r23, 0x01	; 1
     b8e:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     b92:	c6 01       	movw	r24, r12
     b94:	61 2f       	mov	r22, r17
     b96:	40 e1       	ldi	r20, 0x10	; 16
     b98:	50 e0       	ldi	r21, 0x00	; 0
     b9a:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     b9e:	c6 01       	movw	r24, r12
     ba0:	67 e8       	ldi	r22, 0x87	; 135
     ba2:	71 e0       	ldi	r23, 0x01	; 1
     ba4:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     ba8:	c6 01       	movw	r24, r12
     baa:	6f 2d       	mov	r22, r15
     bac:	40 e1       	ldi	r20, 0x10	; 16
     bae:	50 e0       	ldi	r21, 0x00	; 0
     bb0:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" data: 0x");
     bb4:	c6 01       	movw	r24, r12
     bb6:	60 ee       	ldi	r22, 0xE0	; 224
     bb8:	71 e0       	ldi	r23, 0x01	; 1
     bba:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(data, HEX);
     bbe:	c6 01       	movw	r24, r12
     bc0:	6e 2d       	mov	r22, r14
     bc2:	40 e1       	ldi	r20, 0x10	; 16
     bc4:	50 e0       	ldi	r21, 0x00	; 0
     bc6:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     bca:	c6 01       	movw	r24, r12
     bcc:	67 ea       	ldi	r22, 0xA7	; 167
     bce:	71 e0       	ldi	r23, 0x01	; 1
     bd0:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     bd4:	c6 01       	movw	r24, r12
     bd6:	60 2f       	mov	r22, r16
     bd8:	4a e0       	ldi	r20, 0x0A	; 10
     bda:	50 e0       	ldi	r21, 0x00	; 0
     bdc:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     be0:	00 23       	and	r16, r16
     be2:	41 f0       	breq	.+16     	; 0xbf4 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xce>
       retries--;
     be4:	01 50       	subi	r16, 0x01	; 1
       //delay(2);
       return sendCommandWithDataI2C(addr, command, data, retries);
     be6:	ce 01       	movw	r24, r28
     be8:	61 2f       	mov	r22, r17
     bea:	4f 2d       	mov	r20, r15
     bec:	2e 2d       	mov	r18, r14
     bee:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
     bf2:	01 c0       	rjmp	.+2      	; 0xbf6 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh+0xd0>
     }
     else return 1;  // Return an error when we're out of retries
     bf4:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     bf6:	df 91       	pop	r29
     bf8:	cf 91       	pop	r28
     bfa:	1f 91       	pop	r17
     bfc:	0f 91       	pop	r16
     bfe:	ff 90       	pop	r15
     c00:	ef 90       	pop	r14
     c02:	df 90       	pop	r13
     c04:	cf 90       	pop	r12
     c06:	08 95       	ret

00000c08 <_ZN14CubeletsShield14sendCommandI2CEhhh>:
  I2c.pullup(0);     // Disable the internal pullups
  I2c.setSpeed(1);   // 1=400kHz 0=
  I2c.timeOut(1000);  //100ms for a request to succeed
}

unsigned char CubeletsShield::sendCommandI2C(unsigned char addr, unsigned char command, unsigned char retries){
     c08:	cf 92       	push	r12
     c0a:	df 92       	push	r13
     c0c:	ff 92       	push	r15
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ec 01       	movw	r28, r24
     c18:	16 2f       	mov	r17, r22
     c1a:	04 2f       	mov	r16, r20
     c1c:	f2 2e       	mov	r15, r18
  trafficLEDOn();
     c1e:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN14CubeletsShield12trafficLEDOnEv>
  I2CReturnCode = I2c.write(addr, command); 
     c22:	8f e0       	ldi	r24, 0x0F	; 15
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	61 2f       	mov	r22, r17
     c28:	40 2f       	mov	r20, r16
     c2a:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN3I2C5writeEhh>
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	90 93 0e 03 	sts	0x030E, r25
     c34:	80 93 0d 03 	sts	0x030D, r24
  trafficLEDOff();
     c38:	ce 01       	movw	r24, r28
     c3a:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14CubeletsShield13trafficLEDOffEv>
  if(I2CReturnCode == 0){
     c3e:	80 91 0d 03 	lds	r24, 0x030D
     c42:	90 91 0e 03 	lds	r25, 0x030E
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	29 f4       	brne	.+10     	; 0xc54 <_ZN14CubeletsShield14sendCommandI2CEhhh+0x4c>
    return I2CReturnCode;
     c4a:	80 91 0d 03 	lds	r24, 0x030D
     c4e:	90 91 0e 03 	lds	r25, 0x030E
     c52:	35 c0       	rjmp	.+106    	; 0xcbe <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
  }
  else{
    if(debugOverUsart){
     c54:	8c 81       	ldd	r24, Y+4	; 0x04
     c56:	88 23       	and	r24, r24
     c58:	39 f1       	breq	.+78     	; 0xca8 <_ZN14CubeletsShield14sendCommandI2CEhhh+0xa0>
     Serial.print("Failed to send I2C Command addr: 0x");
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f7 ec       	ldi	r31, 0xC7	; 199
     c5e:	cf 2e       	mov	r12, r31
     c60:	f3 e0       	ldi	r31, 0x03	; 3
     c62:	df 2e       	mov	r13, r31
     c64:	f0 2d       	mov	r31, r0
     c66:	c6 01       	movw	r24, r12
     c68:	6c eb       	ldi	r22, 0xBC	; 188
     c6a:	71 e0       	ldi	r23, 0x01	; 1
     c6c:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(addr, HEX);
     c70:	c6 01       	movw	r24, r12
     c72:	61 2f       	mov	r22, r17
     c74:	40 e1       	ldi	r20, 0x10	; 16
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" command: 0x");
     c7c:	c6 01       	movw	r24, r12
     c7e:	67 e8       	ldi	r22, 0x87	; 135
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.print(command, HEX);
     c86:	c6 01       	movw	r24, r12
     c88:	60 2f       	mov	r22, r16
     c8a:	40 e1       	ldi	r20, 0x10	; 16
     c8c:	50 e0       	ldi	r21, 0x00	; 0
     c8e:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_ZN5Print5printEhi>
     Serial.print(" retries remaining: ");
     c92:	c6 01       	movw	r24, r12
     c94:	67 ea       	ldi	r22, 0xA7	; 167
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	0e 94 1d 10 	call	0x203a	; 0x203a <_ZN5Print5printEPKc>
     Serial.println(retries, DEC);
     c9c:	c6 01       	movw	r24, r12
     c9e:	6f 2d       	mov	r22, r15
     ca0:	4a e0       	ldi	r20, 0x0A	; 10
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <_ZN5Print7printlnEhi>
    }
     if(retries >= 0 && retries >0){
     ca8:	ff 20       	and	r15, r15
     caa:	41 f0       	breq	.+16     	; 0xcbc <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb4>
       retries--;
     cac:	2f 2d       	mov	r18, r15
     cae:	21 50       	subi	r18, 0x01	; 1
       return sendCommandI2C(addr, command, retries);
     cb0:	ce 01       	movw	r24, r28
     cb2:	61 2f       	mov	r22, r17
     cb4:	40 2f       	mov	r20, r16
     cb6:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN14CubeletsShield14sendCommandI2CEhhh>
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <_ZN14CubeletsShield14sendCommandI2CEhhh+0xb6>
     }
     else return 1;  // Return an error when we're out of retries
     cbc:	81 e0       	ldi	r24, 0x01	; 1
   }
}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	0f 91       	pop	r16
     cc6:	ff 90       	pop	r15
     cc8:	df 90       	pop	r13
     cca:	cf 90       	pop	r12
     ccc:	08 95       	ret

00000cce <_ZN14CubeletsShieldC1Ehh>:
volatile int I2CReturnCode;             // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
unsigned char cubeletI2CAddresses[6]; 
unsigned char ledPin;
boolean debugOverUsart = 0;

CubeletsShield::CubeletsShield(boolean enableDebugOverUsart, unsigned char ledPinForI2C) {
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	ec 01       	movw	r28, r24
     cd6:	16 2f       	mov	r17, r22
  	// ############################################
	// #### Working Variable Initialization #######
	// ############################################

	rec_byte_i2c = 0x00;   // Worker variable to hold I2C Received Byte
     cd8:	18 82       	st	Y, r1
	I2CReturnCode = -1;              // Worker variable to hold I2C Return Codes (See Atmel Datasheet)
     cda:	2f ef       	ldi	r18, 0xFF	; 255
     cdc:	3f ef       	ldi	r19, 0xFF	; 255
     cde:	30 93 0e 03 	sts	0x030E, r19
     ce2:	20 93 0d 03 	sts	0x030D, r18

        // Initialize Addresses Array
        cubeletI2CAddresses[0] = ADDRESS_CUBE1;
     ce6:	82 e2       	ldi	r24, 0x22	; 34
     ce8:	80 93 07 03 	sts	0x0307, r24
        cubeletI2CAddresses[1] = ADDRESS_CUBE2;
     cec:	83 e2       	ldi	r24, 0x23	; 35
     cee:	80 93 08 03 	sts	0x0308, r24
        cubeletI2CAddresses[2] = ADDRESS_CUBE3;
     cf2:	84 e2       	ldi	r24, 0x24	; 36
     cf4:	80 93 09 03 	sts	0x0309, r24
        cubeletI2CAddresses[3] = ADDRESS_CUBE4;
     cf8:	85 e2       	ldi	r24, 0x25	; 37
     cfa:	80 93 0a 03 	sts	0x030A, r24
        cubeletI2CAddresses[4] = ADDRESS_CUBE5;
     cfe:	86 e2       	ldi	r24, 0x26	; 38
     d00:	80 93 0b 03 	sts	0x030B, r24
        cubeletI2CAddresses[5] = ADDRESS_CUBE6;
     d04:	87 e2       	ldi	r24, 0x27	; 39
     d06:	80 93 0c 03 	sts	0x030C, r24
        
        // I2C Activity indicator light
        if(ledPinForI2C > 0){
     d0a:	44 23       	and	r20, r20
     d0c:	41 f0       	breq	.+16     	; 0xd1e <_ZN14CubeletsShieldC1Ehh+0x50>
          ledPin = ledPinForI2C;
     d0e:	4b 83       	std	Y+3, r20	; 0x03
    	  pinMode(ledPin, OUTPUT);
     d10:	84 2f       	mov	r24, r20
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
    	  trafficLEDOff();
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 1a 05 	call	0xa34	; 0xa34 <_ZN14CubeletsShield13trafficLEDOffEv>
        }

        // Debug over USART enabled?
        if(enableDebugOverUsart){
     d1e:	11 23       	and	r17, r17
     d20:	51 f0       	breq	.+20     	; 0xd36 <_ZN14CubeletsShieldC1Ehh+0x68>
    
          Serial.begin(9600);
     d22:	87 ec       	ldi	r24, 0xC7	; 199
     d24:	93 e0       	ldi	r25, 0x03	; 3
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	55 e2       	ldi	r21, 0x25	; 37
     d2a:	60 e0       	ldi	r22, 0x00	; 0
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN14HardwareSerial5beginEm>
          debugOverUsart = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	8c 83       	std	Y+4, r24	; 0x04
        }
        trafficLEDOn();
     d36:	ce 01       	movw	r24, r28
     d38:	0e 94 14 05 	call	0xa28	; 0xa28 <_ZN14CubeletsShield12trafficLEDOnEv>
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	08 95       	ret

00000d44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>:
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
}

// Returns I2C Address corresponding to the faceNumber on the Arduino Shields
unsigned char CubeletsShield::getI2CAddressByFace(unsigned char faceNumber){
  return cubeletI2CAddresses[faceNumber-1];
     d44:	e6 2f       	mov	r30, r22
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ea 5f       	subi	r30, 0xFA	; 250
     d4a:	fc 4f       	sbci	r31, 0xFC	; 252
}
     d4c:	80 81       	ld	r24, Z
     d4e:	08 95       	ret

00000d50 <_ZN14CubeletsShield24startCommunicationByFaceEh>:
unsigned char CubeletsShield::stopCommunicationByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STOPCOMM), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::startCommunicationByFace(unsigned char faceNumber){
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_STARTCOMM), char(I2CRETRYCOUNT));
     d56:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     d5a:	68 2f       	mov	r22, r24
     d5c:	ce 01       	movw	r24, r28
     d5e:	45 e2       	ldi	r20, 0x25	; 37
     d60:	25 e0       	ldi	r18, 0x05	; 5
     d62:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	08 95       	ret

00000d6c <_ZN14CubeletsShield14greenOffByFaceEh>:
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOffByFace(unsigned char faceNumber){
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDOFF), char(I2CRETRYCOUNT));
     d72:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     d76:	68 2f       	mov	r22, r24
     d78:	ce 01       	movw	r24, r28
     d7a:	41 e2       	ldi	r20, 0x21	; 33
     d7c:	25 e0       	ldi	r18, 0x05	; 5
     d7e:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	08 95       	ret

00000d88 <_ZN14CubeletsShield19greenOffAllCubeletsEv>:
  for( unsigned char i = 1;i<=6;i++){
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	ec 01       	movw	r28, r24
  for( unsigned char i = 1;i<=6;i++){
     d90:	11 e0       	ldi	r17, 0x01	; 1
     greenOffByFace(i);
     d92:	ce 01       	movw	r24, r28
     d94:	61 2f       	mov	r22, r17
     d96:	0e 94 b6 06 	call	0xd6c	; 0xd6c <_ZN14CubeletsShield14greenOffByFaceEh>
     greenOnByFace(i);
  }
}

void CubeletsShield::greenOffAllCubelets(){
  for( unsigned char i = 1;i<=6;i++){
     d9a:	1f 5f       	subi	r17, 0xFF	; 255
     d9c:	17 30       	cpi	r17, 0x07	; 7
     d9e:	c9 f7       	brne	.-14     	; 0xd92 <_ZN14CubeletsShield19greenOffAllCubeletsEv+0xa>
     greenOffByFace(i);
  }
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret

00000da8 <_ZN14CubeletsShield13greenOnByFaceEh>:
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
}

// Returns 0 on success, error code on failure 
unsigned char CubeletsShield::greenOnByFace(unsigned char faceNumber){
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	ec 01       	movw	r28, r24
  return sendCommandI2C(getI2CAddressByFace(faceNumber), char(COMMAND_LEDON), char(I2CRETRYCOUNT));
     dae:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     db2:	68 2f       	mov	r22, r24
     db4:	ce 01       	movw	r24, r28
     db6:	40 e2       	ldi	r20, 0x20	; 32
     db8:	25 e0       	ldi	r18, 0x05	; 5
     dba:	0e 94 04 06 	call	0xc08	; 0xc08 <_ZN14CubeletsShield14sendCommandI2CEhhh>
}
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	08 95       	ret

00000dc4 <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>:
    return false;
  }
}

// Returns 0 on success, error code on failure
unsigned char CubeletsShield::setBroadcastBlockValueByFace(unsigned char faceNumber, unsigned char blockValue){
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	ec 01       	movw	r28, r24
     dce:	14 2f       	mov	r17, r20
  return sendCommandWithDataI2C(getI2CAddressByFace(faceNumber),
      char(COMMAND_SETBVSELF), blockValue, char(I2CRETRYCOUNT));
     dd0:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     dd4:	68 2f       	mov	r22, r24
     dd6:	ce 01       	movw	r24, r28
     dd8:	42 e2       	ldi	r20, 0x22	; 34
     dda:	21 2f       	mov	r18, r17
     ddc:	05 e0       	ldi	r16, 0x05	; 5
     dde:	0e 94 93 05 	call	0xb26	; 0xb26 <_ZN14CubeletsShield22sendCommandWithDataI2CEhhhh>
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	1f 91       	pop	r17
     de8:	0f 91       	pop	r16
     dea:	08 95       	ret

00000dec <_ZN14CubeletsShield24initializeCubeletsShieldEv>:

// #######################################################################
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
  
  for( unsigned char i = 1;i<=6;i++){
     df4:	11 e0       	ldi	r17, 0x01	; 1
     greenOnByFace(i);
     df6:	ce 01       	movw	r24, r28
     df8:	61 2f       	mov	r22, r17
     dfa:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN14CubeletsShield13greenOnByFaceEh>
     setBroadcastBlockValueByFace(i, 0x00);
     dfe:	ce 01       	movw	r24, r28
     e00:	61 2f       	mov	r22, r17
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <_ZN14CubeletsShield28setBroadcastBlockValueByFaceEhh>
     startCommunicationByFace(i);
     e08:	ce 01       	movw	r24, r28
     e0a:	61 2f       	mov	r22, r17
     e0c:	0e 94 a8 06 	call	0xd50	; 0xd50 <_ZN14CubeletsShield24startCommunicationByFaceEh>
// Cubelet Shield Functions
// ####################################################################### 

void CubeletsShield::initializeCubeletsShield(){
  
  for( unsigned char i = 1;i<=6;i++){
     e10:	1f 5f       	subi	r17, 0xFF	; 255
     e12:	17 30       	cpi	r17, 0x07	; 7
     e14:	81 f7       	brne	.-32     	; 0xdf6 <_ZN14CubeletsShield24initializeCubeletsShieldEv+0xa>
     greenOnByFace(i);
     setBroadcastBlockValueByFace(i, 0x00);
     startCommunicationByFace(i);
  }
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <_ZN14CubeletsShield10initializeEv>:
          debugOverUsart = 1;
        }
        trafficLEDOn();
}

void CubeletsShield::initialize(){
     e1e:	cf 93       	push	r28
     e20:	df 93       	push	r29
     e22:	ec 01       	movw	r28, r24
    // ############################################
    // #### Peripheral Configuration, Etc  ########
    // ############################################
	
    // Setup I2C for our needs
    initializeI2C();
     e24:	0e 94 fd 04 	call	0x9fa	; 0x9fa <_ZN14CubeletsShield13initializeI2CEv>

    // Wait plenty of time for the Cubelets MCUs to start, configure their SSPs
    delay(10);
     e28:	6a e0       	ldi	r22, 0x0A	; 10
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 99 0a 	call	0x1532	; 0x1532 <delay>
    
    // Clean Block Values, enable communication, light Debug LEDs
    initializeCubeletsShield();
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 f6 06 	call	0xdec	; 0xdec <_ZN14CubeletsShield24initializeCubeletsShieldEv>

    if(debugOverUsart){
     e3a:	8c 81       	ldd	r24, Y+4	; 0x04
     e3c:	88 23       	and	r24, r24
     e3e:	31 f0       	breq	.+12     	; 0xe4c <_ZN14CubeletsShield10initializeEv+0x2e>
	  Serial.println("Cubelet-Arduino Interface Loaded.  Ready.");
     e40:	87 ec       	ldi	r24, 0xC7	; 199
     e42:	93 e0       	ldi	r25, 0x03	; 3
     e44:	6a ee       	ldi	r22, 0xEA	; 234
     e46:	71 e0       	ldi	r23, 0x01	; 1
     e48:	0e 94 20 10 	call	0x2040	; 0x2040 <_ZN5Print7printlnEPKc>
    } 
}
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh>:
    // Didn't get anything!
    return false;
  }
}

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
     e52:	ef 92       	push	r14
     e54:	ff 92       	push	r15
     e56:	0f 93       	push	r16
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	7c 01       	movw	r14, r24
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
     e5e:	0e 94 a2 06 	call	0xd44	; 0xd44 <_ZN14CubeletsShield19getI2CAddressByFaceEh>
     e62:	68 2f       	mov	r22, r24
     e64:	c7 01       	movw	r24, r14
     e66:	43 e2       	ldi	r20, 0x23	; 35
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	05 e0       	ldi	r16, 0x05	; 5
     e6c:	0e 94 20 05 	call	0xa40	; 0xa40 <_ZN14CubeletsShield10getDataI2CEhhhh>
     e70:	81 30       	cpi	r24, 0x01	; 1
     e72:	41 f0       	breq	.+16     	; 0xe84 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x32>
    }
    return rec_byte_i2c;
  }
  else{
    // Didn't get anything!
    return false;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x44>
unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
     e78:	ce 01       	movw	r24, r28
     e7a:	0e 94 7c 07 	call	0xef8	; 0xef8 <_ZN3I2C7receiveEv>
     e7e:	f7 01       	movw	r30, r14
     e80:	80 83       	st	Z, r24
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x36>

unsigned char CubeletsShield::getNeighborBlockValueByFace(unsigned char faceNumber){
  // Request the block value 
  if( getDataI2C(getI2CAddressByFace(faceNumber), char(COMMAND_GETBVNEIGHBOR), char(RESPONSE_LENGTH_GETBVNEIGHBOR), char(I2CRETRYCOUNT)) == char(RESPONSE_LENGTH_GETBVNEIGHBOR)){
    // We have data
    while (I2c.available() > 0 ){     // Loop over the whole buffer, 
     e84:	cf e0       	ldi	r28, 0x0F	; 15
     e86:	d3 e0       	ldi	r29, 0x03	; 3
     e88:	ce 01       	movw	r24, r28
     e8a:	0e 94 79 07 	call	0xef2	; 0xef2 <_ZN3I2C9availableEv>
     e8e:	88 23       	and	r24, r24
     e90:	99 f7       	brne	.-26     	; 0xe78 <_ZN14CubeletsShield27getNeighborBlockValueByFaceEh+0x26>
      rec_byte_i2c = I2c.receive();   // we only want the last char in the array
    }
    return rec_byte_i2c;
     e92:	f7 01       	movw	r30, r14
     e94:	80 81       	ld	r24, Z
  }
  else{
    // Didn't get anything!
    return false;
  }
}
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <_ZN3I2C5beginEv>:
void I2C::begin()
{
  #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
    // activate internal pull-ups for twi
    // as per note from atmega8 manual pg167
    sbi(PORTC, 4);
     ea2:	44 9a       	sbi	0x08, 4	; 8
    sbi(PORTC, 5);
     ea4:	45 9a       	sbi	0x08, 5	; 8
    // as per note from atmega128 manual pg204
    sbi(PORTD, 0);
    sbi(PORTD, 1);
  #endif
  // initialize twi prescaler and bit rate
  cbi(TWSR, TWPS0);
     ea6:	e9 eb       	ldi	r30, 0xB9	; 185
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	80 83       	st	Z, r24
  cbi(TWSR, TWPS1);
     eb0:	80 81       	ld	r24, Z
     eb2:	8d 7f       	andi	r24, 0xFD	; 253
     eb4:	80 83       	st	Z, r24
  TWBR = ((F_CPU / 100000) - 16) / 2;
     eb6:	88 e4       	ldi	r24, 0x48	; 72
     eb8:	80 93 b8 00 	sts	0x00B8, r24
  // enable twi module and acks
  TWCR = _BV(TWEN) | _BV(TWEA); 
     ebc:	84 e4       	ldi	r24, 0x44	; 68
     ebe:	80 93 bc 00 	sts	0x00BC, r24
}
     ec2:	08 95       	ret

00000ec4 <_ZN3I2C7timeOutEj>:
  TWCR = 0;
}

void I2C::timeOut(uint16_t _timeOut)
{
  timeOutDelay = _timeOut;
     ec4:	70 93 32 03 	sts	0x0332, r23
     ec8:	60 93 31 03 	sts	0x0331, r22
}
     ecc:	08 95       	ret

00000ece <_ZN3I2C8setSpeedEh>:

void I2C::setSpeed(uint8_t _fast)
{
  if(!_fast)
     ece:	66 23       	and	r22, r22
     ed0:	21 f4       	brne	.+8      	; 0xeda <_ZN3I2C8setSpeedEh+0xc>
  {
    TWBR = ((F_CPU / 100000) - 16) / 2;
     ed2:	88 e4       	ldi	r24, 0x48	; 72
     ed4:	80 93 b8 00 	sts	0x00B8, r24
     ed8:	08 95       	ret
  }
  else
  {
    TWBR = ((F_CPU / 400000) - 16) / 2;
     eda:	8c e0       	ldi	r24, 0x0C	; 12
     edc:	80 93 b8 00 	sts	0x00B8, r24
     ee0:	08 95       	ret

00000ee2 <_ZN3I2C6pullupEh>:
  }
}
  
void I2C::pullup(uint8_t activate)
{
  if(activate)
     ee2:	66 23       	and	r22, r22
     ee4:	19 f0       	breq	.+6      	; 0xeec <_ZN3I2C6pullupEh+0xa>
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // activate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      sbi(PORTC, 4);
     ee6:	44 9a       	sbi	0x08, 4	; 8
      sbi(PORTC, 5);
     ee8:	45 9a       	sbi	0x08, 5	; 8
     eea:	08 95       	ret
  else
  {
    #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)
      // deactivate internal pull-ups for twi
      // as per note from atmega8 manual pg167
      cbi(PORTC, 4);
     eec:	44 98       	cbi	0x08, 4	; 8
      cbi(PORTC, 5);
     eee:	45 98       	cbi	0x08, 5	; 8
     ef0:	08 95       	ret

00000ef2 <_ZN3I2C9availableEv>:


uint8_t I2C::available()
{
  return(bytesAvailable);
}
     ef2:	80 91 35 03 	lds	r24, 0x0335
     ef6:	08 95       	ret

00000ef8 <_ZN3I2C7receiveEv>:

uint8_t I2C::receive()
{
  bufferIndex = totalBytes - bytesAvailable;
     ef8:	20 91 35 03 	lds	r18, 0x0335
     efc:	30 91 33 03 	lds	r19, 0x0333
     f00:	32 1b       	sub	r19, r18
     f02:	30 93 34 03 	sts	0x0334, r19
  if(!bytesAvailable)
     f06:	22 23       	and	r18, r18
     f08:	21 f4       	brne	.+8      	; 0xf12 <_ZN3I2C7receiveEv+0x1a>
  {
    bufferIndex = 0;
     f0a:	10 92 34 03 	sts	0x0334, r1
    return(0);
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	08 95       	ret
  }
  bytesAvailable--;
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	20 93 35 03 	sts	0x0335, r18
  return(data[bufferIndex]);
     f18:	83 0f       	add	r24, r19
     f1a:	91 1d       	adc	r25, r1
     f1c:	fc 01       	movw	r30, r24
     f1e:	82 81       	ldd	r24, Z+2	; 0x02
}
     f20:	08 95       	ret

00000f22 <_ZN3I2C6lockUpEv>:
  return(0);
}

void I2C::lockUp()
{
  TWCR = 0; //releases SDA and SCL lines to high impedance
     f22:	ec eb       	ldi	r30, 0xBC	; 188
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	10 82       	st	Z, r1
  TWCR = _BV(TWEN) | _BV(TWEA); //reinitialize TWI 
     f28:	84 e4       	ldi	r24, 0x44	; 68
     f2a:	80 83       	st	Z, r24
}
     f2c:	08 95       	ret

00000f2e <_ZN3I2C4stopEv>:
  }
  return(TWI_STATUS); 
}

uint8_t I2C::stop()
{
     f2e:	cf 92       	push	r12
     f30:	df 92       	push	r13
     f32:	ef 92       	push	r14
     f34:	ff 92       	push	r15
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
     f40:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     f44:	6b 01       	movw	r12, r22
     f46:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f48:	84 e9       	ldi	r24, 0x94	; 148
     f4a:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & (1<<TWSTO)))
     f4e:	cc eb       	ldi	r28, 0xBC	; 188
     f50:	d0 e0       	ldi	r29, 0x00	; 0
     f52:	1a c0       	rjmp	.+52     	; 0xf88 <_ZN3I2C4stopEv+0x5a>
  {
    if(!timeOutDelay){continue;}
     f54:	00 97       	sbiw	r24, 0x00	; 0
     f56:	e1 f0       	breq	.+56     	; 0xf90 <_ZN3I2C4stopEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
     f58:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     f5c:	ab 01       	movw	r20, r22
     f5e:	bc 01       	movw	r22, r24
     f60:	4c 19       	sub	r20, r12
     f62:	5d 09       	sbc	r21, r13
     f64:	6e 09       	sbc	r22, r14
     f66:	7f 09       	sbc	r23, r15
     f68:	80 91 31 03 	lds	r24, 0x0331
     f6c:	90 91 32 03 	lds	r25, 0x0332
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	48 17       	cp	r20, r24
     f76:	59 07       	cpc	r21, r25
     f78:	6a 07       	cpc	r22, r26
     f7a:	7b 07       	cpc	r23, r27
     f7c:	28 f0       	brcs	.+10     	; 0xf88 <_ZN3I2C4stopEv+0x5a>
    {
      lockUp();
     f7e:	c8 01       	movw	r24, r16
     f80:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
      return(1);
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <_ZN3I2C4stopEv+0x6a>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
  {
    if(!timeOutDelay){continue;}
     f88:	80 91 31 03 	lds	r24, 0x0331
     f8c:	90 91 32 03 	lds	r25, 0x0332

uint8_t I2C::stop()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
  while ((TWCR & (1<<TWSTO)))
     f90:	28 81       	ld	r18, Y
     f92:	24 fd       	sbrc	r18, 4
     f94:	df cf       	rjmp	.-66     	; 0xf54 <_ZN3I2C4stopEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  return(0);
     f96:	80 e0       	ldi	r24, 0x00	; 0
}
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	1f 91       	pop	r17
     f9e:	0f 91       	pop	r16
     fa0:	ff 90       	pop	r15
     fa2:	ef 90       	pop	r14
     fa4:	df 90       	pop	r13
     fa6:	cf 90       	pop	r12
     fa8:	08 95       	ret

00000faa <_ZN3I2C11receiveByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::receiveByte(uint8_t ack)
{
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
     fba:	8c 01       	movw	r16, r24
     fbc:	c6 2f       	mov	r28, r22
  unsigned long startingTime = millis();
     fbe:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     fc2:	6b 01       	movw	r12, r22
     fc4:	7c 01       	movw	r14, r24
  if(ack)
     fc6:	cc 23       	and	r28, r28
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <_ZN3I2C11receiveByteEh+0x28>
  {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     fca:	84 ec       	ldi	r24, 0xC4	; 196
     fcc:	80 93 bc 00 	sts	0x00BC, r24
     fd0:	1e c0       	rjmp	.+60     	; 0x100e <_ZN3I2C11receiveByteEh+0x64>

  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
     fd2:	84 e8       	ldi	r24, 0x84	; 132
     fd4:	80 93 bc 00 	sts	0x00BC, r24
     fd8:	1a c0       	rjmp	.+52     	; 0x100e <_ZN3I2C11receiveByteEh+0x64>
  }
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	f1 f0       	breq	.+60     	; 0x101a <_ZN3I2C11receiveByteEh+0x70>
    if((millis() - startingTime) >= timeOutDelay)
     fde:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
     fe2:	ab 01       	movw	r20, r22
     fe4:	bc 01       	movw	r22, r24
     fe6:	4c 19       	sub	r20, r12
     fe8:	5d 09       	sbc	r21, r13
     fea:	6e 09       	sbc	r22, r14
     fec:	7f 09       	sbc	r23, r15
     fee:	80 91 31 03 	lds	r24, 0x0331
     ff2:	90 91 32 03 	lds	r25, 0x0332
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	48 17       	cp	r20, r24
     ffc:	59 07       	cpc	r21, r25
     ffe:	6a 07       	cpc	r22, r26
    1000:	7b 07       	cpc	r23, r27
    1002:	38 f0       	brcs	.+14     	; 0x1012 <_ZN3I2C11receiveByteEh+0x68>
    {
      lockUp();
    1004:	c8 01       	movw	r24, r16
    1006:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
      return(1);
    100a:	c1 e0       	ldi	r28, 0x01	; 1
    100c:	18 c0       	rjmp	.+48     	; 0x103e <_ZN3I2C11receiveByteEh+0x94>
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
    100e:	cc eb       	ldi	r28, 0xBC	; 188
    1010:	d0 e0       	ldi	r29, 0x00	; 0
  {
    if(!timeOutDelay){continue;}
    1012:	80 91 31 03 	lds	r24, 0x0331
    1016:	90 91 32 03 	lds	r25, 0x0332
  }
  else
  {
    TWCR = (1<<TWINT) | (1<<TWEN);
  }
  while (!(TWCR & (1<<TWINT)))
    101a:	28 81       	ld	r18, Y
    101c:	22 23       	and	r18, r18
    101e:	ec f6       	brge	.-70     	; 0xfda <_ZN3I2C11receiveByteEh+0x30>
    {
      lockUp();
      return(1);
    }
  }
  if (TWI_STATUS == LOST_ARBTRTN)
    1020:	80 91 b9 00 	lds	r24, 0x00B9
    1024:	88 7f       	andi	r24, 0xF8	; 248
    1026:	88 33       	cpi	r24, 0x38	; 56
    1028:	39 f4       	brne	.+14     	; 0x1038 <_ZN3I2C11receiveByteEh+0x8e>
  {
    uint8_t bufferedStatus = TWI_STATUS;
    102a:	c0 91 b9 00 	lds	r28, 0x00B9
    102e:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
    1030:	c8 01       	movw	r24, r16
    1032:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    1036:	03 c0       	rjmp	.+6      	; 0x103e <_ZN3I2C11receiveByteEh+0x94>
  }
  return(TWI_STATUS); 
    1038:	c0 91 b9 00 	lds	r28, 0x00B9
    103c:	c8 7f       	andi	r28, 0xF8	; 248
}
    103e:	8c 2f       	mov	r24, r28
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	1f 91       	pop	r17
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	08 95       	ret

00001052 <_ZN3I2C8sendByteEh>:
    return(bufferedStatus);
  } 
}

uint8_t I2C::sendByte(uint8_t i2cData)
{
    1052:	cf 92       	push	r12
    1054:	df 92       	push	r13
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	8c 01       	movw	r16, r24
  TWDR = i2cData;
    1064:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
    1068:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    106c:	6b 01       	movw	r12, r22
    106e:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
    1070:	84 e8       	ldi	r24, 0x84	; 132
    1072:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    1076:	cc eb       	ldi	r28, 0xBC	; 188
    1078:	d0 e0       	ldi	r29, 0x00	; 0
    107a:	1a c0       	rjmp	.+52     	; 0x10b0 <_ZN3I2C8sendByteEh+0x5e>
  {
    if(!timeOutDelay){continue;}
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	e1 f0       	breq	.+56     	; 0x10b8 <_ZN3I2C8sendByteEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
    1080:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    1084:	ab 01       	movw	r20, r22
    1086:	bc 01       	movw	r22, r24
    1088:	4c 19       	sub	r20, r12
    108a:	5d 09       	sbc	r21, r13
    108c:	6e 09       	sbc	r22, r14
    108e:	7f 09       	sbc	r23, r15
    1090:	80 91 31 03 	lds	r24, 0x0331
    1094:	90 91 32 03 	lds	r25, 0x0332
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	48 17       	cp	r20, r24
    109e:	59 07       	cpc	r21, r25
    10a0:	6a 07       	cpc	r22, r26
    10a2:	7b 07       	cpc	r23, r27
    10a4:	28 f0       	brcs	.+10     	; 0x10b0 <_ZN3I2C8sendByteEh+0x5e>
    {
      lockUp();
    10a6:	c8 01       	movw	r24, r16
    10a8:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
      return(1);
    10ac:	c1 e0       	ldi	r28, 0x01	; 1
    10ae:	1d c0       	rjmp	.+58     	; 0x10ea <_ZN3I2C8sendByteEh+0x98>
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    10b0:	80 91 31 03 	lds	r24, 0x0331
    10b4:	90 91 32 03 	lds	r25, 0x0332
uint8_t I2C::sendByte(uint8_t i2cData)
{
  TWDR = i2cData;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    10b8:	28 81       	ld	r18, Y
    10ba:	22 23       	and	r18, r18
    10bc:	fc f6       	brge	.-66     	; 0x107c <_ZN3I2C8sendByteEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
    10be:	80 91 b9 00 	lds	r24, 0x00B9
    10c2:	88 7f       	andi	r24, 0xF8	; 248
    10c4:	88 32       	cpi	r24, 0x28	; 40
    10c6:	81 f0       	breq	.+32     	; 0x10e8 <_ZN3I2C8sendByteEh+0x96>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
    10c8:	e9 eb       	ldi	r30, 0xB9	; 185
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	c0 81       	ld	r28, Z
    10ce:	c8 7f       	andi	r28, 0xF8	; 248
  if (TWI_STATUS == MT_DATA_NACK)
    10d0:	80 81       	ld	r24, Z
    10d2:	88 7f       	andi	r24, 0xF8	; 248
    10d4:	80 33       	cpi	r24, 0x30	; 48
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <_ZN3I2C8sendByteEh+0x8e>
  {
    stop();
    10d8:	c8 01       	movw	r24, r16
    10da:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3I2C4stopEv>
    return(bufferedStatus);
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <_ZN3I2C8sendByteEh+0x98>
  }
  else
  {
    lockUp();
    10e0:	c8 01       	movw	r24, r16
    10e2:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    10e6:	01 c0       	rjmp	.+2      	; 0x10ea <_ZN3I2C8sendByteEh+0x98>
    }
       
  }
  if (TWI_STATUS == MT_DATA_ACK)
  {
    return(0);
    10e8:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
    10ea:	8c 2f       	mov	r24, r28
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	1f 91       	pop	r17
    10f2:	0f 91       	pop	r16
    10f4:	ff 90       	pop	r15
    10f6:	ef 90       	pop	r14
    10f8:	df 90       	pop	r13
    10fa:	cf 90       	pop	r12
    10fc:	08 95       	ret

000010fe <_ZN3I2C11sendAddressEh>:
  }
  return(TWI_STATUS);
}

uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	8c 01       	movw	r16, r24
  TWDR = i2cAddress;
    1110:	60 93 bb 00 	sts	0x00BB, r22
  unsigned long startingTime = millis();
    1114:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    1118:	6b 01       	movw	r12, r22
    111a:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT) | (1<<TWEN);
    111c:	84 e8       	ldi	r24, 0x84	; 132
    111e:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    1122:	cc eb       	ldi	r28, 0xBC	; 188
    1124:	d0 e0       	ldi	r29, 0x00	; 0
    1126:	1a c0       	rjmp	.+52     	; 0x115c <_ZN3I2C11sendAddressEh+0x5e>
  {
    if(!timeOutDelay){continue;}
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	e1 f0       	breq	.+56     	; 0x1164 <_ZN3I2C11sendAddressEh+0x66>
    if((millis() - startingTime) >= timeOutDelay)
    112c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    1130:	ab 01       	movw	r20, r22
    1132:	bc 01       	movw	r22, r24
    1134:	4c 19       	sub	r20, r12
    1136:	5d 09       	sbc	r21, r13
    1138:	6e 09       	sbc	r22, r14
    113a:	7f 09       	sbc	r23, r15
    113c:	80 91 31 03 	lds	r24, 0x0331
    1140:	90 91 32 03 	lds	r25, 0x0332
    1144:	a0 e0       	ldi	r26, 0x00	; 0
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	48 17       	cp	r20, r24
    114a:	59 07       	cpc	r21, r25
    114c:	6a 07       	cpc	r22, r26
    114e:	7b 07       	cpc	r23, r27
    1150:	28 f0       	brcs	.+10     	; 0x115c <_ZN3I2C11sendAddressEh+0x5e>
    {
      lockUp();
    1152:	c8 01       	movw	r24, r16
    1154:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
      return(1);
    1158:	c1 e0       	ldi	r28, 0x01	; 1
    115a:	29 c0       	rjmp	.+82     	; 0x11ae <_ZN3I2C11sendAddressEh+0xb0>
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    115c:	80 91 31 03 	lds	r24, 0x0331
    1160:	90 91 32 03 	lds	r25, 0x0332
uint8_t I2C::sendAddress(uint8_t i2cAddress)
{
  TWDR = i2cAddress;
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT) | (1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    1164:	28 81       	ld	r18, Y
    1166:	22 23       	and	r18, r18
    1168:	fc f6       	brge	.-66     	; 0x1128 <_ZN3I2C11sendAddressEh+0x2a>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
    116a:	80 91 b9 00 	lds	r24, 0x00B9
    116e:	88 7f       	andi	r24, 0xF8	; 248
    1170:	88 31       	cpi	r24, 0x18	; 24
    1172:	d1 f0       	breq	.+52     	; 0x11a8 <_ZN3I2C11sendAddressEh+0xaa>
    1174:	80 91 b9 00 	lds	r24, 0x00B9
    1178:	88 7f       	andi	r24, 0xF8	; 248
    117a:	80 34       	cpi	r24, 0x40	; 64
    117c:	b9 f0       	breq	.+46     	; 0x11ac <_ZN3I2C11sendAddressEh+0xae>
  {
    return(0);
  }
  uint8_t bufferedStatus = TWI_STATUS;
    117e:	e9 eb       	ldi	r30, 0xB9	; 185
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	c0 81       	ld	r28, Z
    1184:	c8 7f       	andi	r28, 0xF8	; 248
  if ((TWI_STATUS == MT_SLA_NACK) || (TWI_STATUS == MR_SLA_NACK))
    1186:	80 81       	ld	r24, Z
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	80 32       	cpi	r24, 0x20	; 32
    118c:	29 f0       	breq	.+10     	; 0x1198 <_ZN3I2C11sendAddressEh+0x9a>
    118e:	80 91 b9 00 	lds	r24, 0x00B9
    1192:	88 7f       	andi	r24, 0xF8	; 248
    1194:	88 34       	cpi	r24, 0x48	; 72
    1196:	21 f4       	brne	.+8      	; 0x11a0 <_ZN3I2C11sendAddressEh+0xa2>
  {
    stop();
    1198:	c8 01       	movw	r24, r16
    119a:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3I2C4stopEv>
    return(bufferedStatus);
    119e:	07 c0       	rjmp	.+14     	; 0x11ae <_ZN3I2C11sendAddressEh+0xb0>
  }
  else
  {
    lockUp();
    11a0:	c8 01       	movw	r24, r16
    11a2:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <_ZN3I2C11sendAddressEh+0xb0>
    }
       
  }
  if ((TWI_STATUS == MT_SLA_ACK) || (TWI_STATUS == MR_SLA_ACK))
  {
    return(0);
    11a8:	c0 e0       	ldi	r28, 0x00	; 0
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <_ZN3I2C11sendAddressEh+0xb0>
    11ac:	c0 e0       	ldi	r28, 0x00	; 0
  else
  {
    lockUp();
    return(bufferedStatus);
  } 
}
    11ae:	8c 2f       	mov	r24, r28
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	08 95       	ret

000011c2 <_ZN3I2C5startEv>:

/////////////// Private Methods ////////////////////////////////////////


uint8_t I2C::start()
{
    11c2:	cf 92       	push	r12
    11c4:	df 92       	push	r13
    11c6:	ef 92       	push	r14
    11c8:	ff 92       	push	r15
    11ca:	0f 93       	push	r16
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	8c 01       	movw	r16, r24
  unsigned long startingTime = millis();
    11d4:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    11dc:	84 ea       	ldi	r24, 0xA4	; 164
    11de:	80 93 bc 00 	sts	0x00BC, r24
  while (!(TWCR & (1<<TWINT)))
    11e2:	cc eb       	ldi	r28, 0xBC	; 188
    11e4:	d0 e0       	ldi	r29, 0x00	; 0
    11e6:	1a c0       	rjmp	.+52     	; 0x121c <_ZN3I2C5startEv+0x5a>
  {
    if(!timeOutDelay){continue;}
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	e1 f0       	breq	.+56     	; 0x1224 <_ZN3I2C5startEv+0x62>
    if((millis() - startingTime) >= timeOutDelay)
    11ec:	0e 94 8b 0a 	call	0x1516	; 0x1516 <millis>
    11f0:	ab 01       	movw	r20, r22
    11f2:	bc 01       	movw	r22, r24
    11f4:	4c 19       	sub	r20, r12
    11f6:	5d 09       	sbc	r21, r13
    11f8:	6e 09       	sbc	r22, r14
    11fa:	7f 09       	sbc	r23, r15
    11fc:	80 91 31 03 	lds	r24, 0x0331
    1200:	90 91 32 03 	lds	r25, 0x0332
    1204:	a0 e0       	ldi	r26, 0x00	; 0
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	48 17       	cp	r20, r24
    120a:	59 07       	cpc	r21, r25
    120c:	6a 07       	cpc	r22, r26
    120e:	7b 07       	cpc	r23, r27
    1210:	28 f0       	brcs	.+10     	; 0x121c <_ZN3I2C5startEv+0x5a>
    {
      lockUp();
    1212:	c8 01       	movw	r24, r16
    1214:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
      return(1);
    1218:	c1 e0       	ldi	r28, 0x01	; 1
    121a:	24 c0       	rjmp	.+72     	; 0x1264 <_ZN3I2C5startEv+0xa2>
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
  {
    if(!timeOutDelay){continue;}
    121c:	80 91 31 03 	lds	r24, 0x0331
    1220:	90 91 32 03 	lds	r25, 0x0332

uint8_t I2C::start()
{
  unsigned long startingTime = millis();
  TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  while (!(TWCR & (1<<TWINT)))
    1224:	28 81       	ld	r18, Y
    1226:	22 23       	and	r18, r18
    1228:	fc f6       	brge	.-66     	; 0x11e8 <_ZN3I2C5startEv+0x26>
      lockUp();
      return(1);
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
    122a:	80 91 b9 00 	lds	r24, 0x00B9
    122e:	88 7f       	andi	r24, 0xF8	; 248
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	a9 f0       	breq	.+42     	; 0x125e <_ZN3I2C5startEv+0x9c>
    1234:	80 91 b9 00 	lds	r24, 0x00B9
    1238:	88 7f       	andi	r24, 0xF8	; 248
    123a:	80 31       	cpi	r24, 0x10	; 16
    123c:	91 f0       	breq	.+36     	; 0x1262 <_ZN3I2C5startEv+0xa0>
  {
    return(0);
  }
  if (TWI_STATUS == LOST_ARBTRTN)
    123e:	80 91 b9 00 	lds	r24, 0x00B9
    1242:	88 7f       	andi	r24, 0xF8	; 248
    1244:	88 33       	cpi	r24, 0x38	; 56
    1246:	39 f4       	brne	.+14     	; 0x1256 <_ZN3I2C5startEv+0x94>
  {
    uint8_t bufferedStatus = TWI_STATUS;
    1248:	c0 91 b9 00 	lds	r28, 0x00B9
    124c:	c8 7f       	andi	r28, 0xF8	; 248
    lockUp();
    124e:	c8 01       	movw	r24, r16
    1250:	0e 94 91 07 	call	0xf22	; 0xf22 <_ZN3I2C6lockUpEv>
    return(bufferedStatus);
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <_ZN3I2C5startEv+0xa2>
  }
  return(TWI_STATUS);
    1256:	c0 91 b9 00 	lds	r28, 0x00B9
    125a:	c8 7f       	andi	r28, 0xF8	; 248
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <_ZN3I2C5startEv+0xa2>
    }
       
  }
  if ((TWI_STATUS == START) || (TWI_STATUS == REPEATED_START))
  {
    return(0);
    125e:	c0 e0       	ldi	r28, 0x00	; 0
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <_ZN3I2C5startEv+0xa2>
    1262:	c0 e0       	ldi	r28, 0x00	; 0
    uint8_t bufferedStatus = TWI_STATUS;
    lockUp();
    return(bufferedStatus);
  }
  return(TWI_STATUS);
}
    1264:	8c 2f       	mov	r24, r28
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	ff 90       	pop	r15
    1270:	ef 90       	pop	r14
    1272:	df 90       	pop	r13
    1274:	cf 90       	pop	r12
    1276:	08 95       	ret

00001278 <_ZN3I2C4readEhhh>:
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
{
    1278:	cf 92       	push	r12
    127a:	df 92       	push	r13
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	06 2f       	mov	r16, r22
    128c:	f4 2e       	mov	r15, r20
    128e:	12 2f       	mov	r17, r18
  bytesAvailable = 0;
    1290:	10 92 35 03 	sts	0x0335, r1
  bufferIndex = 0;
    1294:	10 92 34 03 	sts	0x0334, r1
  if(numberBytes == 0){numberBytes++;}
    1298:	22 23       	and	r18, r18
    129a:	09 f4       	brne	.+2      	; 0x129e <_ZN3I2C4readEhhh+0x26>
    129c:	11 e0       	ldi	r17, 0x01	; 1
  nack = numberBytes - 1;
    129e:	81 2f       	mov	r24, r17
    12a0:	81 50       	subi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
  returnStatus = 0;
    12a4:	18 82       	st	Y, r1
  returnStatus = start();
    12a6:	ce 01       	movw	r24, r28
    12a8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN3I2C5startEv>
    12ac:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    12ae:	88 23       	and	r24, r24
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <_ZN3I2C4readEhhh+0x3c>
    12b2:	6e c0       	rjmp	.+220    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
  returnStatus = sendAddress(SLA_W(address));
    12b4:	00 0f       	add	r16, r16
    12b6:	ce 01       	movw	r24, r28
    12b8:	60 2f       	mov	r22, r16
    12ba:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN3I2C11sendAddressEh>
    12be:	88 83       	st	Y, r24
  if(returnStatus)
    12c0:	88 23       	and	r24, r24
    12c2:	29 f0       	breq	.+10     	; 0x12ce <_ZN3I2C4readEhhh+0x56>
  {
    if(returnStatus == 1){return(2);}
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <_ZN3I2C4readEhhh+0x52>
    12c8:	63 c0       	rjmp	.+198    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	61 c0       	rjmp	.+194    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    12ce:	ce 01       	movw	r24, r28
    12d0:	6f 2d       	mov	r22, r15
    12d2:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN3I2C8sendByteEh>
    12d6:	88 83       	st	Y, r24
  if(returnStatus)
    12d8:	88 23       	and	r24, r24
    12da:	29 f0       	breq	.+10     	; 0x12e6 <_ZN3I2C4readEhhh+0x6e>
  {
    if(returnStatus == 1){return(3);}
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	09 f0       	breq	.+2      	; 0x12e2 <_ZN3I2C4readEhhh+0x6a>
    12e0:	57 c0       	rjmp	.+174    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    12e2:	83 e0       	ldi	r24, 0x03	; 3
    12e4:	55 c0       	rjmp	.+170    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = start();
    12e6:	ce 01       	movw	r24, r28
    12e8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN3I2C5startEv>
    12ec:	88 83       	st	Y, r24
  if(returnStatus)
    12ee:	88 23       	and	r24, r24
    12f0:	29 f0       	breq	.+10     	; 0x12fc <_ZN3I2C4readEhhh+0x84>
  {
    if(returnStatus == 1){return(4);}
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <_ZN3I2C4readEhhh+0x80>
    12f6:	4c c0       	rjmp	.+152    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    12f8:	84 e0       	ldi	r24, 0x04	; 4
    12fa:	4a c0       	rjmp	.+148    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
    12fc:	60 2f       	mov	r22, r16
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	ce 01       	movw	r24, r28
    1302:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN3I2C11sendAddressEh>
    1306:	88 83       	st	Y, r24
  if(returnStatus)
    1308:	88 23       	and	r24, r24
    130a:	19 f4       	brne	.+6      	; 0x1312 <_ZN3I2C4readEhhh+0x9a>
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    130c:	11 23       	and	r17, r17
    130e:	29 f4       	brne	.+10     	; 0x131a <_ZN3I2C4readEhhh+0xa2>
    1310:	32 c0       	rjmp	.+100    	; 0x1376 <_ZN3I2C4readEhhh+0xfe>
    return(returnStatus);
  }
  returnStatus = sendAddress(SLA_R(address));
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	e9 f5       	brne	.+122    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    1316:	85 e0       	ldi	r24, 0x05	; 5
    1318:	3b c0       	rjmp	.+118    	; 0x1390 <_ZN3I2C4readEhhh+0x118>
uint8_t I2C::read(int address, int registerAddress, int numberBytes)
{
  return(read((uint8_t) address, (uint8_t) registerAddress, (uint8_t) numberBytes));
}

uint8_t I2C::read(uint8_t address, uint8_t registerAddress, uint8_t numberBytes)
    131a:	ee 24       	eor	r14, r14
    131c:	ff 24       	eor	r15, r15
    131e:	68 94       	set
    1320:	e1 f8       	bld	r14, 1
    1322:	ec 0e       	add	r14, r28
    1324:	fd 1e       	adc	r15, r29
    1326:	00 e0       	ldi	r16, 0x00	; 0
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    }
    data[i] = TWDR;
    1328:	0f 2e       	mov	r0, r31
    132a:	fb eb       	ldi	r31, 0xBB	; 187
    132c:	cf 2e       	mov	r12, r31
    132e:	dd 24       	eor	r13, r13
    1330:	f0 2d       	mov	r31, r0
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	80 17       	cp	r24, r16
    1336:	51 f4       	brne	.+20     	; 0x134c <_ZN3I2C4readEhhh+0xd4>
    {
      returnStatus = receiveByte(0);
    1338:	ce 01       	movw	r24, r28
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN3I2C11receiveByteEh>
    1340:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	11 f1       	breq	.+68     	; 0x138a <_ZN3I2C4readEhhh+0x112>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    1346:	88 35       	cpi	r24, 0x58	; 88
    1348:	51 f0       	breq	.+20     	; 0x135e <_ZN3I2C4readEhhh+0xe6>
    134a:	22 c0       	rjmp	.+68     	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    }
    else
    {
      returnStatus = receiveByte(1);
    134c:	ce 01       	movw	r24, r28
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN3I2C11receiveByteEh>
    1354:	88 83       	st	Y, r24
      if(returnStatus == 1){return(6);}
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	d1 f0       	breq	.+52     	; 0x138e <_ZN3I2C4readEhhh+0x116>
      if(returnStatus != MR_DATA_ACK){return(returnStatus);}
    135a:	80 35       	cpi	r24, 0x50	; 80
    135c:	c9 f4       	brne	.+50     	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    }
    data[i] = TWDR;
    135e:	f6 01       	movw	r30, r12
    1360:	80 81       	ld	r24, Z
    1362:	f7 01       	movw	r30, r14
    1364:	81 93       	st	Z+, r24
    1366:	7f 01       	movw	r14, r30
    bytesAvailable = i+1;
    1368:	0f 5f       	subi	r16, 0xFF	; 255
    136a:	00 93 35 03 	sts	0x0335, r16
    totalBytes = i+1;
    136e:	00 93 33 03 	sts	0x0333, r16
  if(returnStatus)
  {
    if(returnStatus == 1){return(5);}
    return(returnStatus);
  }
  for(uint8_t i = 0; i < numberBytes; i++)
    1372:	01 17       	cp	r16, r17
    1374:	f1 f6       	brne	.-68     	; 0x1332 <_ZN3I2C4readEhhh+0xba>
    }
    data[i] = TWDR;
    bytesAvailable = i+1;
    totalBytes = i+1;
  }
  returnStatus = stop();
    1376:	ce 01       	movw	r24, r28
    1378:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3I2C4stopEv>
    137c:	88 83       	st	Y, r24
  if(returnStatus)
    137e:	88 23       	and	r24, r24
    1380:	39 f0       	breq	.+14     	; 0x1390 <_ZN3I2C4readEhhh+0x118>
  {
    if(returnStatus == 1){return(7);}
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	29 f4       	brne	.+10     	; 0x1390 <_ZN3I2C4readEhhh+0x118>
    1386:	87 e0       	ldi	r24, 0x07	; 7
    1388:	03 c0       	rjmp	.+6      	; 0x1390 <_ZN3I2C4readEhhh+0x118>
  for(uint8_t i = 0; i < numberBytes; i++)
  {
    if( i == nack )
    {
      returnStatus = receiveByte(0);
      if(returnStatus == 1){return(6);}
    138a:	86 e0       	ldi	r24, 0x06	; 6
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <_ZN3I2C4readEhhh+0x118>
      if(returnStatus != MR_DATA_NACK){return(returnStatus);}
    }
    else
    {
      returnStatus = receiveByte(1);
      if(returnStatus == 1){return(6);}
    138e:	86 e0       	ldi	r24, 0x06	; 6
  {
    if(returnStatus == 1){return(7);}
    return(returnStatus);
  }
  return(returnStatus);
}
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	08 95       	ret

000013a2 <_ZN3I2C5writeEhhh>:
{
  return(write((uint8_t) address, (uint8_t) registerAddress));
}

uint8_t I2C::write(uint8_t address, uint8_t registerAddress, uint8_t data)
{
    13a2:	ff 92       	push	r15
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
    13ae:	16 2f       	mov	r17, r22
    13b0:	04 2f       	mov	r16, r20
    13b2:	f2 2e       	mov	r15, r18
  returnStatus = 0;
    13b4:	18 82       	st	Y, r1
  returnStatus = start(); 
    13b6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN3I2C5startEv>
    13ba:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    13bc:	88 23       	and	r24, r24
    13be:	59 f5       	brne	.+86     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
  returnStatus = sendAddress(SLA_W(address));
    13c0:	61 2f       	mov	r22, r17
    13c2:	66 0f       	add	r22, r22
    13c4:	ce 01       	movw	r24, r28
    13c6:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN3I2C11sendAddressEh>
    13ca:	88 83       	st	Y, r24
  if(returnStatus)
    13cc:	88 23       	and	r24, r24
    13ce:	21 f0       	breq	.+8      	; 0x13d8 <_ZN3I2C5writeEhhh+0x36>
  {
    if(returnStatus == 1){return(2);}
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	09 f5       	brne	.+66     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	1f c0       	rjmp	.+62     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    13d8:	ce 01       	movw	r24, r28
    13da:	60 2f       	mov	r22, r16
    13dc:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN3I2C8sendByteEh>
    13e0:	88 83       	st	Y, r24
  if(returnStatus)
    13e2:	88 23       	and	r24, r24
    13e4:	21 f0       	breq	.+8      	; 0x13ee <_ZN3I2C5writeEhhh+0x4c>
  {
    if(returnStatus == 1){return(3);}
    13e6:	81 30       	cpi	r24, 0x01	; 1
    13e8:	b1 f4       	brne	.+44     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    13ea:	83 e0       	ldi	r24, 0x03	; 3
    13ec:	14 c0       	rjmp	.+40     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = sendByte(data);
    13ee:	ce 01       	movw	r24, r28
    13f0:	6f 2d       	mov	r22, r15
    13f2:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN3I2C8sendByteEh>
    13f6:	88 83       	st	Y, r24
  if(returnStatus)
    13f8:	88 23       	and	r24, r24
    13fa:	21 f0       	breq	.+8      	; 0x1404 <_ZN3I2C5writeEhhh+0x62>
  {
    if(returnStatus == 1){return(3);}
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	59 f4       	brne	.+22     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	09 c0       	rjmp	.+18     	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    return(returnStatus);
  }
  returnStatus = stop();
    1404:	ce 01       	movw	r24, r28
    1406:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3I2C4stopEv>
    140a:	88 83       	st	Y, r24
  if(returnStatus)
    140c:	88 23       	and	r24, r24
    140e:	19 f0       	breq	.+6      	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
  {
    if(returnStatus == 1){return(7);}
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f4       	brne	.+2      	; 0x1416 <_ZN3I2C5writeEhhh+0x74>
    1414:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	ff 90       	pop	r15
    1420:	08 95       	ret

00001422 <_ZN3I2C5writeEhh>:


/////////////////////////////////////////////////////

uint8_t I2C::write(uint8_t address, uint8_t registerAddress)
{
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	ec 01       	movw	r28, r24
    142c:	16 2f       	mov	r17, r22
    142e:	04 2f       	mov	r16, r20
  returnStatus = 0;
    1430:	18 82       	st	Y, r1
  returnStatus = start();
    1432:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_ZN3I2C5startEv>
    1436:	88 83       	st	Y, r24
  if(returnStatus){return(returnStatus);}
    1438:	88 23       	and	r24, r24
    143a:	01 f5       	brne	.+64     	; 0x147c <_ZN3I2C5writeEhh+0x5a>
  returnStatus = sendAddress(SLA_W(address));
    143c:	61 2f       	mov	r22, r17
    143e:	66 0f       	add	r22, r22
    1440:	ce 01       	movw	r24, r28
    1442:	0e 94 7f 08 	call	0x10fe	; 0x10fe <_ZN3I2C11sendAddressEh>
    1446:	88 83       	st	Y, r24
  if(returnStatus)
    1448:	88 23       	and	r24, r24
    144a:	21 f0       	breq	.+8      	; 0x1454 <_ZN3I2C5writeEhh+0x32>
  {
    if(returnStatus == 1){return(2);}
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	b1 f4       	brne	.+44     	; 0x147c <_ZN3I2C5writeEhh+0x5a>
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	14 c0       	rjmp	.+40     	; 0x147c <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = sendByte(registerAddress);
    1454:	ce 01       	movw	r24, r28
    1456:	60 2f       	mov	r22, r16
    1458:	0e 94 29 08 	call	0x1052	; 0x1052 <_ZN3I2C8sendByteEh>
    145c:	88 83       	st	Y, r24
  if(returnStatus)
    145e:	88 23       	and	r24, r24
    1460:	21 f0       	breq	.+8      	; 0x146a <_ZN3I2C5writeEhh+0x48>
  {
    if(returnStatus == 1){return(3);}
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	59 f4       	brne	.+22     	; 0x147c <_ZN3I2C5writeEhh+0x5a>
    1466:	83 e0       	ldi	r24, 0x03	; 3
    1468:	09 c0       	rjmp	.+18     	; 0x147c <_ZN3I2C5writeEhh+0x5a>
    return(returnStatus);
  }
  returnStatus = stop();
    146a:	ce 01       	movw	r24, r28
    146c:	0e 94 97 07 	call	0xf2e	; 0xf2e <_ZN3I2C4stopEv>
    1470:	88 83       	st	Y, r24
  if(returnStatus)
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <_ZN3I2C5writeEhh+0x5a>
  {
    if(returnStatus == 1){return(7);}
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	09 f4       	brne	.+2      	; 0x147c <_ZN3I2C5writeEhh+0x5a>
    147a:	87 e0       	ldi	r24, 0x07	; 7
    return(returnStatus);
  }
  return(returnStatus);
}
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <__vector_16>:
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1486:	1f 92       	push	r1
    1488:	0f 92       	push	r0
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	0f 92       	push	r0
    148e:	11 24       	eor	r1, r1
    1490:	2f 93       	push	r18
    1492:	3f 93       	push	r19
    1494:	8f 93       	push	r24
    1496:	9f 93       	push	r25
    1498:	af 93       	push	r26
    149a:	bf 93       	push	r27
    149c:	80 91 3a 03 	lds	r24, 0x033A
    14a0:	90 91 3b 03 	lds	r25, 0x033B
    14a4:	a0 91 3c 03 	lds	r26, 0x033C
    14a8:	b0 91 3d 03 	lds	r27, 0x033D
    14ac:	30 91 3e 03 	lds	r19, 0x033E
    14b0:	01 96       	adiw	r24, 0x01	; 1
    14b2:	a1 1d       	adc	r26, r1
    14b4:	b1 1d       	adc	r27, r1
    14b6:	23 2f       	mov	r18, r19
    14b8:	2d 5f       	subi	r18, 0xFD	; 253
    14ba:	2d 37       	cpi	r18, 0x7D	; 125
    14bc:	20 f0       	brcs	.+8      	; 0x14c6 <__vector_16+0x40>
    14be:	2d 57       	subi	r18, 0x7D	; 125
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	a1 1d       	adc	r26, r1
    14c4:	b1 1d       	adc	r27, r1
    14c6:	20 93 3e 03 	sts	0x033E, r18
    14ca:	80 93 3a 03 	sts	0x033A, r24
    14ce:	90 93 3b 03 	sts	0x033B, r25
    14d2:	a0 93 3c 03 	sts	0x033C, r26
    14d6:	b0 93 3d 03 	sts	0x033D, r27
    14da:	80 91 36 03 	lds	r24, 0x0336
    14de:	90 91 37 03 	lds	r25, 0x0337
    14e2:	a0 91 38 03 	lds	r26, 0x0338
    14e6:	b0 91 39 03 	lds	r27, 0x0339
    14ea:	01 96       	adiw	r24, 0x01	; 1
    14ec:	a1 1d       	adc	r26, r1
    14ee:	b1 1d       	adc	r27, r1
    14f0:	80 93 36 03 	sts	0x0336, r24
    14f4:	90 93 37 03 	sts	0x0337, r25
    14f8:	a0 93 38 03 	sts	0x0338, r26
    14fc:	b0 93 39 03 	sts	0x0339, r27
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	3f 91       	pop	r19
    150a:	2f 91       	pop	r18
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <millis>:
    1516:	8f b7       	in	r24, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	20 91 3a 03 	lds	r18, 0x033A
    151e:	30 91 3b 03 	lds	r19, 0x033B
    1522:	40 91 3c 03 	lds	r20, 0x033C
    1526:	50 91 3d 03 	lds	r21, 0x033D
    152a:	8f bf       	out	0x3f, r24	; 63
    152c:	b9 01       	movw	r22, r18
    152e:	ca 01       	movw	r24, r20
    1530:	08 95       	ret

00001532 <delay>:
    1532:	9b 01       	movw	r18, r22
    1534:	ac 01       	movw	r20, r24
    1536:	7f b7       	in	r23, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	80 91 36 03 	lds	r24, 0x0336
    153e:	90 91 37 03 	lds	r25, 0x0337
    1542:	a0 91 38 03 	lds	r26, 0x0338
    1546:	b0 91 39 03 	lds	r27, 0x0339
    154a:	66 b5       	in	r22, 0x26	; 38
    154c:	a8 9b       	sbis	0x15, 0	; 21
    154e:	05 c0       	rjmp	.+10     	; 0x155a <delay+0x28>
    1550:	6f 3f       	cpi	r22, 0xFF	; 255
    1552:	19 f0       	breq	.+6      	; 0x155a <delay+0x28>
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	a1 1d       	adc	r26, r1
    1558:	b1 1d       	adc	r27, r1
    155a:	7f bf       	out	0x3f, r23	; 63
    155c:	ba 2f       	mov	r27, r26
    155e:	a9 2f       	mov	r26, r25
    1560:	98 2f       	mov	r25, r24
    1562:	88 27       	eor	r24, r24
    1564:	86 0f       	add	r24, r22
    1566:	91 1d       	adc	r25, r1
    1568:	a1 1d       	adc	r26, r1
    156a:	b1 1d       	adc	r27, r1
    156c:	62 e0       	ldi	r22, 0x02	; 2
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	aa 1f       	adc	r26, r26
    1574:	bb 1f       	adc	r27, r27
    1576:	6a 95       	dec	r22
    1578:	d1 f7       	brne	.-12     	; 0x156e <delay+0x3c>
    157a:	bc 01       	movw	r22, r24
    157c:	2d c0       	rjmp	.+90     	; 0x15d8 <delay+0xa6>
    157e:	ff b7       	in	r31, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	80 91 36 03 	lds	r24, 0x0336
    1586:	90 91 37 03 	lds	r25, 0x0337
    158a:	a0 91 38 03 	lds	r26, 0x0338
    158e:	b0 91 39 03 	lds	r27, 0x0339
    1592:	e6 b5       	in	r30, 0x26	; 38
    1594:	a8 9b       	sbis	0x15, 0	; 21
    1596:	05 c0       	rjmp	.+10     	; 0x15a2 <delay+0x70>
    1598:	ef 3f       	cpi	r30, 0xFF	; 255
    159a:	19 f0       	breq	.+6      	; 0x15a2 <delay+0x70>
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	a1 1d       	adc	r26, r1
    15a0:	b1 1d       	adc	r27, r1
    15a2:	ff bf       	out	0x3f, r31	; 63
    15a4:	ba 2f       	mov	r27, r26
    15a6:	a9 2f       	mov	r26, r25
    15a8:	98 2f       	mov	r25, r24
    15aa:	88 27       	eor	r24, r24
    15ac:	8e 0f       	add	r24, r30
    15ae:	91 1d       	adc	r25, r1
    15b0:	a1 1d       	adc	r26, r1
    15b2:	b1 1d       	adc	r27, r1
    15b4:	e2 e0       	ldi	r30, 0x02	; 2
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	ea 95       	dec	r30
    15c0:	d1 f7       	brne	.-12     	; 0x15b6 <delay+0x84>
    15c2:	86 1b       	sub	r24, r22
    15c4:	97 0b       	sbc	r25, r23
    15c6:	88 5e       	subi	r24, 0xE8	; 232
    15c8:	93 40       	sbci	r25, 0x03	; 3
    15ca:	c8 f2       	brcs	.-78     	; 0x157e <delay+0x4c>
    15cc:	21 50       	subi	r18, 0x01	; 1
    15ce:	30 40       	sbci	r19, 0x00	; 0
    15d0:	40 40       	sbci	r20, 0x00	; 0
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	68 51       	subi	r22, 0x18	; 24
    15d6:	7c 4f       	sbci	r23, 0xFC	; 252
    15d8:	21 15       	cp	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	41 05       	cpc	r20, r1
    15de:	51 05       	cpc	r21, r1
    15e0:	71 f6       	brne	.-100    	; 0x157e <delay+0x4c>
    15e2:	08 95       	ret

000015e4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15e4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15e6:	84 b5       	in	r24, 0x24	; 36
    15e8:	82 60       	ori	r24, 0x02	; 2
    15ea:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15ec:	84 b5       	in	r24, 0x24	; 36
    15ee:	81 60       	ori	r24, 0x01	; 1
    15f0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15f2:	85 b5       	in	r24, 0x25	; 37
    15f4:	82 60       	ori	r24, 0x02	; 2
    15f6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15f8:	85 b5       	in	r24, 0x25	; 37
    15fa:	81 60       	ori	r24, 0x01	; 1
    15fc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15fe:	ee e6       	ldi	r30, 0x6E	; 110
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	81 60       	ori	r24, 0x01	; 1
    1606:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1608:	e1 e8       	ldi	r30, 0x81	; 129
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    160e:	80 81       	ld	r24, Z
    1610:	82 60       	ori	r24, 0x02	; 2
    1612:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    1614:	80 81       	ld	r24, Z
    1616:	81 60       	ori	r24, 0x01	; 1
    1618:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    161a:	e0 e8       	ldi	r30, 0x80	; 128
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	81 60       	ori	r24, 0x01	; 1
    1622:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1624:	e1 eb       	ldi	r30, 0xB1	; 177
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	84 60       	ori	r24, 0x04	; 4
    162c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    162e:	e0 eb       	ldi	r30, 0xB0	; 176
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	81 60       	ori	r24, 0x01	; 1
    1636:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1638:	ea e7       	ldi	r30, 0x7A	; 122
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	84 60       	ori	r24, 0x04	; 4
    1640:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    1642:	80 81       	ld	r24, Z
    1644:	82 60       	ori	r24, 0x02	; 2
    1646:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1648:	80 81       	ld	r24, Z
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    164e:	80 81       	ld	r24, Z
    1650:	80 68       	ori	r24, 0x80	; 128
    1652:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1654:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1658:	08 95       	ret

0000165a <analogRead>:
	// there's something connected to AREF.
	analog_reference = mode;
}

int analogRead(uint8_t pin)
{
    165a:	98 2f       	mov	r25, r24
#elif defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644P__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#elif defined(analogPinToChannel) && (defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__))
	pin = analogPinToChannel(pin);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    165c:	8e 30       	cpi	r24, 0x0E	; 14
    165e:	08 f0       	brcs	.+2      	; 0x1662 <analogRead+0x8>
    1660:	9e 50       	subi	r25, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1662:	97 70       	andi	r25, 0x07	; 7
    1664:	80 91 bd 02 	lds	r24, 0x02BD
    1668:	82 95       	swap	r24
    166a:	88 0f       	add	r24, r24
    166c:	88 0f       	add	r24, r24
    166e:	80 7c       	andi	r24, 0xC0	; 192
    1670:	89 2b       	or	r24, r25
    1672:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    1676:	80 91 7a 00 	lds	r24, 0x007A
    167a:	80 64       	ori	r24, 0x40	; 64
    167c:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    1680:	80 91 7a 00 	lds	r24, 0x007A
    1684:	86 fd       	sbrc	r24, 6
    1686:	fc cf       	rjmp	.-8      	; 0x1680 <analogRead+0x26>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    1688:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    168c:	40 91 79 00 	lds	r20, 0x0079
    1690:	94 2f       	mov	r25, r20
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	28 2b       	or	r18, r24
    1698:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
    169a:	c9 01       	movw	r24, r18
    169c:	08 95       	ret

0000169e <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    169e:	1f 93       	push	r17
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	18 2f       	mov	r17, r24
    16a6:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	0e 94 af 0b 	call	0x175e	; 0x175e <pinMode>
	if (val == 0)
    16ae:	20 97       	sbiw	r28, 0x00	; 0
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <analogWrite+0x16>
    16b2:	4a c0       	rjmp	.+148    	; 0x1748 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    16b4:	cf 3f       	cpi	r28, 0xFF	; 255
    16b6:	d1 05       	cpc	r29, r1
    16b8:	09 f4       	brne	.+2      	; 0x16bc <analogWrite+0x1e>
    16ba:	49 c0       	rjmp	.+146    	; 0x174e <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    16bc:	e1 2f       	mov	r30, r17
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	e2 55       	subi	r30, 0x52	; 82
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	84 91       	lpm	r24, Z
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	c1 f0       	breq	.+48     	; 0x16fa <analogWrite+0x5c>
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	28 f4       	brcc	.+10     	; 0x16d8 <analogWrite+0x3a>
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	51 f0       	breq	.+20     	; 0x16e6 <analogWrite+0x48>
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	b1 f5       	brne	.+108    	; 0x1742 <analogWrite+0xa4>
    16d6:	0c c0       	rjmp	.+24     	; 0x16f0 <analogWrite+0x52>
    16d8:	86 30       	cpi	r24, 0x06	; 6
    16da:	19 f1       	breq	.+70     	; 0x1722 <analogWrite+0x84>
    16dc:	87 30       	cpi	r24, 0x07	; 7
    16de:	49 f1       	breq	.+82     	; 0x1732 <analogWrite+0x94>
    16e0:	84 30       	cpi	r24, 0x04	; 4
    16e2:	79 f5       	brne	.+94     	; 0x1742 <analogWrite+0xa4>
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    16e6:	84 b5       	in	r24, 0x24	; 36
    16e8:	80 68       	ori	r24, 0x80	; 128
    16ea:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    16ec:	c7 bd       	out	0x27, r28	; 39
    16ee:	33 c0       	rjmp	.+102    	; 0x1756 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    16f0:	84 b5       	in	r24, 0x24	; 36
    16f2:	80 62       	ori	r24, 0x20	; 32
    16f4:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    16f6:	c8 bd       	out	0x28, r28	; 40
    16f8:	2e c0       	rjmp	.+92     	; 0x1756 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    16fa:	80 91 80 00 	lds	r24, 0x0080
    16fe:	80 68       	ori	r24, 0x80	; 128
    1700:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    1704:	d0 93 89 00 	sts	0x0089, r29
    1708:	c0 93 88 00 	sts	0x0088, r28
    170c:	24 c0       	rjmp	.+72     	; 0x1756 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    170e:	80 91 80 00 	lds	r24, 0x0080
    1712:	80 62       	ori	r24, 0x20	; 32
    1714:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    1718:	d0 93 8b 00 	sts	0x008B, r29
    171c:	c0 93 8a 00 	sts	0x008A, r28
    1720:	1a c0       	rjmp	.+52     	; 0x1756 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1722:	80 91 b0 00 	lds	r24, 0x00B0
    1726:	80 68       	ori	r24, 0x80	; 128
    1728:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    172c:	c0 93 b3 00 	sts	0x00B3, r28
    1730:	12 c0       	rjmp	.+36     	; 0x1756 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1732:	80 91 b0 00 	lds	r24, 0x00B0
    1736:	80 62       	ori	r24, 0x20	; 32
    1738:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    173c:	c0 93 b4 00 	sts	0x00B4, r28
    1740:	0a c0       	rjmp	.+20     	; 0x1756 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1742:	c0 38       	cpi	r28, 0x80	; 128
    1744:	d1 05       	cpc	r29, r1
    1746:	1c f4       	brge	.+6      	; 0x174e <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    1748:	81 2f       	mov	r24, r17
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    174e:	81 2f       	mov	r24, r17
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <digitalWrite>
				}
		}
	}
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	08 95       	ret

0000175e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1762:	48 2f       	mov	r20, r24
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	ca 01       	movw	r24, r20
    1768:	86 56       	subi	r24, 0x66	; 102
    176a:	9f 4f       	sbci	r25, 0xFF	; 255
    176c:	fc 01       	movw	r30, r24
    176e:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    1770:	4a 57       	subi	r20, 0x7A	; 122
    1772:	5f 4f       	sbci	r21, 0xFF	; 255
    1774:	fa 01       	movw	r30, r20
    1776:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1778:	88 23       	and	r24, r24
    177a:	69 f1       	breq	.+90     	; 0x17d6 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	fc 01       	movw	r30, r24
    1784:	e8 59       	subi	r30, 0x98	; 152
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	a5 91       	lpm	r26, Z+
    178a:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    178c:	fc 01       	movw	r30, r24
    178e:	ee 58       	subi	r30, 0x8E	; 142
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	c5 91       	lpm	r28, Z+
    1794:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    1796:	66 23       	and	r22, r22
    1798:	51 f4       	brne	.+20     	; 0x17ae <pinMode+0x50>
		uint8_t oldSREG = SREG;
    179a:	2f b7       	in	r18, 0x3f	; 63
                cli();
    179c:	f8 94       	cli
		*reg &= ~bit;
    179e:	8c 91       	ld	r24, X
    17a0:	93 2f       	mov	r25, r19
    17a2:	90 95       	com	r25
    17a4:	89 23       	and	r24, r25
    17a6:	8c 93       	st	X, r24
		*out &= ~bit;
    17a8:	88 81       	ld	r24, Y
    17aa:	89 23       	and	r24, r25
    17ac:	0b c0       	rjmp	.+22     	; 0x17c4 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    17ae:	62 30       	cpi	r22, 0x02	; 2
    17b0:	61 f4       	brne	.+24     	; 0x17ca <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    17b2:	2f b7       	in	r18, 0x3f	; 63
                cli();
    17b4:	f8 94       	cli
		*reg &= ~bit;
    17b6:	8c 91       	ld	r24, X
    17b8:	93 2f       	mov	r25, r19
    17ba:	90 95       	com	r25
    17bc:	89 23       	and	r24, r25
    17be:	8c 93       	st	X, r24
		*out |= bit;
    17c0:	88 81       	ld	r24, Y
    17c2:	83 2b       	or	r24, r19
    17c4:	88 83       	st	Y, r24
		SREG = oldSREG;
    17c6:	2f bf       	out	0x3f, r18	; 63
    17c8:	06 c0       	rjmp	.+12     	; 0x17d6 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    17ca:	9f b7       	in	r25, 0x3f	; 63
                cli();
    17cc:	f8 94       	cli
		*reg |= bit;
    17ce:	8c 91       	ld	r24, X
    17d0:	83 2b       	or	r24, r19
    17d2:	8c 93       	st	X, r24
		SREG = oldSREG;
    17d4:	9f bf       	out	0x3f, r25	; 63
	}
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    17dc:	48 2f       	mov	r20, r24
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	ca 01       	movw	r24, r20
    17e2:	82 55       	subi	r24, 0x52	; 82
    17e4:	9f 4f       	sbci	r25, 0xFF	; 255
    17e6:	fc 01       	movw	r30, r24
    17e8:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    17ea:	ca 01       	movw	r24, r20
    17ec:	86 56       	subi	r24, 0x66	; 102
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	fc 01       	movw	r30, r24
    17f2:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    17f4:	4a 57       	subi	r20, 0x7A	; 122
    17f6:	5f 4f       	sbci	r21, 0xFF	; 255
    17f8:	fa 01       	movw	r30, r20
    17fa:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    17fc:	33 23       	and	r19, r19
    17fe:	09 f4       	brne	.+2      	; 0x1802 <digitalWrite+0x26>
    1800:	40 c0       	rjmp	.+128    	; 0x1882 <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1802:	22 23       	and	r18, r18
    1804:	51 f1       	breq	.+84     	; 0x185a <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1806:	23 30       	cpi	r18, 0x03	; 3
    1808:	71 f0       	breq	.+28     	; 0x1826 <digitalWrite+0x4a>
    180a:	24 30       	cpi	r18, 0x04	; 4
    180c:	28 f4       	brcc	.+10     	; 0x1818 <digitalWrite+0x3c>
    180e:	21 30       	cpi	r18, 0x01	; 1
    1810:	a1 f0       	breq	.+40     	; 0x183a <digitalWrite+0x5e>
    1812:	22 30       	cpi	r18, 0x02	; 2
    1814:	11 f5       	brne	.+68     	; 0x185a <digitalWrite+0x7e>
    1816:	14 c0       	rjmp	.+40     	; 0x1840 <digitalWrite+0x64>
    1818:	26 30       	cpi	r18, 0x06	; 6
    181a:	b1 f0       	breq	.+44     	; 0x1848 <digitalWrite+0x6c>
    181c:	27 30       	cpi	r18, 0x07	; 7
    181e:	c1 f0       	breq	.+48     	; 0x1850 <digitalWrite+0x74>
    1820:	24 30       	cpi	r18, 0x04	; 4
    1822:	d9 f4       	brne	.+54     	; 0x185a <digitalWrite+0x7e>
    1824:	04 c0       	rjmp	.+8      	; 0x182e <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1826:	80 91 80 00 	lds	r24, 0x0080
    182a:	8f 77       	andi	r24, 0x7F	; 127
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    182e:	80 91 80 00 	lds	r24, 0x0080
    1832:	8f 7d       	andi	r24, 0xDF	; 223
    1834:	80 93 80 00 	sts	0x0080, r24
    1838:	10 c0       	rjmp	.+32     	; 0x185a <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    183a:	84 b5       	in	r24, 0x24	; 36
    183c:	8f 77       	andi	r24, 0x7F	; 127
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1840:	84 b5       	in	r24, 0x24	; 36
    1842:	8f 7d       	andi	r24, 0xDF	; 223
    1844:	84 bd       	out	0x24, r24	; 36
    1846:	09 c0       	rjmp	.+18     	; 0x185a <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1848:	80 91 b0 00 	lds	r24, 0x00B0
    184c:	8f 77       	andi	r24, 0x7F	; 127
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1850:	80 91 b0 00 	lds	r24, 0x00B0
    1854:	8f 7d       	andi	r24, 0xDF	; 223
    1856:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    185a:	e3 2f       	mov	r30, r19
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	ee 0f       	add	r30, r30
    1860:	ff 1f       	adc	r31, r31
    1862:	ee 58       	subi	r30, 0x8E	; 142
    1864:	ff 4f       	sbci	r31, 0xFF	; 255
    1866:	a5 91       	lpm	r26, Z+
    1868:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    186a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    186c:	f8 94       	cli

	if (val == LOW) {
    186e:	66 23       	and	r22, r22
    1870:	21 f4       	brne	.+8      	; 0x187a <digitalWrite+0x9e>
		*out &= ~bit;
    1872:	8c 91       	ld	r24, X
    1874:	90 95       	com	r25
    1876:	89 23       	and	r24, r25
    1878:	02 c0       	rjmp	.+4      	; 0x187e <digitalWrite+0xa2>
	} else {
		*out |= bit;
    187a:	8c 91       	ld	r24, X
    187c:	89 2b       	or	r24, r25
    187e:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1880:	2f bf       	out	0x3f, r18	; 63
    1882:	08 95       	ret

00001884 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    1884:	68 2f       	mov	r22, r24
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	cb 01       	movw	r24, r22
    188a:	82 55       	subi	r24, 0x52	; 82
    188c:	9f 4f       	sbci	r25, 0xFF	; 255
    188e:	fc 01       	movw	r30, r24
    1890:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1892:	cb 01       	movw	r24, r22
    1894:	86 56       	subi	r24, 0x66	; 102
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	fc 01       	movw	r30, r24
    189a:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    189c:	6a 57       	subi	r22, 0x7A	; 122
    189e:	7f 4f       	sbci	r23, 0xFF	; 255
    18a0:	fb 01       	movw	r30, r22
    18a2:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
    18a4:	99 23       	and	r25, r25
    18a6:	19 f4       	brne	.+6      	; 0x18ae <digitalRead+0x2a>
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3c c0       	rjmp	.+120    	; 0x1926 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18ae:	22 23       	and	r18, r18
    18b0:	51 f1       	breq	.+84     	; 0x1906 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    18b2:	23 30       	cpi	r18, 0x03	; 3
    18b4:	71 f0       	breq	.+28     	; 0x18d2 <digitalRead+0x4e>
    18b6:	24 30       	cpi	r18, 0x04	; 4
    18b8:	28 f4       	brcc	.+10     	; 0x18c4 <digitalRead+0x40>
    18ba:	21 30       	cpi	r18, 0x01	; 1
    18bc:	a1 f0       	breq	.+40     	; 0x18e6 <digitalRead+0x62>
    18be:	22 30       	cpi	r18, 0x02	; 2
    18c0:	11 f5       	brne	.+68     	; 0x1906 <digitalRead+0x82>
    18c2:	14 c0       	rjmp	.+40     	; 0x18ec <digitalRead+0x68>
    18c4:	26 30       	cpi	r18, 0x06	; 6
    18c6:	b1 f0       	breq	.+44     	; 0x18f4 <digitalRead+0x70>
    18c8:	27 30       	cpi	r18, 0x07	; 7
    18ca:	c1 f0       	breq	.+48     	; 0x18fc <digitalRead+0x78>
    18cc:	24 30       	cpi	r18, 0x04	; 4
    18ce:	d9 f4       	brne	.+54     	; 0x1906 <digitalRead+0x82>
    18d0:	04 c0       	rjmp	.+8      	; 0x18da <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    18d2:	80 91 80 00 	lds	r24, 0x0080
    18d6:	8f 77       	andi	r24, 0x7F	; 127
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    18da:	80 91 80 00 	lds	r24, 0x0080
    18de:	8f 7d       	andi	r24, 0xDF	; 223
    18e0:	80 93 80 00 	sts	0x0080, r24
    18e4:	10 c0       	rjmp	.+32     	; 0x1906 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    18e6:	84 b5       	in	r24, 0x24	; 36
    18e8:	8f 77       	andi	r24, 0x7F	; 127
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    18ec:	84 b5       	in	r24, 0x24	; 36
    18ee:	8f 7d       	andi	r24, 0xDF	; 223
    18f0:	84 bd       	out	0x24, r24	; 36
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    18f4:	80 91 b0 00 	lds	r24, 0x00B0
    18f8:	8f 77       	andi	r24, 0x7F	; 127
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    18fc:	80 91 b0 00 	lds	r24, 0x00B0
    1900:	8f 7d       	andi	r24, 0xDF	; 223
    1902:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    1906:	89 2f       	mov	r24, r25
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	84 58       	subi	r24, 0x84	; 132
    1910:	9f 4f       	sbci	r25, 0xFF	; 255
    1912:	fc 01       	movw	r30, r24
    1914:	a5 91       	lpm	r26, Z+
    1916:	b4 91       	lpm	r27, Z
    1918:	8c 91       	ld	r24, X
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	84 23       	and	r24, r20
    1920:	11 f0       	breq	.+4      	; 0x1926 <digitalRead+0xa2>
    1922:	21 e0       	ldi	r18, 0x01	; 1
    1924:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    1926:	c9 01       	movw	r24, r18
    1928:	08 95       	ret

0000192a <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    192a:	08 95       	ret

0000192c <__vector_18>:
    192c:	1f 92       	push	r1
    192e:	0f 92       	push	r0
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	0f 92       	push	r0
    1934:	11 24       	eor	r1, r1
    1936:	2f 93       	push	r18
    1938:	3f 93       	push	r19
    193a:	4f 93       	push	r20
    193c:	8f 93       	push	r24
    193e:	9f 93       	push	r25
    1940:	ef 93       	push	r30
    1942:	ff 93       	push	r31
    1944:	80 91 c0 00 	lds	r24, 0x00C0
    1948:	82 fd       	sbrc	r24, 2
    194a:	1d c0       	rjmp	.+58     	; 0x1986 <__vector_18+0x5a>
    194c:	40 91 c6 00 	lds	r20, 0x00C6
    1950:	20 91 7f 03 	lds	r18, 0x037F
    1954:	30 91 80 03 	lds	r19, 0x0380
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	2f 73       	andi	r18, 0x3F	; 63
    195e:	30 70       	andi	r19, 0x00	; 0
    1960:	80 91 81 03 	lds	r24, 0x0381
    1964:	90 91 82 03 	lds	r25, 0x0382
    1968:	28 17       	cp	r18, r24
    196a:	39 07       	cpc	r19, r25
    196c:	71 f0       	breq	.+28     	; 0x198a <__vector_18+0x5e>
    196e:	e0 91 7f 03 	lds	r30, 0x037F
    1972:	f0 91 80 03 	lds	r31, 0x0380
    1976:	e1 5c       	subi	r30, 0xC1	; 193
    1978:	fc 4f       	sbci	r31, 0xFC	; 252
    197a:	40 83       	st	Z, r20
    197c:	30 93 80 03 	sts	0x0380, r19
    1980:	20 93 7f 03 	sts	0x037F, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <__vector_18+0x5e>
    1986:	80 91 c6 00 	lds	r24, 0x00C6
    198a:	ff 91       	pop	r31
    198c:	ef 91       	pop	r30
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	4f 91       	pop	r20
    1994:	3f 91       	pop	r19
    1996:	2f 91       	pop	r18
    1998:	0f 90       	pop	r0
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	0f 90       	pop	r0
    199e:	1f 90       	pop	r1
    19a0:	18 95       	reti

000019a2 <_Z14serialEventRunv>:
    19a2:	e0 91 d3 03 	lds	r30, 0x03D3
    19a6:	f0 91 d4 03 	lds	r31, 0x03D4
    19aa:	e0 5c       	subi	r30, 0xC0	; 192
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	81 91       	ld	r24, Z+
    19b0:	91 91       	ld	r25, Z+
    19b2:	20 81       	ld	r18, Z
    19b4:	31 81       	ldd	r19, Z+1	; 0x01
    19b6:	82 1b       	sub	r24, r18
    19b8:	93 0b       	sbc	r25, r19
    19ba:	8f 73       	andi	r24, 0x3F	; 63
    19bc:	90 70       	andi	r25, 0x00	; 0
    19be:	89 2b       	or	r24, r25
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <_Z14serialEventRunv+0x24>
    19c2:	0e 94 95 0c 	call	0x192a	; 0x192a <_Z11serialEventv>
    19c6:	08 95       	ret

000019c8 <__vector_19>:
    19c8:	1f 92       	push	r1
    19ca:	0f 92       	push	r0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	2f 93       	push	r18
    19d4:	3f 93       	push	r19
    19d6:	8f 93       	push	r24
    19d8:	9f 93       	push	r25
    19da:	ef 93       	push	r30
    19dc:	ff 93       	push	r31
    19de:	20 91 c3 03 	lds	r18, 0x03C3
    19e2:	30 91 c4 03 	lds	r19, 0x03C4
    19e6:	80 91 c5 03 	lds	r24, 0x03C5
    19ea:	90 91 c6 03 	lds	r25, 0x03C6
    19ee:	28 17       	cp	r18, r24
    19f0:	39 07       	cpc	r19, r25
    19f2:	31 f4       	brne	.+12     	; 0x1a00 <__vector_19+0x38>
    19f4:	80 91 c1 00 	lds	r24, 0x00C1
    19f8:	8f 7d       	andi	r24, 0xDF	; 223
    19fa:	80 93 c1 00 	sts	0x00C1, r24
    19fe:	14 c0       	rjmp	.+40     	; 0x1a28 <__vector_19+0x60>
    1a00:	e0 91 c5 03 	lds	r30, 0x03C5
    1a04:	f0 91 c6 03 	lds	r31, 0x03C6
    1a08:	ed 57       	subi	r30, 0x7D	; 125
    1a0a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a0c:	20 81       	ld	r18, Z
    1a0e:	80 91 c5 03 	lds	r24, 0x03C5
    1a12:	90 91 c6 03 	lds	r25, 0x03C6
    1a16:	01 96       	adiw	r24, 0x01	; 1
    1a18:	8f 73       	andi	r24, 0x3F	; 63
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	90 93 c6 03 	sts	0x03C6, r25
    1a20:	80 93 c5 03 	sts	0x03C5, r24
    1a24:	20 93 c6 00 	sts	0x00C6, r18
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	3f 91       	pop	r19
    1a32:	2f 91       	pop	r18
    1a34:	0f 90       	pop	r0
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	0f 90       	pop	r0
    1a3a:	1f 90       	pop	r1
    1a3c:	18 95       	reti

00001a3e <_ZN14HardwareSerial5beginEm>:
    1a3e:	af 92       	push	r10
    1a40:	bf 92       	push	r11
    1a42:	df 92       	push	r13
    1a44:	ef 92       	push	r14
    1a46:	ff 92       	push	r15
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	ec 01       	movw	r28, r24
    1a52:	7a 01       	movw	r14, r20
    1a54:	8b 01       	movw	r16, r22
    1a56:	dd 24       	eor	r13, r13
    1a58:	40 30       	cpi	r20, 0x00	; 0
    1a5a:	81 ee       	ldi	r24, 0xE1	; 225
    1a5c:	58 07       	cpc	r21, r24
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	68 07       	cpc	r22, r24
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	78 07       	cpc	r23, r24
    1a66:	11 f0       	breq	.+4      	; 0x1a6c <_ZN14HardwareSerial5beginEm+0x2e>
    1a68:	dd 24       	eor	r13, r13
    1a6a:	d3 94       	inc	r13
    1a6c:	91 e0       	ldi	r25, 0x01	; 1
    1a6e:	a9 2e       	mov	r10, r25
    1a70:	b1 2c       	mov	r11, r1
    1a72:	ec 89       	ldd	r30, Y+20	; 0x14
    1a74:	fd 89       	ldd	r31, Y+21	; 0x15
    1a76:	dd 20       	and	r13, r13
    1a78:	69 f0       	breq	.+26     	; 0x1a94 <_ZN14HardwareSerial5beginEm+0x56>
    1a7a:	c5 01       	movw	r24, r10
    1a7c:	08 a0       	lds	r16, 0x88
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <_ZN14HardwareSerial5beginEm+0x46>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <_ZN14HardwareSerial5beginEm+0x42>
    1a88:	80 83       	st	Z, r24
    1a8a:	60 e0       	ldi	r22, 0x00	; 0
    1a8c:	79 e0       	ldi	r23, 0x09	; 9
    1a8e:	8d e3       	ldi	r24, 0x3D	; 61
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	05 c0       	rjmp	.+10     	; 0x1a9e <_ZN14HardwareSerial5beginEm+0x60>
    1a94:	10 82       	st	Z, r1
    1a96:	60 e8       	ldi	r22, 0x80	; 128
    1a98:	74 e8       	ldi	r23, 0x84	; 132
    1a9a:	8e e1       	ldi	r24, 0x1E	; 30
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a8 01       	movw	r20, r16
    1aa0:	97 01       	movw	r18, r14
    1aa2:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodsi4>
    1aa6:	21 50       	subi	r18, 0x01	; 1
    1aa8:	30 40       	sbci	r19, 0x00	; 0
    1aaa:	40 40       	sbci	r20, 0x00	; 0
    1aac:	50 40       	sbci	r21, 0x00	; 0
    1aae:	56 95       	lsr	r21
    1ab0:	47 95       	ror	r20
    1ab2:	37 95       	ror	r19
    1ab4:	27 95       	ror	r18
    1ab6:	80 e1       	ldi	r24, 0x10	; 16
    1ab8:	20 30       	cpi	r18, 0x00	; 0
    1aba:	38 07       	cpc	r19, r24
    1abc:	20 f0       	brcs	.+8      	; 0x1ac6 <_ZN14HardwareSerial5beginEm+0x88>
    1abe:	dd 20       	and	r13, r13
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <_ZN14HardwareSerial5beginEm+0x88>
    1ac2:	dd 24       	eor	r13, r13
    1ac4:	d6 cf       	rjmp	.-84     	; 0x1a72 <_ZN14HardwareSerial5beginEm+0x34>
    1ac6:	e8 89       	ldd	r30, Y+16	; 0x10
    1ac8:	f9 89       	ldd	r31, Y+17	; 0x11
    1aca:	30 83       	st	Z, r19
    1acc:	ea 89       	ldd	r30, Y+18	; 0x12
    1ace:	fb 89       	ldd	r31, Y+19	; 0x13
    1ad0:	20 83       	st	Z, r18
    1ad2:	19 a2       	lds	r17, 0x99
    1ad4:	ee 89       	ldd	r30, Y+22	; 0x16
    1ad6:	ff 89       	ldd	r31, Y+23	; 0x17
    1ad8:	40 81       	ld	r20, Z
    1ada:	21 e0       	ldi	r18, 0x01	; 1
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	c9 01       	movw	r24, r18
    1ae0:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <_ZN14HardwareSerial5beginEm+0xaa>
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	0a 94       	dec	r0
    1aea:	e2 f7       	brpl	.-8      	; 0x1ae4 <_ZN14HardwareSerial5beginEm+0xa6>
    1aec:	48 2b       	or	r20, r24
    1aee:	40 83       	st	Z, r20
    1af0:	ee 89       	ldd	r30, Y+22	; 0x16
    1af2:	ff 89       	ldd	r31, Y+23	; 0x17
    1af4:	40 81       	ld	r20, Z
    1af6:	c9 01       	movw	r24, r18
    1af8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <_ZN14HardwareSerial5beginEm+0xc2>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <_ZN14HardwareSerial5beginEm+0xbe>
    1b04:	48 2b       	or	r20, r24
    1b06:	40 83       	st	Z, r20
    1b08:	ee 89       	ldd	r30, Y+22	; 0x16
    1b0a:	ff 89       	ldd	r31, Y+23	; 0x17
    1b0c:	40 81       	ld	r20, Z
    1b0e:	c9 01       	movw	r24, r18
    1b10:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <_ZN14HardwareSerial5beginEm+0xda>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <_ZN14HardwareSerial5beginEm+0xd6>
    1b1c:	48 2b       	or	r20, r24
    1b1e:	40 83       	st	Z, r20
    1b20:	ee 89       	ldd	r30, Y+22	; 0x16
    1b22:	ff 89       	ldd	r31, Y+23	; 0x17
    1b24:	80 81       	ld	r24, Z
    1b26:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <_ZN14HardwareSerial5beginEm+0xf0>
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <_ZN14HardwareSerial5beginEm+0xec>
    1b32:	20 95       	com	r18
    1b34:	28 23       	and	r18, r24
    1b36:	20 83       	st	Z, r18
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	bf 90       	pop	r11
    1b48:	af 90       	pop	r10
    1b4a:	08 95       	ret

00001b4c <_ZN14HardwareSerial9availableEv>:
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	1c 96       	adiw	r26, 0x0c	; 12
    1b50:	ed 91       	ld	r30, X+
    1b52:	fc 91       	ld	r31, X
    1b54:	1d 97       	sbiw	r26, 0x0d	; 13
    1b56:	e0 5c       	subi	r30, 0xC0	; 192
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	21 91       	ld	r18, Z+
    1b5c:	31 91       	ld	r19, Z+
    1b5e:	80 81       	ld	r24, Z
    1b60:	91 81       	ldd	r25, Z+1	; 0x01
    1b62:	28 1b       	sub	r18, r24
    1b64:	39 0b       	sbc	r19, r25
    1b66:	2f 73       	andi	r18, 0x3F	; 63
    1b68:	30 70       	andi	r19, 0x00	; 0
    1b6a:	c9 01       	movw	r24, r18
    1b6c:	08 95       	ret

00001b6e <_ZN14HardwareSerial4peekEv>:
    1b6e:	dc 01       	movw	r26, r24
    1b70:	1c 96       	adiw	r26, 0x0c	; 12
    1b72:	ed 91       	ld	r30, X+
    1b74:	fc 91       	ld	r31, X
    1b76:	1d 97       	sbiw	r26, 0x0d	; 13
    1b78:	e0 5c       	subi	r30, 0xC0	; 192
    1b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7c:	20 81       	ld	r18, Z
    1b7e:	31 81       	ldd	r19, Z+1	; 0x01
    1b80:	e0 54       	subi	r30, 0x40	; 64
    1b82:	f0 40       	sbci	r31, 0x00	; 0
    1b84:	df 01       	movw	r26, r30
    1b86:	ae 5b       	subi	r26, 0xBE	; 190
    1b88:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8a:	8d 91       	ld	r24, X+
    1b8c:	9c 91       	ld	r25, X
    1b8e:	11 97       	sbiw	r26, 0x01	; 1
    1b90:	28 17       	cp	r18, r24
    1b92:	39 07       	cpc	r19, r25
    1b94:	19 f4       	brne	.+6      	; 0x1b9c <_ZN14HardwareSerial4peekEv+0x2e>
    1b96:	2f ef       	ldi	r18, 0xFF	; 255
    1b98:	3f ef       	ldi	r19, 0xFF	; 255
    1b9a:	07 c0       	rjmp	.+14     	; 0x1baa <_ZN14HardwareSerial4peekEv+0x3c>
    1b9c:	8d 91       	ld	r24, X+
    1b9e:	9c 91       	ld	r25, X
    1ba0:	e8 0f       	add	r30, r24
    1ba2:	f9 1f       	adc	r31, r25
    1ba4:	80 81       	ld	r24, Z
    1ba6:	28 2f       	mov	r18, r24
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	c9 01       	movw	r24, r18
    1bac:	08 95       	ret

00001bae <_ZN14HardwareSerial4readEv>:
    1bae:	dc 01       	movw	r26, r24
    1bb0:	1c 96       	adiw	r26, 0x0c	; 12
    1bb2:	ed 91       	ld	r30, X+
    1bb4:	fc 91       	ld	r31, X
    1bb6:	1d 97       	sbiw	r26, 0x0d	; 13
    1bb8:	e0 5c       	subi	r30, 0xC0	; 192
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	20 81       	ld	r18, Z
    1bbe:	31 81       	ldd	r19, Z+1	; 0x01
    1bc0:	e0 54       	subi	r30, 0x40	; 64
    1bc2:	f0 40       	sbci	r31, 0x00	; 0
    1bc4:	df 01       	movw	r26, r30
    1bc6:	ae 5b       	subi	r26, 0xBE	; 190
    1bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bca:	8d 91       	ld	r24, X+
    1bcc:	9c 91       	ld	r25, X
    1bce:	11 97       	sbiw	r26, 0x01	; 1
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	19 f4       	brne	.+6      	; 0x1bdc <_ZN14HardwareSerial4readEv+0x2e>
    1bd6:	2f ef       	ldi	r18, 0xFF	; 255
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	10 c0       	rjmp	.+32     	; 0x1bfc <_ZN14HardwareSerial4readEv+0x4e>
    1bdc:	8d 91       	ld	r24, X+
    1bde:	9c 91       	ld	r25, X
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	e8 0f       	add	r30, r24
    1be4:	f9 1f       	adc	r31, r25
    1be6:	20 81       	ld	r18, Z
    1be8:	8d 91       	ld	r24, X+
    1bea:	9c 91       	ld	r25, X
    1bec:	11 97       	sbiw	r26, 0x01	; 1
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	8f 73       	andi	r24, 0x3F	; 63
    1bf2:	90 70       	andi	r25, 0x00	; 0
    1bf4:	11 96       	adiw	r26, 0x01	; 1
    1bf6:	9c 93       	st	X, r25
    1bf8:	8e 93       	st	-X, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	c9 01       	movw	r24, r18
    1bfe:	08 95       	ret

00001c00 <_ZN14HardwareSerial5flushEv>:
    1c00:	dc 01       	movw	r26, r24
    1c02:	91 96       	adiw	r26, 0x21	; 33
    1c04:	8c 91       	ld	r24, X
    1c06:	91 97       	sbiw	r26, 0x21	; 33
    1c08:	88 23       	and	r24, r24
    1c0a:	39 f0       	breq	.+14     	; 0x1c1a <_ZN14HardwareSerial5flushEv+0x1a>
    1c0c:	54 96       	adiw	r26, 0x14	; 20
    1c0e:	ed 91       	ld	r30, X+
    1c10:	fc 91       	ld	r31, X
    1c12:	55 97       	sbiw	r26, 0x15	; 21
    1c14:	80 81       	ld	r24, Z
    1c16:	86 ff       	sbrs	r24, 6
    1c18:	f9 cf       	rjmp	.-14     	; 0x1c0c <_ZN14HardwareSerial5flushEv+0xc>
    1c1a:	91 96       	adiw	r26, 0x21	; 33
    1c1c:	1c 92       	st	X, r1
    1c1e:	08 95       	ret

00001c20 <_ZN14HardwareSerial5writeEh>:
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	ec 01       	movw	r28, r24
    1c26:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c28:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c2a:	e0 5c       	subi	r30, 0xC0	; 192
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	20 81       	ld	r18, Z
    1c30:	31 81       	ldd	r19, Z+1	; 0x01
    1c32:	e0 54       	subi	r30, 0x40	; 64
    1c34:	f0 40       	sbci	r31, 0x00	; 0
    1c36:	2f 5f       	subi	r18, 0xFF	; 255
    1c38:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3a:	2f 73       	andi	r18, 0x3F	; 63
    1c3c:	30 70       	andi	r19, 0x00	; 0
    1c3e:	df 01       	movw	r26, r30
    1c40:	ae 5b       	subi	r26, 0xBE	; 190
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	8d 91       	ld	r24, X+
    1c46:	9c 91       	ld	r25, X
    1c48:	11 97       	sbiw	r26, 0x01	; 1
    1c4a:	28 17       	cp	r18, r24
    1c4c:	39 07       	cpc	r19, r25
    1c4e:	d1 f3       	breq	.-12     	; 0x1c44 <_ZN14HardwareSerial5writeEh+0x24>
    1c50:	e0 5c       	subi	r30, 0xC0	; 192
    1c52:	ff 4f       	sbci	r31, 0xFF	; 255
    1c54:	80 81       	ld	r24, Z
    1c56:	91 81       	ldd	r25, Z+1	; 0x01
    1c58:	e0 54       	subi	r30, 0x40	; 64
    1c5a:	f0 40       	sbci	r31, 0x00	; 0
    1c5c:	e8 0f       	add	r30, r24
    1c5e:	f9 1f       	adc	r31, r25
    1c60:	60 83       	st	Z, r22
    1c62:	ee 85       	ldd	r30, Y+14	; 0x0e
    1c64:	ff 85       	ldd	r31, Y+15	; 0x0f
    1c66:	e0 5c       	subi	r30, 0xC0	; 192
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	31 83       	std	Z+1, r19	; 0x01
    1c6c:	20 83       	st	Z, r18
    1c6e:	ee 89       	ldd	r30, Y+22	; 0x16
    1c70:	ff 89       	ldd	r31, Y+23	; 0x17
    1c72:	20 81       	ld	r18, Z
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0f 8c       	ldd	r0, Y+31	; 0x1f
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <_ZN14HardwareSerial5writeEh+0x60>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <_ZN14HardwareSerial5writeEh+0x5c>
    1c84:	28 2b       	or	r18, r24
    1c86:	20 83       	st	Z, r18
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	89 a3       	lds	r24, 0x59
    1c8c:	ec 89       	ldd	r30, Y+20	; 0x14
    1c8e:	fd 89       	ldd	r31, Y+21	; 0x15
    1c90:	80 81       	ld	r24, Z
    1c92:	80 64       	ori	r24, 0x40	; 64
    1c94:	80 83       	st	Z, r24
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	df 91       	pop	r29
    1c9c:	cf 91       	pop	r28
    1c9e:	08 95       	ret

00001ca0 <_GLOBAL__I_rx_buffer>:
    1ca0:	10 92 ca 03 	sts	0x03CA, r1
    1ca4:	10 92 c9 03 	sts	0x03C9, r1
    1ca8:	88 ee       	ldi	r24, 0xE8	; 232
    1caa:	93 e0       	ldi	r25, 0x03	; 3
    1cac:	a0 e0       	ldi	r26, 0x00	; 0
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	80 93 cb 03 	sts	0x03CB, r24
    1cb4:	90 93 cc 03 	sts	0x03CC, r25
    1cb8:	a0 93 cd 03 	sts	0x03CD, r26
    1cbc:	b0 93 ce 03 	sts	0x03CE, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1cc0:	86 ec       	ldi	r24, 0xC6	; 198
    1cc2:	92 e0       	ldi	r25, 0x02	; 2
    1cc4:	90 93 c8 03 	sts	0x03C8, r25
    1cc8:	80 93 c7 03 	sts	0x03C7, r24
{
  _rx_buffer = rx_buffer;
    1ccc:	8f e3       	ldi	r24, 0x3F	; 63
    1cce:	93 e0       	ldi	r25, 0x03	; 3
    1cd0:	90 93 d4 03 	sts	0x03D4, r25
    1cd4:	80 93 d3 03 	sts	0x03D3, r24
  _tx_buffer = tx_buffer;
    1cd8:	83 e8       	ldi	r24, 0x83	; 131
    1cda:	93 e0       	ldi	r25, 0x03	; 3
    1cdc:	90 93 d6 03 	sts	0x03D6, r25
    1ce0:	80 93 d5 03 	sts	0x03D5, r24
  _ubrrh = ubrrh;
    1ce4:	85 ec       	ldi	r24, 0xC5	; 197
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	90 93 d8 03 	sts	0x03D8, r25
    1cec:	80 93 d7 03 	sts	0x03D7, r24
  _ubrrl = ubrrl;
    1cf0:	84 ec       	ldi	r24, 0xC4	; 196
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	90 93 da 03 	sts	0x03DA, r25
    1cf8:	80 93 d9 03 	sts	0x03D9, r24
  _ucsra = ucsra;
    1cfc:	80 ec       	ldi	r24, 0xC0	; 192
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	90 93 dc 03 	sts	0x03DC, r25
    1d04:	80 93 db 03 	sts	0x03DB, r24
  _ucsrb = ucsrb;
    1d08:	81 ec       	ldi	r24, 0xC1	; 193
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	90 93 de 03 	sts	0x03DE, r25
    1d10:	80 93 dd 03 	sts	0x03DD, r24
  _ucsrc = ucsrc;
    1d14:	82 ec       	ldi	r24, 0xC2	; 194
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	90 93 e0 03 	sts	0x03E0, r25
    1d1c:	80 93 df 03 	sts	0x03DF, r24
  _udr = udr;
    1d20:	86 ec       	ldi	r24, 0xC6	; 198
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	90 93 e2 03 	sts	0x03E2, r25
    1d28:	80 93 e1 03 	sts	0x03E1, r24
  _rxen = rxen;
    1d2c:	84 e0       	ldi	r24, 0x04	; 4
    1d2e:	80 93 e3 03 	sts	0x03E3, r24
  _txen = txen;
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	80 93 e4 03 	sts	0x03E4, r24
  _rxcie = rxcie;
    1d38:	87 e0       	ldi	r24, 0x07	; 7
    1d3a:	80 93 e5 03 	sts	0x03E5, r24
  _udrie = udrie;
    1d3e:	85 e0       	ldi	r24, 0x05	; 5
    1d40:	80 93 e6 03 	sts	0x03E6, r24
  _u2x = u2x;
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	80 93 e7 03 	sts	0x03E7, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1d4a:	08 95       	ret

00001d4c <main>:
#include <Arduino.h>

int main(void)
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
{
	init();
    1d50:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    1d54:	0e 94 8d 00 	call	0x11a	; 0x11a <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    1d58:	c1 ed       	ldi	r28, 0xD1	; 209
    1d5a:	dc e0       	ldi	r29, 0x0C	; 12
#endif
	
	setup();
    
	for (;;) {
		loop();
    1d5c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <loop>
		if (serialEventRun) serialEventRun();
    1d60:	20 97       	sbiw	r28, 0x00	; 0
    1d62:	e1 f3       	breq	.-8      	; 0x1d5c <main+0x10>
    1d64:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_Z14serialEventRunv>
    1d68:	f9 cf       	rjmp	.-14     	; 0x1d5c <main+0x10>

00001d6a <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    1d6a:	cf 92       	push	r12
    1d6c:	df 92       	push	r13
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	6b 01       	movw	r12, r22
    1d7e:	8a 01       	movw	r16, r20
    1d80:	c0 e0       	ldi	r28, 0x00	; 0
    1d82:	d0 e0       	ldi	r29, 0x00	; 0
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <_ZN5Print5writeEPKhj+0x3a>
    1d86:	d6 01       	movw	r26, r12
    1d88:	6d 91       	ld	r22, X+
    1d8a:	6d 01       	movw	r12, r26
    1d8c:	d7 01       	movw	r26, r14
    1d8e:	ed 91       	ld	r30, X+
    1d90:	fc 91       	ld	r31, X
    1d92:	01 90       	ld	r0, Z+
    1d94:	f0 81       	ld	r31, Z
    1d96:	e0 2d       	mov	r30, r0
    1d98:	c7 01       	movw	r24, r14
    1d9a:	09 95       	icall
    1d9c:	c8 0f       	add	r28, r24
    1d9e:	d9 1f       	adc	r29, r25
    1da0:	01 50       	subi	r16, 0x01	; 1
    1da2:	10 40       	sbci	r17, 0x00	; 0
    1da4:	01 15       	cp	r16, r1
    1da6:	11 05       	cpc	r17, r1
    1da8:	71 f7       	brne	.-36     	; 0x1d86 <_ZN5Print5writeEPKhj+0x1c>
    1daa:	ce 01       	movw	r24, r28
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	ff 90       	pop	r15
    1db6:	ef 90       	pop	r14
    1db8:	df 90       	pop	r13
    1dba:	cf 90       	pop	r12
    1dbc:	08 95       	ret

00001dbe <_ZN5Print7printlnEv>:
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
    1dc6:	8c 01       	movw	r16, r24
    1dc8:	dc 01       	movw	r26, r24
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	01 90       	ld	r0, Z+
    1dd0:	f0 81       	ld	r31, Z
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	6d e0       	ldi	r22, 0x0D	; 13
    1dd6:	09 95       	icall
    1dd8:	7c 01       	movw	r14, r24
    1dda:	d8 01       	movw	r26, r16
    1ddc:	ed 91       	ld	r30, X+
    1dde:	fc 91       	ld	r31, X
    1de0:	01 90       	ld	r0, Z+
    1de2:	f0 81       	ld	r31, Z
    1de4:	e0 2d       	mov	r30, r0
    1de6:	c8 01       	movw	r24, r16
    1de8:	6a e0       	ldi	r22, 0x0A	; 10
    1dea:	09 95       	icall
    1dec:	9c 01       	movw	r18, r24
    1dee:	2e 0d       	add	r18, r14
    1df0:	3f 1d       	adc	r19, r15
    1df2:	c9 01       	movw	r24, r18
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	08 95       	ret

00001dfe <_ZN5Print5writeEPKc>:
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	ec 01       	movw	r28, r24
    1e04:	61 15       	cp	r22, r1
    1e06:	71 05       	cpc	r23, r1
    1e08:	19 f4       	brne	.+6      	; 0x1e10 <_ZN5Print5writeEPKc+0x12>
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	0f c0       	rjmp	.+30     	; 0x1e2e <_ZN5Print5writeEPKc+0x30>
    1e10:	db 01       	movw	r26, r22
    1e12:	0d 90       	ld	r0, X+
    1e14:	00 20       	and	r0, r0
    1e16:	e9 f7       	brne	.-6      	; 0x1e12 <_ZN5Print5writeEPKc+0x14>
    1e18:	11 97       	sbiw	r26, 0x01	; 1
    1e1a:	a6 1b       	sub	r26, r22
    1e1c:	b7 0b       	sbc	r27, r23
    1e1e:	e8 81       	ld	r30, Y
    1e20:	f9 81       	ldd	r31, Y+1	; 0x01
    1e22:	02 80       	ldd	r0, Z+2	; 0x02
    1e24:	f3 81       	ldd	r31, Z+3	; 0x03
    1e26:	e0 2d       	mov	r30, r0
    1e28:	ad 01       	movw	r20, r26
    1e2a:	09 95       	icall
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	c9 01       	movw	r24, r18
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	08 95       	ret

00001e36 <_ZN5Print11printNumberEmh>:
    1e36:	4f 92       	push	r4
    1e38:	5f 92       	push	r5
    1e3a:	7f 92       	push	r7
    1e3c:	8f 92       	push	r8
    1e3e:	9f 92       	push	r9
    1e40:	af 92       	push	r10
    1e42:	bf 92       	push	r11
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
    1e58:	a1 97       	sbiw	r28, 0x21	; 33
    1e5a:	0f b6       	in	r0, 0x3f	; 63
    1e5c:	f8 94       	cli
    1e5e:	de bf       	out	0x3e, r29	; 62
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	cd bf       	out	0x3d, r28	; 61
    1e64:	2c 01       	movw	r4, r24
    1e66:	74 2e       	mov	r7, r20
    1e68:	cb 01       	movw	r24, r22
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	08 f4       	brcc	.+2      	; 0x1e70 <_ZN5Print11printNumberEmh+0x3a>
    1e6e:	2a e0       	ldi	r18, 0x0A	; 10
    1e70:	19 a2       	lds	r17, 0x99
    1e72:	31 e2       	ldi	r19, 0x21	; 33
    1e74:	c3 2e       	mov	r12, r19
    1e76:	d1 2c       	mov	r13, r1
    1e78:	cc 0e       	add	r12, r28
    1e7a:	dd 1e       	adc	r13, r29
    1e7c:	82 2e       	mov	r8, r18
    1e7e:	99 24       	eor	r9, r9
    1e80:	aa 24       	eor	r10, r10
    1e82:	bb 24       	eor	r11, r11
    1e84:	67 2d       	mov	r22, r7
    1e86:	75 2f       	mov	r23, r21
    1e88:	a5 01       	movw	r20, r10
    1e8a:	94 01       	movw	r18, r8
    1e8c:	0e 94 86 13 	call	0x270c	; 0x270c <__udivmodsi4>
    1e90:	79 01       	movw	r14, r18
    1e92:	8a 01       	movw	r16, r20
    1e94:	c8 01       	movw	r24, r16
    1e96:	b7 01       	movw	r22, r14
    1e98:	a5 01       	movw	r20, r10
    1e9a:	94 01       	movw	r18, r8
    1e9c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__mulsi3>
    1ea0:	47 2d       	mov	r20, r7
    1ea2:	46 1b       	sub	r20, r22
    1ea4:	08 94       	sec
    1ea6:	c1 08       	sbc	r12, r1
    1ea8:	d1 08       	sbc	r13, r1
    1eaa:	4a 30       	cpi	r20, 0x0A	; 10
    1eac:	14 f4       	brge	.+4      	; 0x1eb2 <_ZN5Print11printNumberEmh+0x7c>
    1eae:	40 5d       	subi	r20, 0xD0	; 208
    1eb0:	01 c0       	rjmp	.+2      	; 0x1eb4 <_ZN5Print11printNumberEmh+0x7e>
    1eb2:	49 5c       	subi	r20, 0xC9	; 201
    1eb4:	f6 01       	movw	r30, r12
    1eb6:	40 83       	st	Z, r20
    1eb8:	e1 14       	cp	r14, r1
    1eba:	f1 04       	cpc	r15, r1
    1ebc:	01 05       	cpc	r16, r1
    1ebe:	11 05       	cpc	r17, r1
    1ec0:	21 f0       	breq	.+8      	; 0x1eca <_ZN5Print11printNumberEmh+0x94>
    1ec2:	7e 2c       	mov	r7, r14
    1ec4:	5f 2d       	mov	r21, r15
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	dd cf       	rjmp	.-70     	; 0x1e84 <_ZN5Print11printNumberEmh+0x4e>
    1eca:	c2 01       	movw	r24, r4
    1ecc:	b6 01       	movw	r22, r12
    1ece:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN5Print5writeEPKc>
    1ed2:	a1 96       	adiw	r28, 0x21	; 33
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	df 90       	pop	r13
    1eec:	cf 90       	pop	r12
    1eee:	bf 90       	pop	r11
    1ef0:	af 90       	pop	r10
    1ef2:	9f 90       	pop	r9
    1ef4:	8f 90       	pop	r8
    1ef6:	7f 90       	pop	r7
    1ef8:	5f 90       	pop	r5
    1efa:	4f 90       	pop	r4
    1efc:	08 95       	ret

00001efe <_ZN5Print5printEmi>:
    1efe:	dc 01       	movw	r26, r24
    1f00:	21 15       	cp	r18, r1
    1f02:	31 05       	cpc	r19, r1
    1f04:	41 f4       	brne	.+16     	; 0x1f16 <_ZN5Print5printEmi+0x18>
    1f06:	ed 91       	ld	r30, X+
    1f08:	fc 91       	ld	r31, X
    1f0a:	01 90       	ld	r0, Z+
    1f0c:	f0 81       	ld	r31, Z
    1f0e:	e0 2d       	mov	r30, r0
    1f10:	64 2f       	mov	r22, r20
    1f12:	09 95       	icall
    1f14:	08 95       	ret
    1f16:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <_ZN5Print11printNumberEmh>
    1f1a:	08 95       	ret

00001f1c <_ZN5Print5printEhi>:
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	9a 01       	movw	r18, r20
    1f26:	e6 2e       	mov	r14, r22
    1f28:	ff 24       	eor	r15, r15
    1f2a:	00 e0       	ldi	r16, 0x00	; 0
    1f2c:	10 e0       	ldi	r17, 0x00	; 0
    1f2e:	b8 01       	movw	r22, r16
    1f30:	a7 01       	movw	r20, r14
    1f32:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN5Print5printEmi>
    1f36:	1f 91       	pop	r17
    1f38:	0f 91       	pop	r16
    1f3a:	ff 90       	pop	r15
    1f3c:	ef 90       	pop	r14
    1f3e:	08 95       	ret

00001f40 <_ZN5Print7printlnEhi>:
    1f40:	cf 92       	push	r12
    1f42:	df 92       	push	r13
    1f44:	ef 92       	push	r14
    1f46:	ff 92       	push	r15
    1f48:	0f 93       	push	r16
    1f4a:	1f 93       	push	r17
    1f4c:	6c 01       	movw	r12, r24
    1f4e:	e6 2e       	mov	r14, r22
    1f50:	9a 01       	movw	r18, r20
    1f52:	ff 24       	eor	r15, r15
    1f54:	00 e0       	ldi	r16, 0x00	; 0
    1f56:	10 e0       	ldi	r17, 0x00	; 0
    1f58:	b8 01       	movw	r22, r16
    1f5a:	a7 01       	movw	r20, r14
    1f5c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <_ZN5Print5printEmi>
    1f60:	8c 01       	movw	r16, r24
    1f62:	c6 01       	movw	r24, r12
    1f64:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN5Print7printlnEv>
    1f68:	08 0f       	add	r16, r24
    1f6a:	19 1f       	adc	r17, r25
    1f6c:	c8 01       	movw	r24, r16
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	08 95       	ret

00001f7c <_ZN5Print5printEli>:
    1f7c:	cf 92       	push	r12
    1f7e:	df 92       	push	r13
    1f80:	ef 92       	push	r14
    1f82:	ff 92       	push	r15
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	ec 01       	movw	r28, r24
    1f8e:	6a 01       	movw	r12, r20
    1f90:	7b 01       	movw	r14, r22
    1f92:	21 15       	cp	r18, r1
    1f94:	31 05       	cpc	r19, r1
    1f96:	41 f4       	brne	.+16     	; 0x1fa8 <_ZN5Print5printEli+0x2c>
    1f98:	e8 81       	ld	r30, Y
    1f9a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	f0 81       	ld	r31, Z
    1fa0:	e0 2d       	mov	r30, r0
    1fa2:	64 2f       	mov	r22, r20
    1fa4:	09 95       	icall
    1fa6:	1f c0       	rjmp	.+62     	; 0x1fe6 <_ZN5Print5printEli+0x6a>
    1fa8:	2a 30       	cpi	r18, 0x0A	; 10
    1faa:	31 05       	cpc	r19, r1
    1fac:	d1 f4       	brne	.+52     	; 0x1fe2 <_ZN5Print5printEli+0x66>
    1fae:	77 ff       	sbrs	r23, 7
    1fb0:	17 c0       	rjmp	.+46     	; 0x1fe0 <_ZN5Print5printEli+0x64>
    1fb2:	e8 81       	ld	r30, Y
    1fb4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb6:	01 90       	ld	r0, Z+
    1fb8:	f0 81       	ld	r31, Z
    1fba:	e0 2d       	mov	r30, r0
    1fbc:	6d e2       	ldi	r22, 0x2D	; 45
    1fbe:	09 95       	icall
    1fc0:	8c 01       	movw	r16, r24
    1fc2:	44 27       	eor	r20, r20
    1fc4:	55 27       	eor	r21, r21
    1fc6:	ba 01       	movw	r22, r20
    1fc8:	4c 19       	sub	r20, r12
    1fca:	5d 09       	sbc	r21, r13
    1fcc:	6e 09       	sbc	r22, r14
    1fce:	7f 09       	sbc	r23, r15
    1fd0:	ce 01       	movw	r24, r28
    1fd2:	2a e0       	ldi	r18, 0x0A	; 10
    1fd4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <_ZN5Print11printNumberEmh>
    1fd8:	98 01       	movw	r18, r16
    1fda:	28 0f       	add	r18, r24
    1fdc:	39 1f       	adc	r19, r25
    1fde:	04 c0       	rjmp	.+8      	; 0x1fe8 <_ZN5Print5printEli+0x6c>
    1fe0:	2a e0       	ldi	r18, 0x0A	; 10
    1fe2:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <_ZN5Print11printNumberEmh>
    1fe6:	9c 01       	movw	r18, r24
    1fe8:	c9 01       	movw	r24, r18
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	08 95       	ret

00001ffc <_ZN5Print7printlnEii>:
    1ffc:	cf 92       	push	r12
    1ffe:	df 92       	push	r13
    2000:	ef 92       	push	r14
    2002:	ff 92       	push	r15
    2004:	0f 93       	push	r16
    2006:	1f 93       	push	r17
    2008:	6c 01       	movw	r12, r24
    200a:	7b 01       	movw	r14, r22
    200c:	9a 01       	movw	r18, r20
    200e:	00 27       	eor	r16, r16
    2010:	f7 fc       	sbrc	r15, 7
    2012:	00 95       	com	r16
    2014:	10 2f       	mov	r17, r16
    2016:	b8 01       	movw	r22, r16
    2018:	a7 01       	movw	r20, r14
    201a:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <_ZN5Print5printEli>
    201e:	8c 01       	movw	r16, r24
    2020:	c6 01       	movw	r24, r12
    2022:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN5Print7printlnEv>
    2026:	08 0f       	add	r16, r24
    2028:	19 1f       	adc	r17, r25
    202a:	c8 01       	movw	r24, r16
    202c:	1f 91       	pop	r17
    202e:	0f 91       	pop	r16
    2030:	ff 90       	pop	r15
    2032:	ef 90       	pop	r14
    2034:	df 90       	pop	r13
    2036:	cf 90       	pop	r12
    2038:	08 95       	ret

0000203a <_ZN5Print5printEPKc>:
    203a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN5Print5writeEPKc>
    203e:	08 95       	ret

00002040 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    2040:	ef 92       	push	r14
    2042:	ff 92       	push	r15
    2044:	0f 93       	push	r16
    2046:	1f 93       	push	r17
    2048:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    204a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <_ZN5Print5writeEPKc>
    204e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    2050:	c7 01       	movw	r24, r14
    2052:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <_ZN5Print7printlnEv>
    2056:	08 0f       	add	r16, r24
    2058:	19 1f       	adc	r17, r25
  return n;
}
    205a:	c8 01       	movw	r24, r16
    205c:	1f 91       	pop	r17
    205e:	0f 91       	pop	r16
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	08 95       	ret

00002066 <_ZNK6String16equalsIgnoreCaseERKS_>:

String::String(const String &value)
{
	init();
	*this = value;
}
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	fc 01       	movw	r30, r24
    2074:	db 01       	movw	r26, r22
    2076:	86 17       	cp	r24, r22
    2078:	97 07       	cpc	r25, r23
    207a:	39 f1       	breq	.+78     	; 0x20ca <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
    207c:	24 81       	ldd	r18, Z+4	; 0x04
    207e:	35 81       	ldd	r19, Z+5	; 0x05
    2080:	14 96       	adiw	r26, 0x04	; 4
    2082:	8d 91       	ld	r24, X+
    2084:	9c 91       	ld	r25, X
    2086:	15 97       	sbiw	r26, 0x05	; 5
    2088:	28 17       	cp	r18, r24
    208a:	39 07       	cpc	r19, r25
    208c:	01 f5       	brne	.+64     	; 0x20ce <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    208e:	23 2b       	or	r18, r19
    2090:	e1 f0       	breq	.+56     	; 0x20ca <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
    2092:	e0 80       	ld	r14, Z
    2094:	f1 80       	ldd	r15, Z+1	; 0x01
    2096:	cd 91       	ld	r28, X+
    2098:	dc 91       	ld	r29, X
    209a:	13 c0       	rjmp	.+38     	; 0x20c2 <_ZNK6String16equalsIgnoreCaseERKS_+0x5c>
    209c:	99 27       	eor	r25, r25
    209e:	87 fd       	sbrc	r24, 7
    20a0:	90 95       	com	r25
    20a2:	0e 94 ae 13 	call	0x275c	; 0x275c <tolower>
    20a6:	8c 01       	movw	r16, r24
    20a8:	88 81       	ld	r24, Y
    20aa:	99 27       	eor	r25, r25
    20ac:	87 fd       	sbrc	r24, 7
    20ae:	90 95       	com	r25
    20b0:	0e 94 ae 13 	call	0x275c	; 0x275c <tolower>
    20b4:	08 17       	cp	r16, r24
    20b6:	19 07       	cpc	r17, r25
    20b8:	51 f4       	brne	.+20     	; 0x20ce <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
    20ba:	08 94       	sec
    20bc:	e1 1c       	adc	r14, r1
    20be:	f1 1c       	adc	r15, r1
    20c0:	21 96       	adiw	r28, 0x01	; 1
    20c2:	f7 01       	movw	r30, r14
    20c4:	80 81       	ld	r24, Z
    20c6:	88 23       	and	r24, r24
    20c8:	49 f7       	brne	.-46     	; 0x209c <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <_ZNK6String16equalsIgnoreCaseERKS_+0x6a>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	08 95       	ret

000020de <_ZN6String12changeBufferEj>:
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
    20e2:	cf 93       	push	r28
    20e4:	df 93       	push	r29
    20e6:	ec 01       	movw	r28, r24
    20e8:	8b 01       	movw	r16, r22
    20ea:	6f 5f       	subi	r22, 0xFF	; 255
    20ec:	7f 4f       	sbci	r23, 0xFF	; 255
    20ee:	88 81       	ld	r24, Y
    20f0:	99 81       	ldd	r25, Y+1	; 0x01
    20f2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <realloc>
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	11 f4       	brne	.+4      	; 0x20fe <_ZN6String12changeBufferEj+0x20>
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	05 c0       	rjmp	.+10     	; 0x2108 <_ZN6String12changeBufferEj+0x2a>
    20fe:	99 83       	std	Y+1, r25	; 0x01
    2100:	88 83       	st	Y, r24
    2102:	1b 83       	std	Y+3, r17	; 0x03
    2104:	0a 83       	std	Y+2, r16	; 0x02
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	08 95       	ret

00002112 <_ZN6String7reserveEj>:
    2112:	cf 93       	push	r28
    2114:	df 93       	push	r29
    2116:	ec 01       	movw	r28, r24
    2118:	88 81       	ld	r24, Y
    211a:	99 81       	ldd	r25, Y+1	; 0x01
    211c:	89 2b       	or	r24, r25
    211e:	29 f0       	breq	.+10     	; 0x212a <_ZN6String7reserveEj+0x18>
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	9b 81       	ldd	r25, Y+3	; 0x03
    2124:	86 17       	cp	r24, r22
    2126:	97 07       	cpc	r25, r23
    2128:	60 f4       	brcc	.+24     	; 0x2142 <_ZN6String7reserveEj+0x30>
    212a:	ce 01       	movw	r24, r28
    212c:	0e 94 6f 10 	call	0x20de	; 0x20de <_ZN6String12changeBufferEj>
    2130:	88 23       	and	r24, r24
    2132:	41 f0       	breq	.+16     	; 0x2144 <_ZN6String7reserveEj+0x32>
    2134:	8c 81       	ldd	r24, Y+4	; 0x04
    2136:	9d 81       	ldd	r25, Y+5	; 0x05
    2138:	89 2b       	or	r24, r25
    213a:	19 f4       	brne	.+6      	; 0x2142 <_ZN6String7reserveEj+0x30>
    213c:	e8 81       	ld	r30, Y
    213e:	f9 81       	ldd	r31, Y+1	; 0x01
    2140:	10 82       	st	Z, r1
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <_ZN6String6concatEPKcj>:
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	ec 01       	movw	r28, r24
    2158:	7b 01       	movw	r14, r22
    215a:	6c 81       	ldd	r22, Y+4	; 0x04
    215c:	7d 81       	ldd	r23, Y+5	; 0x05
    215e:	e1 14       	cp	r14, r1
    2160:	f1 04       	cpc	r15, r1
    2162:	c1 f0       	breq	.+48     	; 0x2194 <_ZN6String6concatEPKcj+0x4a>
    2164:	41 15       	cp	r20, r1
    2166:	51 05       	cpc	r21, r1
    2168:	99 f0       	breq	.+38     	; 0x2190 <_ZN6String6concatEPKcj+0x46>
    216a:	8a 01       	movw	r16, r20
    216c:	06 0f       	add	r16, r22
    216e:	17 1f       	adc	r17, r23
    2170:	b8 01       	movw	r22, r16
    2172:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6String7reserveEj>
    2176:	88 23       	and	r24, r24
    2178:	69 f0       	breq	.+26     	; 0x2194 <_ZN6String6concatEPKcj+0x4a>
    217a:	88 81       	ld	r24, Y
    217c:	99 81       	ldd	r25, Y+1	; 0x01
    217e:	2c 81       	ldd	r18, Y+4	; 0x04
    2180:	3d 81       	ldd	r19, Y+5	; 0x05
    2182:	82 0f       	add	r24, r18
    2184:	93 1f       	adc	r25, r19
    2186:	b7 01       	movw	r22, r14
    2188:	0e 94 bf 13 	call	0x277e	; 0x277e <strcpy>
    218c:	1d 83       	std	Y+5, r17	; 0x05
    218e:	0c 83       	std	Y+4, r16	; 0x04
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <_ZN6String6concatEPKcj+0x4c>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	ff 90       	pop	r15
    21a0:	ef 90       	pop	r14
    21a2:	08 95       	ret

000021a4 <_ZN6String6concatEc>:
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <_ZN6String6concatEc+0x6>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	69 83       	std	Y+1, r22	; 0x01
    21b0:	1a 82       	std	Y+2, r1	; 0x02
    21b2:	be 01       	movw	r22, r28
    21b4:	6f 5f       	subi	r22, 0xFF	; 255
    21b6:	7f 4f       	sbci	r23, 0xFF	; 255
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	0e 94 a5 10 	call	0x214a	; 0x214a <_ZN6String6concatEPKcj>
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <_ZN6String10invalidateEv>:
    21ca:	cf 93       	push	r28
    21cc:	df 93       	push	r29
    21ce:	ec 01       	movw	r28, r24
    21d0:	88 81       	ld	r24, Y
    21d2:	99 81       	ldd	r25, Y+1	; 0x01
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	11 f0       	breq	.+4      	; 0x21dc <_ZN6String10invalidateEv+0x12>
    21d8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <free>
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	18 82       	st	Y, r1
    21e0:	1d 82       	std	Y+5, r1	; 0x05
    21e2:	1c 82       	std	Y+4, r1	; 0x04
    21e4:	1b 82       	std	Y+3, r1	; 0x03
    21e6:	1a 82       	std	Y+2, r1	; 0x02
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	08 95       	ret

000021ee <_ZN6String4copyEPKcj>:
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	cf 93       	push	r28
    21f8:	df 93       	push	r29
    21fa:	ec 01       	movw	r28, r24
    21fc:	7b 01       	movw	r14, r22
    21fe:	8a 01       	movw	r16, r20
    2200:	ba 01       	movw	r22, r20
    2202:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN6String7reserveEj>
    2206:	88 23       	and	r24, r24
    2208:	21 f4       	brne	.+8      	; 0x2212 <_ZN6String4copyEPKcj+0x24>
    220a:	ce 01       	movw	r24, r28
    220c:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_ZN6String10invalidateEv>
    2210:	07 c0       	rjmp	.+14     	; 0x2220 <_ZN6String4copyEPKcj+0x32>
    2212:	1d 83       	std	Y+5, r17	; 0x05
    2214:	0c 83       	std	Y+4, r16	; 0x04
    2216:	88 81       	ld	r24, Y
    2218:	99 81       	ldd	r25, Y+1	; 0x01
    221a:	b7 01       	movw	r22, r14
    221c:	0e 94 bf 13 	call	0x277e	; 0x277e <strcpy>
    2220:	ce 01       	movw	r24, r28
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	ef 90       	pop	r14
    222e:	08 95       	ret

00002230 <_ZN6StringC1EPKc>:
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	ec 01       	movw	r28, r24
    2236:	19 82       	std	Y+1, r1	; 0x01
    2238:	18 82       	st	Y, r1
    223a:	1b 82       	std	Y+3, r1	; 0x03
    223c:	1a 82       	std	Y+2, r1	; 0x02
    223e:	1d 82       	std	Y+5, r1	; 0x05
    2240:	1c 82       	std	Y+4, r1	; 0x04
    2242:	1e 82       	std	Y+6, r1	; 0x06
    2244:	61 15       	cp	r22, r1
    2246:	71 05       	cpc	r23, r1
    2248:	51 f0       	breq	.+20     	; 0x225e <_ZN6StringC1EPKc+0x2e>
    224a:	db 01       	movw	r26, r22
    224c:	0d 90       	ld	r0, X+
    224e:	00 20       	and	r0, r0
    2250:	e9 f7       	brne	.-6      	; 0x224c <_ZN6StringC1EPKc+0x1c>
    2252:	11 97       	sbiw	r26, 0x01	; 1
    2254:	a6 1b       	sub	r26, r22
    2256:	b7 0b       	sbc	r27, r23
    2258:	ad 01       	movw	r20, r26
    225a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN6String4copyEPKcj>
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	08 95       	ret

00002264 <_ZN6StringaSERKS_>:
    2264:	cf 93       	push	r28
    2266:	df 93       	push	r29
    2268:	ec 01       	movw	r28, r24
    226a:	fb 01       	movw	r30, r22
    226c:	86 17       	cp	r24, r22
    226e:	97 07       	cpc	r25, r23
    2270:	61 f0       	breq	.+24     	; 0x228a <_ZN6StringaSERKS_+0x26>
    2272:	60 81       	ld	r22, Z
    2274:	71 81       	ldd	r23, Z+1	; 0x01
    2276:	61 15       	cp	r22, r1
    2278:	71 05       	cpc	r23, r1
    227a:	29 f0       	breq	.+10     	; 0x2286 <_ZN6StringaSERKS_+0x22>
    227c:	44 81       	ldd	r20, Z+4	; 0x04
    227e:	55 81       	ldd	r21, Z+5	; 0x05
    2280:	0e 94 f7 10 	call	0x21ee	; 0x21ee <_ZN6String4copyEPKcj>
    2284:	02 c0       	rjmp	.+4      	; 0x228a <_ZN6StringaSERKS_+0x26>
    2286:	0e 94 e5 10 	call	0x21ca	; 0x21ca <_ZN6String10invalidateEv>
    228a:	ce 01       	movw	r24, r28
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <_ZN6StringC1ERKS_>:
    2292:	fc 01       	movw	r30, r24
    2294:	11 82       	std	Z+1, r1	; 0x01
    2296:	10 82       	st	Z, r1
    2298:	13 82       	std	Z+3, r1	; 0x03
    229a:	12 82       	std	Z+2, r1	; 0x02
    229c:	15 82       	std	Z+5, r1	; 0x05
    229e:	14 82       	std	Z+4, r1	; 0x04
    22a0:	16 82       	std	Z+6, r1	; 0x06
    22a2:	0e 94 32 11 	call	0x2264	; 0x2264 <_ZN6StringaSERKS_>
    22a6:	08 95       	ret

000022a8 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    22a8:	fc 01       	movw	r30, r24
{
	free(buffer);
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <free>
}
    22b2:	08 95       	ret

000022b4 <malloc>:
	 * Our minimum chunk size is the size of a pointer (plus the
	 * size of the "sz" field, but we don't need to account for
	 * this), otherwise we could not possibly fit a freelist entry
	 * into the chunk later.
	 */
	if (len < sizeof(struct __freelist) - sizeof(size_t))
    22b4:	0f 93       	push	r16
    22b6:	1f 93       	push	r17
    22b8:	cf 93       	push	r28
    22ba:	df 93       	push	r29
    22bc:	bc 01       	movw	r22, r24
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	91 05       	cpc	r25, r1
    22c2:	10 f4       	brcc	.+4      	; 0x22c8 <malloc+0x14>
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	70 e0       	ldi	r23, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    22c8:	e0 91 e9 03 	lds	r30, 0x03E9
    22cc:	f0 91 ea 03 	lds	r31, 0x03EA
    22d0:	a0 e0       	ldi	r26, 0x00	; 0
    22d2:	b0 e0       	ldi	r27, 0x00	; 0
    22d4:	40 e0       	ldi	r20, 0x00	; 0
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	24 c0       	rjmp	.+72     	; 0x2322 <malloc+0x6e>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	86 17       	cp	r24, r22
    22e0:	97 07       	cpc	r25, r23
    22e2:	d0 f0       	brcs	.+52     	; 0x2318 <malloc+0x64>
			continue;
		if (fp1->sz == len) {
    22e4:	86 17       	cp	r24, r22
    22e6:	97 07       	cpc	r25, r23
    22e8:	71 f4       	brne	.+28     	; 0x2306 <malloc+0x52>
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    22ee:	10 97       	sbiw	r26, 0x00	; 0
    22f0:	29 f0       	breq	.+10     	; 0x22fc <malloc+0x48>
				fp2->nx = fp1->nx;
    22f2:	13 96       	adiw	r26, 0x03	; 3
    22f4:	9c 93       	st	X, r25
    22f6:	8e 93       	st	-X, r24
    22f8:	12 97       	sbiw	r26, 0x02	; 2
    22fa:	2c c0       	rjmp	.+88     	; 0x2354 <malloc+0xa0>
			else
				__flp = fp1->nx;
    22fc:	90 93 ea 03 	sts	0x03EA, r25
    2300:	80 93 e9 03 	sts	0x03E9, r24
    2304:	27 c0       	rjmp	.+78     	; 0x2354 <malloc+0xa0>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    2306:	41 15       	cp	r20, r1
    2308:	51 05       	cpc	r21, r1
    230a:	19 f0       	breq	.+6      	; 0x2312 <malloc+0x5e>
    230c:	84 17       	cp	r24, r20
    230e:	95 07       	cpc	r25, r21
    2310:	18 f4       	brcc	.+6      	; 0x2318 <malloc+0x64>
    2312:	ef 01       	movw	r28, r30
    2314:	8d 01       	movw	r16, r26
    2316:	ac 01       	movw	r20, r24
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2318:	df 01       	movw	r26, r30
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	9c 01       	movw	r18, r24
    2320:	f9 01       	movw	r30, r18
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
    2322:	30 97       	sbiw	r30, 0x00	; 0
    2324:	d1 f6       	brne	.-76     	; 0x22da <malloc+0x26>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    2326:	41 15       	cp	r20, r1
    2328:	51 05       	cpc	r21, r1
    232a:	f9 f0       	breq	.+62     	; 0x236a <malloc+0xb6>
		if (s - len < sizeof(struct __freelist)) {
    232c:	ca 01       	movw	r24, r20
    232e:	86 1b       	sub	r24, r22
    2330:	97 0b       	sbc	r25, r23
    2332:	84 30       	cpi	r24, 0x04	; 4
    2334:	91 05       	cpc	r25, r1
    2336:	80 f4       	brcc	.+32     	; 0x2358 <malloc+0xa4>
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    233c:	01 15       	cp	r16, r1
    233e:	11 05       	cpc	r17, r1
    2340:	21 f0       	breq	.+8      	; 0x234a <malloc+0x96>
				sfp2->nx = sfp1->nx;
    2342:	f8 01       	movw	r30, r16
    2344:	93 83       	std	Z+3, r25	; 0x03
    2346:	82 83       	std	Z+2, r24	; 0x02
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <malloc+0x9e>
			else
				__flp = sfp1->nx;
    234a:	90 93 ea 03 	sts	0x03EA, r25
    234e:	80 93 e9 03 	sts	0x03E9, r24
			return &(sfp1->nx);
    2352:	fe 01       	movw	r30, r28
    2354:	32 96       	adiw	r30, 0x02	; 2
    2356:	2f c0       	rjmp	.+94     	; 0x23b6 <malloc+0x102>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    2358:	fe 01       	movw	r30, r28
    235a:	e8 0f       	add	r30, r24
    235c:	f9 1f       	adc	r31, r25
    235e:	61 93       	st	Z+, r22
    2360:	71 93       	st	Z+, r23
		sfp1->sz = s - sizeof(size_t);
    2362:	02 97       	sbiw	r24, 0x02	; 2
    2364:	99 83       	std	Y+1, r25	; 0x01
    2366:	88 83       	st	Y, r24
    2368:	26 c0       	rjmp	.+76     	; 0x23b6 <malloc+0x102>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	cp = STACK_POINTER() - __MALLOC_MARGIN__;
    236a:	8d b7       	in	r24, 0x3d	; 61
    236c:	9e b7       	in	r25, 0x3e	; 62
    236e:	88 57       	subi	r24, 0x78	; 120
    2370:	90 40       	sbci	r25, 0x00	; 0
	if (cp <= __brkval)
    2372:	20 91 be 02 	lds	r18, 0x02BE
    2376:	30 91 bf 02 	lds	r19, 0x02BF
    237a:	28 17       	cp	r18, r24
    237c:	39 07       	cpc	r19, r25
    237e:	c8 f4       	brcc	.+50     	; 0x23b2 <malloc+0xfe>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    2380:	ac 01       	movw	r20, r24
    2382:	42 1b       	sub	r20, r18
    2384:	53 0b       	sbc	r21, r19
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    2386:	46 17       	cp	r20, r22
    2388:	57 07       	cpc	r21, r23
    238a:	98 f0       	brcs	.+38     	; 0x23b2 <malloc+0xfe>
    238c:	cb 01       	movw	r24, r22
    238e:	02 96       	adiw	r24, 0x02	; 2
    2390:	48 17       	cp	r20, r24
    2392:	59 07       	cpc	r21, r25
    2394:	70 f0       	brcs	.+28     	; 0x23b2 <malloc+0xfe>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	90 93 bf 02 	sts	0x02BF, r25
    239e:	80 93 be 02 	sts	0x02BE, r24
		__brkval_maximum = __brkval;
    23a2:	90 93 c1 02 	sts	0x02C1, r25
    23a6:	80 93 c0 02 	sts	0x02C0, r24
		fp1->sz = len;
    23aa:	f9 01       	movw	r30, r18
    23ac:	61 93       	st	Z+, r22
    23ae:	71 93       	st	Z+, r23
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <malloc+0x102>
		return &(fp1->nx);
    23b2:	e0 e0       	ldi	r30, 0x00	; 0
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    23b6:	cf 01       	movw	r24, r30
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <free>:
{
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	9c 01       	movw	r18, r24
    23c8:	00 97       	sbiw	r24, 0x00	; 0
    23ca:	09 f4       	brne	.+2      	; 0x23ce <free+0xc>
    23cc:	8f c0       	rjmp	.+286    	; 0x24ec <free+0x12a>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    23ce:	ec 01       	movw	r28, r24
    23d0:	22 97       	sbiw	r28, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    23d2:	1b 82       	std	Y+3, r1	; 0x03
    23d4:	1a 82       	std	Y+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    23d6:	60 91 e9 03 	lds	r22, 0x03E9
    23da:	70 91 ea 03 	lds	r23, 0x03EA
    23de:	61 15       	cp	r22, r1
    23e0:	71 05       	cpc	r23, r1
    23e2:	81 f4       	brne	.+32     	; 0x2404 <free+0x42>
		if ((char *)p + fpnew->sz == __brkval)
    23e4:	88 81       	ld	r24, Y
    23e6:	99 81       	ldd	r25, Y+1	; 0x01
    23e8:	82 0f       	add	r24, r18
    23ea:	93 1f       	adc	r25, r19
    23ec:	20 91 be 02 	lds	r18, 0x02BE
    23f0:	30 91 bf 02 	lds	r19, 0x02BF
    23f4:	28 17       	cp	r18, r24
    23f6:	39 07       	cpc	r19, r25
    23f8:	39 f5       	brne	.+78     	; 0x2448 <free+0x86>
			__brkval = cpnew;
    23fa:	d0 93 bf 02 	sts	0x02BF, r29
    23fe:	c0 93 be 02 	sts	0x02BE, r28
    2402:	74 c0       	rjmp	.+232    	; 0x24ec <free+0x12a>
		else
			__flp = fpnew;
    2404:	db 01       	movw	r26, r22
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    240a:	ac 17       	cp	r26, r28
    240c:	bd 07       	cpc	r27, r29
    240e:	08 f1       	brcs	.+66     	; 0x2452 <free+0x90>
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    2410:	bb 83       	std	Y+3, r27	; 0x03
    2412:	aa 83       	std	Y+2, r26	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    2414:	fe 01       	movw	r30, r28
    2416:	21 91       	ld	r18, Z+
    2418:	31 91       	ld	r19, Z+
    241a:	e2 0f       	add	r30, r18
    241c:	f3 1f       	adc	r31, r19
    241e:	ae 17       	cp	r26, r30
    2420:	bf 07       	cpc	r27, r31
    2422:	79 f4       	brne	.+30     	; 0x2442 <free+0x80>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    2424:	8d 91       	ld	r24, X+
    2426:	9c 91       	ld	r25, X
    2428:	11 97       	sbiw	r26, 0x01	; 1
    242a:	28 0f       	add	r18, r24
    242c:	39 1f       	adc	r19, r25
    242e:	2e 5f       	subi	r18, 0xFE	; 254
    2430:	3f 4f       	sbci	r19, 0xFF	; 255
    2432:	39 83       	std	Y+1, r19	; 0x01
    2434:	28 83       	st	Y, r18
			fpnew->nx = fp1->nx;
    2436:	12 96       	adiw	r26, 0x02	; 2
    2438:	8d 91       	ld	r24, X+
    243a:	9c 91       	ld	r25, X
    243c:	13 97       	sbiw	r26, 0x03	; 3
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
		}
		if (fp2 == 0) {
    2442:	41 15       	cp	r20, r1
    2444:	51 05       	cpc	r21, r1
    2446:	71 f4       	brne	.+28     	; 0x2464 <free+0xa2>
			/* new head of freelist */
			__flp = fpnew;
    2448:	d0 93 ea 03 	sts	0x03EA, r29
    244c:	c0 93 e9 03 	sts	0x03E9, r28
    2450:	4d c0       	rjmp	.+154    	; 0x24ec <free+0x12a>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    2452:	12 96       	adiw	r26, 0x02	; 2
    2454:	8d 91       	ld	r24, X+
    2456:	9c 91       	ld	r25, X
    2458:	13 97       	sbiw	r26, 0x03	; 3
    245a:	ad 01       	movw	r20, r26
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	11 f0       	breq	.+4      	; 0x2464 <free+0xa2>
    2460:	dc 01       	movw	r26, r24
    2462:	d3 cf       	rjmp	.-90     	; 0x240a <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    2464:	da 01       	movw	r26, r20
    2466:	13 96       	adiw	r26, 0x03	; 3
    2468:	dc 93       	st	X, r29
    246a:	ce 93       	st	-X, r28
    246c:	12 97       	sbiw	r26, 0x02	; 2
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    246e:	fa 01       	movw	r30, r20
    2470:	21 91       	ld	r18, Z+
    2472:	31 91       	ld	r19, Z+
    2474:	e2 0f       	add	r30, r18
    2476:	f3 1f       	adc	r31, r19
    2478:	ce 17       	cp	r28, r30
    247a:	df 07       	cpc	r29, r31
    247c:	69 f4       	brne	.+26     	; 0x2498 <free+0xd6>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    247e:	88 81       	ld	r24, Y
    2480:	99 81       	ldd	r25, Y+1	; 0x01
    2482:	28 0f       	add	r18, r24
    2484:	39 1f       	adc	r19, r25
    2486:	2e 5f       	subi	r18, 0xFE	; 254
    2488:	3f 4f       	sbci	r19, 0xFF	; 255
    248a:	fa 01       	movw	r30, r20
    248c:	31 83       	std	Z+1, r19	; 0x01
    248e:	20 83       	st	Z, r18
		fp2->nx = fpnew->nx;
    2490:	8a 81       	ldd	r24, Y+2	; 0x02
    2492:	9b 81       	ldd	r25, Y+3	; 0x03
    2494:	93 83       	std	Z+3, r25	; 0x03
    2496:	82 83       	std	Z+2, r24	; 0x02
    2498:	e0 e0       	ldi	r30, 0x00	; 0
    249a:	f0 e0       	ldi	r31, 0x00	; 0
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1->nx != 0;
    249c:	db 01       	movw	r26, r22
    249e:	12 96       	adiw	r26, 0x02	; 2
    24a0:	8d 91       	ld	r24, X+
    24a2:	9c 91       	ld	r25, X
    24a4:	13 97       	sbiw	r26, 0x03	; 3
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	19 f0       	breq	.+6      	; 0x24b0 <free+0xee>
    24aa:	bc 01       	movw	r22, r24
    24ac:	fd 01       	movw	r30, r26
    24ae:	f6 cf       	rjmp	.-20     	; 0x249c <free+0xda>
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
    24b0:	ab 01       	movw	r20, r22
    24b2:	4e 5f       	subi	r20, 0xFE	; 254
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
	if (cp2 + fp1->sz == __brkval) {
    24b6:	db 01       	movw	r26, r22
    24b8:	8d 91       	ld	r24, X+
    24ba:	9c 91       	ld	r25, X
    24bc:	84 0f       	add	r24, r20
    24be:	95 1f       	adc	r25, r21
    24c0:	20 91 be 02 	lds	r18, 0x02BE
    24c4:	30 91 bf 02 	lds	r19, 0x02BF
    24c8:	28 17       	cp	r18, r24
    24ca:	39 07       	cpc	r19, r25
    24cc:	79 f4       	brne	.+30     	; 0x24ec <free+0x12a>
		if (fp2 == NULL)
    24ce:	30 97       	sbiw	r30, 0x00	; 0
    24d0:	29 f4       	brne	.+10     	; 0x24dc <free+0x11a>
			/* Freelist is empty now. */
			__flp = NULL;
    24d2:	10 92 ea 03 	sts	0x03EA, r1
    24d6:	10 92 e9 03 	sts	0x03E9, r1
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <free+0x11e>
		else
			fp2->nx = NULL;
    24dc:	13 82       	std	Z+3, r1	; 0x03
    24de:	12 82       	std	Z+2, r1	; 0x02
		__brkval = cp2 - sizeof(size_t);
    24e0:	42 50       	subi	r20, 0x02	; 2
    24e2:	50 40       	sbci	r21, 0x00	; 0
    24e4:	50 93 bf 02 	sts	0x02BF, r21
    24e8:	40 93 be 02 	sts	0x02BE, r20
	}
}
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <realloc>:
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    24f2:	6f 92       	push	r6
    24f4:	7f 92       	push	r7
    24f6:	8f 92       	push	r8
    24f8:	9f 92       	push	r9
    24fa:	af 92       	push	r10
    24fc:	bf 92       	push	r11
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	8c 01       	movw	r16, r24
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	29 f4       	brne	.+10     	; 0x251e <realloc+0x2c>
		return malloc(len);
    2514:	cb 01       	movw	r24, r22
    2516:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <malloc>
    251a:	8c 01       	movw	r16, r24
    251c:	b4 c0       	rjmp	.+360    	; 0x2686 <realloc+0x194>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    251e:	8e ef       	ldi	r24, 0xFE	; 254
    2520:	e8 2e       	mov	r14, r24
    2522:	8f ef       	ldi	r24, 0xFF	; 255
    2524:	f8 2e       	mov	r15, r24
    2526:	e0 0e       	add	r14, r16
    2528:	f1 1e       	adc	r15, r17
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    252a:	58 01       	movw	r10, r16
    252c:	a6 0e       	add	r10, r22
    252e:	b7 1e       	adc	r11, r23
	if (cp < cp1)
    2530:	ae 14       	cp	r10, r14
    2532:	bf 04       	cpc	r11, r15
    2534:	08 f4       	brcc	.+2      	; 0x2538 <realloc+0x46>
    2536:	a5 c0       	rjmp	.+330    	; 0x2682 <realloc+0x190>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    2538:	d7 01       	movw	r26, r14
    253a:	4d 91       	ld	r20, X+
    253c:	5c 91       	ld	r21, X
    253e:	11 97       	sbiw	r26, 0x01	; 1
    2540:	46 17       	cp	r20, r22
    2542:	57 07       	cpc	r21, r23
    2544:	b8 f0       	brcs	.+46     	; 0x2574 <realloc+0x82>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    2546:	45 30       	cpi	r20, 0x05	; 5
    2548:	51 05       	cpc	r21, r1
    254a:	08 f4       	brcc	.+2      	; 0x254e <realloc+0x5c>
    254c:	9c c0       	rjmp	.+312    	; 0x2686 <realloc+0x194>
    254e:	ca 01       	movw	r24, r20
    2550:	04 97       	sbiw	r24, 0x04	; 4
    2552:	86 17       	cp	r24, r22
    2554:	97 07       	cpc	r25, r23
    2556:	08 f4       	brcc	.+2      	; 0x255a <realloc+0x68>
    2558:	96 c0       	rjmp	.+300    	; 0x2686 <realloc+0x194>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    255a:	42 50       	subi	r20, 0x02	; 2
    255c:	50 40       	sbci	r21, 0x00	; 0
    255e:	46 1b       	sub	r20, r22
    2560:	57 0b       	sbc	r21, r23
    2562:	f5 01       	movw	r30, r10
    2564:	41 93       	st	Z+, r20
    2566:	51 93       	st	Z+, r21
		fp1->sz = len;
    2568:	6d 93       	st	X+, r22
    256a:	7c 93       	st	X, r23
		free(&(fp2->nx));
    256c:	cf 01       	movw	r24, r30
    256e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <free>
    2572:	89 c0       	rjmp	.+274    	; 0x2686 <realloc+0x194>

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    2574:	4b 01       	movw	r8, r22
    2576:	84 1a       	sub	r8, r20
    2578:	95 0a       	sbc	r9, r21
	cp = (char *)ptr + fp1->sz;
    257a:	38 01       	movw	r6, r16
    257c:	64 0e       	add	r6, r20
    257e:	75 1e       	adc	r7, r21
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    2580:	a0 91 e9 03 	lds	r26, 0x03E9
    2584:	b0 91 ea 03 	lds	r27, 0x03EA
    2588:	cc 24       	eor	r12, r12
    258a:	dd 24       	eor	r13, r13
    258c:	e0 e0       	ldi	r30, 0x00	; 0
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	47 c0       	rjmp	.+142    	; 0x2620 <realloc+0x12e>
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    2592:	a6 15       	cp	r26, r6
    2594:	b7 05       	cpc	r27, r7
    2596:	a9 f5       	brne	.+106    	; 0x2602 <realloc+0x110>
    2598:	cd 91       	ld	r28, X+
    259a:	dc 91       	ld	r29, X
    259c:	11 97       	sbiw	r26, 0x01	; 1
    259e:	ce 01       	movw	r24, r28
    25a0:	02 96       	adiw	r24, 0x02	; 2
    25a2:	88 15       	cp	r24, r8
    25a4:	99 05       	cpc	r25, r9
    25a6:	68 f1       	brcs	.+90     	; 0x2602 <realloc+0x110>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    25a8:	ce 01       	movw	r24, r28
    25aa:	88 19       	sub	r24, r8
    25ac:	99 09       	sbc	r25, r9
    25ae:	02 96       	adiw	r24, 0x02	; 2
    25b0:	12 96       	adiw	r26, 0x02	; 2
    25b2:	2c 91       	ld	r18, X
    25b4:	12 97       	sbiw	r26, 0x02	; 2
    25b6:	13 96       	adiw	r26, 0x03	; 3
    25b8:	3c 91       	ld	r19, X
    25ba:	05 97       	sbiw	r24, 0x05	; 5
    25bc:	58 f0       	brcs	.+22     	; 0x25d4 <realloc+0xe2>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
    25be:	f5 01       	movw	r30, r10
				fp2->nx = fp3->nx;
    25c0:	22 83       	std	Z+2, r18	; 0x02
    25c2:	33 83       	std	Z+3, r19	; 0x03
				fp2->sz = fp3->sz - incr;
    25c4:	c8 19       	sub	r28, r8
    25c6:	d9 09       	sbc	r29, r9
    25c8:	d1 83       	std	Z+1, r29	; 0x01
    25ca:	c0 83       	st	Z, r28
				fp1->sz = len;
    25cc:	d7 01       	movw	r26, r14
    25ce:	6d 93       	st	X+, r22
    25d0:	7c 93       	st	X, r23
    25d2:	09 c0       	rjmp	.+18     	; 0x25e6 <realloc+0xf4>
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    25d4:	4e 5f       	subi	r20, 0xFE	; 254
    25d6:	5f 4f       	sbci	r21, 0xFF	; 255
    25d8:	4c 0f       	add	r20, r28
    25da:	5d 1f       	adc	r21, r29
    25dc:	f7 01       	movw	r30, r14
    25de:	51 83       	std	Z+1, r21	; 0x01
    25e0:	40 83       	st	Z, r20
				fp2 = fp3->nx;
    25e2:	c9 01       	movw	r24, r18
    25e4:	fc 01       	movw	r30, r24
			}
			if (ofp3)
    25e6:	c1 14       	cp	r12, r1
    25e8:	d1 04       	cpc	r13, r1
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <realloc+0x106>
				ofp3->nx = fp2;
    25ec:	d6 01       	movw	r26, r12
    25ee:	13 96       	adiw	r26, 0x03	; 3
    25f0:	fc 93       	st	X, r31
    25f2:	ee 93       	st	-X, r30
    25f4:	12 97       	sbiw	r26, 0x02	; 2
    25f6:	47 c0       	rjmp	.+142    	; 0x2686 <realloc+0x194>
			else
				__flp = fp2;
    25f8:	f0 93 ea 03 	sts	0x03EA, r31
    25fc:	e0 93 e9 03 	sts	0x03E9, r30
    2600:	42 c0       	rjmp	.+132    	; 0x2686 <realloc+0x194>
    2602:	8d 91       	ld	r24, X+
    2604:	9c 91       	ld	r25, X
    2606:	11 97       	sbiw	r26, 0x01	; 1
    2608:	e8 17       	cp	r30, r24
    260a:	f9 07       	cpc	r31, r25
    260c:	08 f4       	brcc	.+2      	; 0x2610 <realloc+0x11e>
    260e:	fc 01       	movw	r30, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    2610:	6d 01       	movw	r12, r26
    2612:	12 96       	adiw	r26, 0x02	; 2
    2614:	8c 91       	ld	r24, X
    2616:	12 97       	sbiw	r26, 0x02	; 2
    2618:	13 96       	adiw	r26, 0x03	; 3
    261a:	9c 91       	ld	r25, X
    261c:	9c 01       	movw	r18, r24
    261e:	d9 01       	movw	r26, r18
	 */
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
    2620:	10 97       	sbiw	r26, 0x00	; 0
    2622:	09 f0       	breq	.+2      	; 0x2626 <realloc+0x134>
    2624:	b6 cf       	rjmp	.-148    	; 0x2592 <realloc+0xa0>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    2626:	80 91 be 02 	lds	r24, 0x02BE
    262a:	90 91 bf 02 	lds	r25, 0x02BF
    262e:	86 15       	cp	r24, r6
    2630:	97 05       	cpc	r25, r7
    2632:	b1 f4       	brne	.+44     	; 0x2660 <realloc+0x16e>
    2634:	e6 17       	cp	r30, r22
    2636:	f7 07       	cpc	r31, r23
    2638:	98 f4       	brcc	.+38     	; 0x2660 <realloc+0x16e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __MALLOC_MARGIN__;
    263a:	8d b7       	in	r24, 0x3d	; 61
    263c:	9e b7       	in	r25, 0x3e	; 62
		if (cp < cp1) {
    263e:	88 57       	subi	r24, 0x78	; 120
    2640:	90 40       	sbci	r25, 0x00	; 0
    2642:	a8 16       	cp	r10, r24
    2644:	b9 06       	cpc	r11, r25
    2646:	e8 f4       	brcc	.+58     	; 0x2682 <realloc+0x190>
			__brkval = cp;
    2648:	b0 92 bf 02 	sts	0x02BF, r11
    264c:	a0 92 be 02 	sts	0x02BE, r10
			__brkval_maximum = cp;
    2650:	b0 92 c1 02 	sts	0x02C1, r11
    2654:	a0 92 c0 02 	sts	0x02C0, r10
			fp1->sz = len;
    2658:	f7 01       	movw	r30, r14
    265a:	71 83       	std	Z+1, r23	; 0x01
    265c:	60 83       	st	Z, r22
    265e:	13 c0       	rjmp	.+38     	; 0x2686 <realloc+0x194>

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    2660:	cb 01       	movw	r24, r22
    2662:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <malloc>
    2666:	ec 01       	movw	r28, r24
    2668:	00 97       	sbiw	r24, 0x00	; 0
    266a:	59 f0       	breq	.+22     	; 0x2682 <realloc+0x190>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    266c:	d7 01       	movw	r26, r14
    266e:	4d 91       	ld	r20, X+
    2670:	5c 91       	ld	r21, X
    2672:	b8 01       	movw	r22, r16
    2674:	0e 94 b6 13 	call	0x276c	; 0x276c <memcpy>
	free(ptr);
    2678:	c8 01       	movw	r24, r16
    267a:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <free>
    267e:	8e 01       	movw	r16, r28
    2680:	02 c0       	rjmp	.+4      	; 0x2686 <realloc+0x194>
	return memp;
    2682:	00 e0       	ldi	r16, 0x00	; 0
    2684:	10 e0       	ldi	r17, 0x00	; 0
}
    2686:	c8 01       	movw	r24, r16
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	df 90       	pop	r13
    2696:	cf 90       	pop	r12
    2698:	bf 90       	pop	r11
    269a:	af 90       	pop	r10
    269c:	9f 90       	pop	r9
    269e:	8f 90       	pop	r8
    26a0:	7f 90       	pop	r7
    26a2:	6f 90       	pop	r6
    26a4:	08 95       	ret

000026a6 <__mulsi3>:
    26a6:	62 9f       	mul	r22, r18
    26a8:	d0 01       	movw	r26, r0
    26aa:	73 9f       	mul	r23, r19
    26ac:	f0 01       	movw	r30, r0
    26ae:	82 9f       	mul	r24, r18
    26b0:	e0 0d       	add	r30, r0
    26b2:	f1 1d       	adc	r31, r1
    26b4:	64 9f       	mul	r22, r20
    26b6:	e0 0d       	add	r30, r0
    26b8:	f1 1d       	adc	r31, r1
    26ba:	92 9f       	mul	r25, r18
    26bc:	f0 0d       	add	r31, r0
    26be:	83 9f       	mul	r24, r19
    26c0:	f0 0d       	add	r31, r0
    26c2:	74 9f       	mul	r23, r20
    26c4:	f0 0d       	add	r31, r0
    26c6:	65 9f       	mul	r22, r21
    26c8:	f0 0d       	add	r31, r0
    26ca:	99 27       	eor	r25, r25
    26cc:	72 9f       	mul	r23, r18
    26ce:	b0 0d       	add	r27, r0
    26d0:	e1 1d       	adc	r30, r1
    26d2:	f9 1f       	adc	r31, r25
    26d4:	63 9f       	mul	r22, r19
    26d6:	b0 0d       	add	r27, r0
    26d8:	e1 1d       	adc	r30, r1
    26da:	f9 1f       	adc	r31, r25
    26dc:	bd 01       	movw	r22, r26
    26de:	cf 01       	movw	r24, r30
    26e0:	11 24       	eor	r1, r1
    26e2:	08 95       	ret

000026e4 <__udivmodhi4>:
    26e4:	aa 1b       	sub	r26, r26
    26e6:	bb 1b       	sub	r27, r27
    26e8:	51 e1       	ldi	r21, 0x11	; 17
    26ea:	07 c0       	rjmp	.+14     	; 0x26fa <__udivmodhi4_ep>

000026ec <__udivmodhi4_loop>:
    26ec:	aa 1f       	adc	r26, r26
    26ee:	bb 1f       	adc	r27, r27
    26f0:	a6 17       	cp	r26, r22
    26f2:	b7 07       	cpc	r27, r23
    26f4:	10 f0       	brcs	.+4      	; 0x26fa <__udivmodhi4_ep>
    26f6:	a6 1b       	sub	r26, r22
    26f8:	b7 0b       	sbc	r27, r23

000026fa <__udivmodhi4_ep>:
    26fa:	88 1f       	adc	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	5a 95       	dec	r21
    2700:	a9 f7       	brne	.-22     	; 0x26ec <__udivmodhi4_loop>
    2702:	80 95       	com	r24
    2704:	90 95       	com	r25
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	08 95       	ret

0000270c <__udivmodsi4>:
    270c:	a1 e2       	ldi	r26, 0x21	; 33
    270e:	1a 2e       	mov	r1, r26
    2710:	aa 1b       	sub	r26, r26
    2712:	bb 1b       	sub	r27, r27
    2714:	fd 01       	movw	r30, r26
    2716:	0d c0       	rjmp	.+26     	; 0x2732 <__udivmodsi4_ep>

00002718 <__udivmodsi4_loop>:
    2718:	aa 1f       	adc	r26, r26
    271a:	bb 1f       	adc	r27, r27
    271c:	ee 1f       	adc	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	a2 17       	cp	r26, r18
    2722:	b3 07       	cpc	r27, r19
    2724:	e4 07       	cpc	r30, r20
    2726:	f5 07       	cpc	r31, r21
    2728:	20 f0       	brcs	.+8      	; 0x2732 <__udivmodsi4_ep>
    272a:	a2 1b       	sub	r26, r18
    272c:	b3 0b       	sbc	r27, r19
    272e:	e4 0b       	sbc	r30, r20
    2730:	f5 0b       	sbc	r31, r21

00002732 <__udivmodsi4_ep>:
    2732:	66 1f       	adc	r22, r22
    2734:	77 1f       	adc	r23, r23
    2736:	88 1f       	adc	r24, r24
    2738:	99 1f       	adc	r25, r25
    273a:	1a 94       	dec	r1
    273c:	69 f7       	brne	.-38     	; 0x2718 <__udivmodsi4_loop>
    273e:	60 95       	com	r22
    2740:	70 95       	com	r23
    2742:	80 95       	com	r24
    2744:	90 95       	com	r25
    2746:	9b 01       	movw	r18, r22
    2748:	ac 01       	movw	r20, r24
    274a:	bd 01       	movw	r22, r26
    274c:	cf 01       	movw	r24, r30
    274e:	08 95       	ret

00002750 <__tablejump2__>:
    2750:	ee 0f       	add	r30, r30
    2752:	ff 1f       	adc	r31, r31

00002754 <__tablejump__>:
    2754:	05 90       	lpm	r0, Z+
    2756:	f4 91       	lpm	r31, Z
    2758:	e0 2d       	mov	r30, r0
    275a:	09 94       	ijmp

0000275c <tolower>:
    275c:	91 11       	cpse	r25, r1
    275e:	08 95       	ret
    2760:	81 54       	subi	r24, 0x41	; 65
    2762:	8a 51       	subi	r24, 0x1A	; 26
    2764:	08 f4       	brcc	.+2      	; 0x2768 <tolower+0xc>
    2766:	80 5e       	subi	r24, 0xE0	; 224
    2768:	85 5a       	subi	r24, 0xA5	; 165
    276a:	08 95       	ret

0000276c <memcpy>:
    276c:	fb 01       	movw	r30, r22
    276e:	dc 01       	movw	r26, r24
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <memcpy+0xa>
    2772:	01 90       	ld	r0, Z+
    2774:	0d 92       	st	X+, r0
    2776:	41 50       	subi	r20, 0x01	; 1
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	d8 f7       	brcc	.-10     	; 0x2772 <memcpy+0x6>
    277c:	08 95       	ret

0000277e <strcpy>:
    277e:	fb 01       	movw	r30, r22
    2780:	dc 01       	movw	r26, r24
    2782:	01 90       	ld	r0, Z+
    2784:	0d 92       	st	X+, r0
    2786:	00 20       	and	r0, r0
    2788:	e1 f7       	brne	.-8      	; 0x2782 <strcpy+0x4>
    278a:	08 95       	ret

0000278c <_exit>:
    278c:	f8 94       	cli

0000278e <__stop_program>:
    278e:	ff cf       	rjmp	.-2      	; 0x278e <__stop_program>
